<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>wangsiyuan</title>
  
  <subtitle>小马过河</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="wangsiyuan233.github.io/"/>
  <updated>2018-04-05T03:20:42.889Z</updated>
  <id>wangsiyuan233.github.io/</id>
  
  <author>
    <name>wangsiyuan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>初探ES6(5)--Class的继承</title>
    <link href="wangsiyuan233.github.io/2018/04/04/42%E5%88%9D%E6%8E%A2ES6-5/"/>
    <id>wangsiyuan233.github.io/2018/04/04/42初探ES6-5/</id>
    <published>2018-04-04T13:09:24.000Z</published>
    <updated>2018-04-05T03:20:42.889Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><p><strong>1、</strong>Class 可以通过<code>extends</code>关键字实现继承，这比 ES5 的通过修改原型链实现继承，要清晰和方便很多。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ColorPoint</span> <span class="keyword">extends</span> <span class="title">Point</span> </span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>（上面代码定义了一个<code>ColorPoint</code>类，该类通过<code>extends</code>关键字，继承了<code>Point</code>类的所有属性和方法。但是由于没有部署任何代码，所以这两个类完全一样，等于复制了一个<code>Point</code>类。下面，我们在<code>ColorPoint</code>内部加上代码。）<br><a id="more"></a><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ColorPoint</span> <span class="keyword">extends</span> <span class="title">Point</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(x, y, color) &#123;</div><div class="line">    <span class="keyword">super</span>(x, y); <span class="comment">// 调用父类的constructor(x, y)</span></div><div class="line">    <span class="keyword">this</span>.color = color;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  toString() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.color + <span class="string">' '</span> + <span class="keyword">super</span>.toString(); <span class="comment">// 调用父类的toString()</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>（上面代码中，<code>constructor</code>方法和<code>toString</code>方法之中，都出现了<code>super</code>关键字，它在这里表示<strong>父类</strong>的构造函数，用来<strong>新建父类的<code>this</code>对象</strong>。）</p><p><strong>子类必须在<code>constructor</code>方法中调用<code>super</code>方法，否则新建实例时会报错。</strong>这是因为子类没有自己的<code>this</code>对象，而是继承父类的<code>this</code>对象，然后对其进行加工。如果不调用super方法，子类就得不到<code>this</code>对象。</p><p>ES5 的继承，实质是<strong>先创造子类</strong>的实例对象<code>this</code>，然后再将父类的方法添加到<code>this</code>上面（<code>Parent.apply(this)</code>）。<br>ES6 的继承机制完全不同，实质是<strong>先创造父类</strong>的实例对象<code>this</code>（所以必须先调用<code>super</code>方法），然后再用子类的构造函数修改<code>this</code>。</p><p><strong>2、</strong>在子类的构造函数中，只有调用<code>super</code>之后，才可以使用<code>this</code>关键字，否则会报错。这是因为子类实例的构建，是基于对父类实例加工，只有<code>super</code>方法才能返回父类实例。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(x, y) &#123;</div><div class="line">    <span class="keyword">this</span>.x = x;</div><div class="line">    <span class="keyword">this</span>.y = y;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ColorPoint</span> <span class="keyword">extends</span> <span class="title">Point</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(x, y, color) &#123;</div><div class="line">    <span class="keyword">this</span>.color = color; <span class="comment">// ReferenceError</span></div><div class="line">    <span class="keyword">super</span>(x, y);</div><div class="line">    <span class="keyword">this</span>.color = color; <span class="comment">// 正确</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>（上面代码中，子类的<code>constructor</code>方法没有调用<code>super</code>之前，就使用<code>this</code>关键字，结果报错，而放在<code>super</code>方法之后就是正确的。）</p><p><strong>3、</strong>可以使用<code>Object.getPrototypeOf</code>方法判断，一个类是否继承了另一个类。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Object</span>.getPrototypeOf(ColorPoint) === Point  <span class="comment">// true</span></div></pre></td></tr></table></figure></p><h2 id="二、extends-的继承目标"><a href="#二、extends-的继承目标" class="headerlink" title="二、extends 的继承目标"></a>二、<code>extends</code> 的继承目标</h2><p><code>extends</code>后面可以跟多种类型的值。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//第一种，子类继承Object类。</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">extends</span> <span class="title">Object</span> </span>&#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line">A.__proto__ === <span class="built_in">Object</span> <span class="comment">// true</span></div><div class="line">A.prototype.__proto__ === <span class="built_in">Object</span>.prototype <span class="comment">// true</span></div></pre></td></tr></table></figure></p><p>（第1种情况下，A其实就是构造函数<code>Object</code>的复制，A的实例就是<code>Object</code>的实例。）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//第二种，不存在任何继承。</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line">A.__proto__ === <span class="built_in">Function</span>.prototype <span class="comment">// true</span></div><div class="line">A.prototype.__proto__ === <span class="built_in">Object</span>.prototype <span class="comment">// true</span></div></pre></td></tr></table></figure><p>（第2种情况下，A作为一个基类（即不存在任何继承），就是一个普通函数，所以直接继承<code>Function.prototype</code>。但是，A调用后返回一个空对象（即<code>Object</code>实例），所以<code>A.prototype.__proto__</code>指向构造函数（Object）的<code>prototype</code>属性。）<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//第三种，子类继承null。</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">extends</span> <span class="title">null</span> </span>&#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line">A.__proto__ === <span class="built_in">Function</span>.prototype <span class="comment">// true</span></div><div class="line">A.prototype.__proto__ === <span class="literal">undefined</span> <span class="comment">// true</span></div></pre></td></tr></table></figure></p><p>（第3情况与第2种情况非常像。A也是一个普通函数，所以直接继承<code>Function.prototype</code>。但是，A调用后返回的对象不继承任何方法，所以它的<code>__proto__</code>指向<code>Function.prototype</code>，即实质上执行了下面的代码。）</p><h2 id="三、super"><a href="#三、super" class="headerlink" title="三、super"></a>三、<code>super</code></h2><p><code>super</code>关键字，既可以当作函数使用，也可以当作对象使用。在这两种情况下，它的用法完全不同。<br><strong>1、当作函数使用</strong><br><code>super</code>作为函数调用时，代表父类的构造函数。ES6 要求，子类的构造函数必须执行一次<code>super</code>函数。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>() &#123;</div><div class="line">    <span class="keyword">super</span>();</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>（上面代码中，子类B的构造函数之中的<code>super()</code>，代表调用父类的构造函数。这是必须的，否则 JavaScript 引擎会报错。）</p><p>注意，<code>super</code>虽然代表了父类A的构造函数，但是返回的是子类B的实例，<strong>即<code>super</code>内部的this指的是B</strong>，因此<code>super()</code>在这里相当于<code>A.prototype.constructor.call(this)</code>。</p><p>作为函数时，super()只能用在<strong>子类的构造函数</strong>之中，用在其他地方就会报错。</p><p><strong>2、当作对象使用</strong></p><p><strong>在普通方法中，指向父类的原型对象；在静态方法中，指向父类。</strong></p><p>2.1普通方法，指向父类的原型对象<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</div><div class="line">  p() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="number">2</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>() &#123;</div><div class="line">    <span class="keyword">super</span>();</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">super</span>.p()); <span class="comment">// 2</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> b = <span class="keyword">new</span> B();</div></pre></td></tr></table></figure></p><p>（上面代码中，子类B当中的<code>super.p()</code>，就是将<code>super</code>当作一个对象使用。这时，<code>super</code>在普通方法之中，指向<code>A.prototype</code>，所以<code>super.p()</code>就相当于<code>A.prototype.p()</code>。）</p><p>ES6 规定，在子类普通方法中通过<code>super</code>调用父类的方法时，方法内部的<code>this</code><strong>指向当前的子类实例</strong>。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>() &#123;</div><div class="line">    <span class="keyword">this</span>.x = <span class="number">1</span>;</div><div class="line">  &#125;</div><div class="line">  print() &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.x);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>() &#123;</div><div class="line">    <span class="keyword">super</span>();</div><div class="line">    <span class="keyword">this</span>.x = <span class="number">2</span>;</div><div class="line">  &#125;</div><div class="line">  m() &#123;</div><div class="line">    <span class="keyword">super</span>.print();</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> b = <span class="keyword">new</span> B();</div><div class="line">b.m() <span class="comment">// 2</span></div></pre></td></tr></table></figure></p><p>（上面代码中，<code>super.print()</code>虽然调用的是<code>A.prototype.print()</code>，但是<code>A.prototype.print()</code>内部的<code>this</code>指向子类B的实例，导致输出的是2，而不是1。也就是说，实际上执行的是<code>super.print.call(this)</code>。）</p><p>由于<code>this</code>指向子类实例，所以如果通过<code>super</code>对某个属性赋值，这时<code>super</code>就是<code>this</code>，赋值的属性会变成子类实例的属性。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>() &#123;</div><div class="line">    <span class="keyword">this</span>.x = <span class="number">1</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>() &#123;</div><div class="line">    <span class="keyword">super</span>();</div><div class="line">    <span class="keyword">this</span>.x = <span class="number">2</span>;</div><div class="line">    <span class="keyword">super</span>.x = <span class="number">3</span>;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">super</span>.x); <span class="comment">// undefined</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.x); <span class="comment">// 3</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> b = <span class="keyword">new</span> B();</div></pre></td></tr></table></figure></p><p>（上面代码中，<code>super.x</code>赋值为3，这时等同于对<code>this.x</code>赋值为3。而当读取<code>super.x</code>的时候，读的是<code>A.prototype.x</code>，所以返回<code>undefined</code>。）</p><p>2.2静态方法中，指向父类<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span> </span>&#123;</div><div class="line">  <span class="keyword">static</span> myMethod(msg) &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'static'</span>, msg);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  myMethod(msg) &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'instance'</span>, msg);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Parent</span> </span>&#123;</div><div class="line">  <span class="keyword">static</span> myMethod(msg) &#123;</div><div class="line">    <span class="keyword">super</span>.myMethod(msg);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  myMethod(msg) &#123;</div><div class="line">    <span class="keyword">super</span>.myMethod(msg);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Child.myMethod(<span class="number">1</span>); <span class="comment">// static 1</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> child = <span class="keyword">new</span> Child();</div><div class="line">child.myMethod(<span class="number">2</span>); <span class="comment">// instance 2</span></div></pre></td></tr></table></figure></p><p>（上面代码中，<code>super</code>在静态方法之中指向父类，在普通方法之中指向父类的原型对象。）</p><p>在子类的静态方法中通过<code>super</code>调用父类的方法时，方法内部的<code>this</code>指向当前的子类，而不是子类的实例。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>() &#123;</div><div class="line">    <span class="keyword">this</span>.x = <span class="number">1</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">static</span> print() &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.x);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>() &#123;</div><div class="line">    <span class="keyword">super</span>();</div><div class="line">    <span class="keyword">this</span>.x = <span class="number">2</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">static</span> m() &#123;</div><div class="line">    <span class="keyword">super</span>.print();</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">B.x = <span class="number">3</span>;</div><div class="line">B.m() <span class="comment">// 3</span></div></pre></td></tr></table></figure></p><p>（上面代码中，静态方法<code>B.m</code>里面，<code>super.print</code>指向父类的静态方法。这个方法里面的<code>this</code>指向的是B，而不是B的实例）</p><h2 id="四、类的-prototype属性和-proto-属性"><a href="#四、类的-prototype属性和-proto-属性" class="headerlink" title="四、类的 prototype属性和__proto__属性"></a>四、类的 <code>prototype</code>属性和<code>__proto__</code>属性</h2><p>ES5 中，每一个对象都有<code>__proto__</code>属性，指向对应的构造函数的<code>prototype</code>属性。<br>Class 作为构造函数的语法糖，同时有<code>prototype</code>属性和<code>__proto__</code>属性，因此同时存在两条继承链。<br><strong>1、</strong>子类的<code>__proto__</code>属性，表示构造函数的继承，总是指向父类。<br><strong>2、</strong>子类<code>prototype</code>属性的<code>__proto__</code>属性，<strong>表示方法的继承</strong>，总是指向父类的<code>prototype</code>属性。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line">B.__proto__ === A <span class="comment">// true</span></div><div class="line">B.prototype.__proto__ === A.prototype <span class="comment">// true</span></div></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Object</span>.setPrototypeOf(B.prototype, A.prototype);</div><div class="line"><span class="comment">// 等同于</span></div><div class="line">B.prototype.__proto__ = A.prototype;</div><div class="line"></div><div class="line"><span class="built_in">Object</span>.setPrototypeOf(B, A);</div><div class="line"><span class="comment">// 等同于</span></div><div class="line">B.__proto__ = A;</div></pre></td></tr></table></figure><p>上面这两条继承链，可以这样理解：<br><strong>作为一个对象，子类（B）的原型（<code>__proto__</code>属性）是父类（A）；</strong><br><strong>作为一个构造函数，子类（B）的原型对象（<code>prototype</code>属性）是父类的原型对象（<code>prototype</code>属性）的实例。</strong></p><h2 id="五、实例的-proto-属性"><a href="#五、实例的-proto-属性" class="headerlink" title="五、实例的 __proto__属性"></a>五、实例的 <code>__proto__</code>属性</h2><p>子类实例的<code>__proto__</code>属性的<code>__proto__</code>属性，指向父类实例的<code>__proto__</code>属性。也就是说，子类的原型的原型，是父类的原型。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Point(<span class="number">2</span>, <span class="number">3</span>);</div><div class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> ColorPoint(<span class="number">2</span>, <span class="number">3</span>, <span class="string">'red'</span>);</div><div class="line"></div><div class="line">p2.__proto__ === p1.__proto__ <span class="comment">// false</span></div><div class="line">p2.__proto__.__proto__ === p1.__proto__ <span class="comment">// true</span></div></pre></td></tr></table></figure></p><p>（上面代码中，<code>ColorPoint</code>继承了<code>Point</code>，导致前者原型的原型是后者的原型。）</p><h2 id="六、原生构造函数的继承"><a href="#六、原生构造函数的继承" class="headerlink" title="六、原生构造函数的继承"></a>六、原生构造函数的继承</h2><p>ES5 中原生构造函数是无法继承的。<br><code>Boolean()</code>、<code>Number()</code>、<code>String()</code>、<code>Array()</code>、<code>Date()</code>、<code>Function()</code>、<code>RegExp()</code>、<code>Error()</code>、<code>Object()</code><br>ES6 允许继承原生构造函数定义子类，因为 ES6 是先新建父类的实例对象<code>this</code>，然后再用子类的构造函数修饰<code>this</code>，使得父类的所有行为都可以继承。下面是一个继承<code>Array</code>的例子。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyArray</span> <span class="keyword">extends</span> <span class="title">Array</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(...args) &#123;</div><div class="line">    <span class="keyword">super</span>(...args);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> MyArray();</div><div class="line">arr[<span class="number">0</span>] = <span class="number">12</span>;</div><div class="line">arr.length <span class="comment">// 1</span></div><div class="line"></div><div class="line">arr.length = <span class="number">0</span>;</div><div class="line">arr[<span class="number">0</span>] <span class="comment">// undefined</span></div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、简介&quot;&gt;&lt;a href=&quot;#一、简介&quot; class=&quot;headerlink&quot; title=&quot;一、简介&quot;&gt;&lt;/a&gt;一、简介&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;1、&lt;/strong&gt;Class 可以通过&lt;code&gt;extends&lt;/code&gt;关键字实现继承，这比 ES5 的通过修改原型链实现继承，要清晰和方便很多。&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Point&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ColorPoint&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Point&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;（上面代码定义了一个&lt;code&gt;ColorPoint&lt;/code&gt;类，该类通过&lt;code&gt;extends&lt;/code&gt;关键字，继承了&lt;code&gt;Point&lt;/code&gt;类的所有属性和方法。但是由于没有部署任何代码，所以这两个类完全一样，等于复制了一个&lt;code&gt;Point&lt;/code&gt;类。下面，我们在&lt;code&gt;ColorPoint&lt;/code&gt;内部加上代码。）&lt;br&gt;
    
    </summary>
    
    
      <category term="ES6" scheme="wangsiyuan233.github.io/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>初探ES6(4)--Class的基本语法</title>
    <link href="wangsiyuan233.github.io/2018/04/04/41%E5%88%9D%E6%8E%A2ES6-4/"/>
    <id>wangsiyuan233.github.io/2018/04/04/41初探ES6-4/</id>
    <published>2018-04-04T08:44:10.000Z</published>
    <updated>2018-04-05T02:16:21.625Z</updated>
    
    <content type="html"><![CDATA[<p>类和模块的内部，默认就是<strong>严格模式</strong>，所以不需要使用<code>use strict</code>指定运行模式。只要你的代码写在类或模块之中，就只有严格模式可用。<br>考虑到未来所有的代码，其实都是运行在模块之中，所以 ES6 实际上把整个语言升级到了严格模式。</p><h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><p>JavaScript 中：<strong>生成一个对象的传统方法就是new一个函数</strong><br><a id="more"></a><br><strong>1、</strong>ES6 的类，完全可以看作<strong>构造函数</strong>的另一种写法。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">typeof</span> Point <span class="comment">// "function"</span></div><div class="line">Point === Point.prototype.constructor <span class="comment">// true</span></div></pre></td></tr></table></figure></p><p>类的数据类型就是函数，类本身就指向构造函数。</p><p>注意，定义“类”的方法的时候，前面不需要加上<code>function</code>这个关键字，直接把函数定义放进去了就可以了。另外，方法之间不需要逗号分隔，加了会报错。</p><p><strong>2、</strong>事实上，类的所有方法都定义在类的<code>prototype</code>属性上面。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>() &#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  toString() &#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  toValue() &#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 等同于 等同于 等同于</span></div><div class="line"></div><div class="line">Point.prototype = &#123;</div><div class="line">  <span class="keyword">constructor</span>() &#123;&#125;,</div><div class="line">  toString() &#123;&#125;,</div><div class="line">  toValue() &#123;&#125;,</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p><h2 id="二、constructor方法"><a href="#二、constructor方法" class="headerlink" title="二、constructor方法"></a>二、constructor方法</h2><p><strong>1、</strong>constructor方法是类的默认方法，通过new命令生成对象实例时，自动调用该方法。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 等同于 等同于 等同于</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>() &#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><strong>2、</strong>constructor方法默认返回实例对象（即<code>this</code>），完全可以指定返回另外一个对象。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.create(<span class="literal">null</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">new</span> Foo() <span class="keyword">instanceof</span> Foo<span class="comment">// false</span></div></pre></td></tr></table></figure></p><p>（上面代码中，constructor函数返回一个全新的对象，结果导致实例对象不是Foo类的实例。）</p><p><strong>3、</strong>类必须使用<code>new</code>调用，否则会报错。这是它跟普通构造函数的一个主要区别，后者不用<code>new</code>也可以执行。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.create(<span class="literal">null</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Foo()</div><div class="line"><span class="comment">// TypeError: Class constructor Foo cannot be invoked without 'new'</span></div></pre></td></tr></table></figure></p><h2 id="三、类的实例对象"><a href="#三、类的实例对象" class="headerlink" title="三、类的实例对象"></a>三、类的实例对象</h2><p><strong>1、</strong>与 ES5 一样，实例的属性除非显式定义在其本身（即定义在<code>this</code>对象上），否则都是定义在原型上（即定义在<code>class</code>上）。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//定义类</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="keyword">constructor</span>(x, y) &#123;</div><div class="line">    <span class="keyword">this</span>.x = x;</div><div class="line">    <span class="keyword">this</span>.y = y;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  toString() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">'('</span> + <span class="keyword">this</span>.x + <span class="string">', '</span> + <span class="keyword">this</span>.y + <span class="string">')'</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> point = <span class="keyword">new</span> Point(<span class="number">2</span>, <span class="number">3</span>);</div><div class="line"></div><div class="line">point.toString() <span class="comment">// (2, 3)</span></div><div class="line"></div><div class="line">point.hasOwnProperty(<span class="string">'x'</span>) <span class="comment">// true</span></div><div class="line">point.hasOwnProperty(<span class="string">'y'</span>) <span class="comment">// true</span></div><div class="line">point.hasOwnProperty(<span class="string">'toString'</span>) <span class="comment">// false</span></div><div class="line">point.__proto__.hasOwnProperty(<span class="string">'toString'</span>) <span class="comment">// true</span></div></pre></td></tr></table></figure></p><p>（上面代码中，<code>x</code>和<code>y</code>都是实例对象<code>point</code>自身的属性（因为定义在<code>this</code>变量上），所以<code>hasOwnProperty</code>方法返回<code>true</code>，而<code>toString</code>是原型对象的属性（因为定义在<code>Point</code>类上），所以<code>hasOwnProperty</code>方法返回<code>false</code>。这些都与 ES5 的行为保持一致。）<br><strong>2、类的所有实例共享一个原型对象。</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Point(<span class="number">2</span>,<span class="number">3</span>);</div><div class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> Point(<span class="number">3</span>,<span class="number">2</span>);</div><div class="line"></div><div class="line">p1.__proto__ === p2.__proto__  <span class="comment">//true</span></div></pre></td></tr></table></figure></p><p>（<code>p1</code>和<code>p2</code>都是<code>Point</code>的实例，它们的原型都是<code>Point.prototype</code>，所以<code>__proto__</code>属性是相等的。）</p><p>这也意味着，可以通过实例的<code>__proto__</code>属性为“类”添加方法。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Point(<span class="number">2</span>,<span class="number">3</span>);</div><div class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> Point(<span class="number">3</span>,<span class="number">2</span>);</div><div class="line"></div><div class="line">p1.__proto__.printName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="string">'Oops'</span> &#125;;</div><div class="line"></div><div class="line">p1.printName() <span class="comment">// "Oops"</span></div><div class="line">p2.printName() <span class="comment">// "Oops"</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> p3 = <span class="keyword">new</span> Point(<span class="number">4</span>,<span class="number">2</span>);</div><div class="line">p3.printName() <span class="comment">// "Oops"</span></div></pre></td></tr></table></figure></p><p>（上面代码在<code>p1</code>的原型上添加了一个<code>printName</code>方法，由于<code>p1</code>的原型就是<code>p2</code>的原型，因此<code>p2</code>也可以调用这个方法。而且，此后新建的实例<code>p3</code>也可以调用这个方法。这意味着，使用实例的<code>__proto__</code>属性改写原型，必须相当谨慎，不推荐使用，因为这会改变“类”的原始定义，影响到所有实例。）</p><h2 id="四、this-的指向"><a href="#四、this-的指向" class="headerlink" title="四、this 的指向"></a>四、this 的指向</h2><p><strong>类的方法内部如果含有<code>this</code>，它默认指向类的实例。</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Logger</span> </span>&#123;</div><div class="line">  printName(name = <span class="string">'there'</span>) &#123;</div><div class="line">    <span class="keyword">this</span>.print(<span class="string">`Hello <span class="subst">$&#123;name&#125;</span>`</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  print(text) &#123;</div><div class="line">    <span class="built_in">console</span>.log(text);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> logger = <span class="keyword">new</span> Logger();</div><div class="line"><span class="keyword">const</span> &#123; printName &#125; = logger;</div><div class="line">printName(); <span class="comment">// TypeError: Cannot read property 'print' of undefined</span></div></pre></td></tr></table></figure></p><p>（为啥会报错呢？ 因为<code>printName</code>方法中的<code>this</code>，默认指向<code>Logger</code>类的实例。但是，如果将这个方法提取出来单独使用，<code>this</code>会指向该方法运行时所在的环境，因为找不到<code>print</code>方法而导致报错。）<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 解决方法一：用bind绑定</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Logger</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>() &#123;</div><div class="line">    <span class="keyword">this</span>.printName = <span class="keyword">this</span>.printName.bind(<span class="keyword">this</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// ...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 解决方法二：用箭头函数</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Logger</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>() &#123;</div><div class="line">    <span class="keyword">this</span>.printName = <span class="function">(<span class="params">name = <span class="string">'there'</span></span>) =&gt;</span> &#123;</div><div class="line">      <span class="keyword">this</span>.print(<span class="string">`Hello <span class="subst">$&#123;name&#125;</span>`</span>);</div><div class="line">    &#125;;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// ...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;类和模块的内部，默认就是&lt;strong&gt;严格模式&lt;/strong&gt;，所以不需要使用&lt;code&gt;use strict&lt;/code&gt;指定运行模式。只要你的代码写在类或模块之中，就只有严格模式可用。&lt;br&gt;考虑到未来所有的代码，其实都是运行在模块之中，所以 ES6 实际上把整个语言升级到了严格模式。&lt;/p&gt;
&lt;h2 id=&quot;一、简介&quot;&gt;&lt;a href=&quot;#一、简介&quot; class=&quot;headerlink&quot; title=&quot;一、简介&quot;&gt;&lt;/a&gt;一、简介&lt;/h2&gt;&lt;p&gt;JavaScript 中：&lt;strong&gt;生成一个对象的传统方法就是new一个函数&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="ES6" scheme="wangsiyuan233.github.io/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>初探ES6(3)--箭头函数</title>
    <link href="wangsiyuan233.github.io/2018/04/04/40%E5%88%9D%E6%8E%A2ES6-3/"/>
    <id>wangsiyuan233.github.io/2018/04/04/40初探ES6-3/</id>
    <published>2018-04-04T01:57:54.000Z</published>
    <updated>2018-04-04T02:13:41.117Z</updated>
    
    <content type="html"><![CDATA[<p>这可能是我第三次尝试写箭头函数了吧哈哈<br>(<em>^▽^</em>)  特写此文预祝比特币大跌  ٩(๑&gt;◡&lt;๑)۶<br><a id="more"></a></p><blockquote><p>用处一：简化回调函数</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 正常函数写法</span></div><div class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].map(<span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> x * x;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 箭头函数写法</span></div><div class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].map(<span class="function"><span class="params">x</span> =&gt;</span> x * x);</div><div class="line"></div><div class="line"><span class="comment">// 正常函数写法</span></div><div class="line"><span class="keyword">var</span> result = values.sort(<span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> a - b;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 箭头函数写法</span></div><div class="line"><span class="keyword">var</span> result = values.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b);</div></pre></td></tr></table></figure><blockquote><p>用处二：简化this的指向</p></blockquote><p>箭头函数有几个使用注意点。</p><p>（1）函数体内的<code>this</code>对象，就是<strong>【定-义-时】</strong>所在的对象，而不是<strong>【使-用-时】</strong>所在的对象。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Timer</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.s1 = <span class="number">0</span>;</div><div class="line">  <span class="keyword">this</span>.s2 = <span class="number">0</span>;</div><div class="line">  <span class="comment">// 箭头函数</span></div><div class="line">  setInterval(<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">this</span>.s1++, <span class="number">1000</span>);</div><div class="line">  <span class="comment">// 普通函数</span></div><div class="line">  setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.s2++;</div><div class="line">  &#125;, <span class="number">1000</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> timer = <span class="keyword">new</span> Timer();</div><div class="line"></div><div class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'s1: '</span>, timer.s1), <span class="number">3100</span>);</div><div class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'s2: '</span>, timer.s2), <span class="number">3100</span>);</div><div class="line"><span class="comment">// s1: 3</span></div><div class="line"><span class="comment">// s2: 0</span></div></pre></td></tr></table></figure></p><p>上面代码中，<code>Timer</code>函数内部设置了两个定时器，分别使用了箭头函数和普通函数。前者的<code>this</code>绑定定义时所在的作用域（即<code>Timer</code>函数），后者的<code>this</code>指向运行时所在的作用域（即全局对象）。所以，3100 毫秒之后，<code>timer.s1</code>被更新了 3 次，而<code>timer.s2</code>一次都没更新。</p><p>（2）箭头函数不可以当作构造函数，也就是说，不可以使用<code>new</code>命令，否则会抛出一个错误。<br><code>this</code>指向的固定化，并不是因为箭头函数内部有绑定<code>this</code>的机制，<strong>实际原因是箭头函数根本没有自己的<code>this</code></strong>，导致内部的<code>this</code>就是外层代码块的<code>this</code>。正是因为它没有<code>this</code>，所以也就不能用作构造函数。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">      <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'id:'</span>, <span class="keyword">this</span>.id);</div><div class="line">      &#125;;</div><div class="line">    &#125;;</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> f = foo.call(&#123;<span class="attr">id</span>: <span class="number">1</span>&#125;);</div><div class="line"></div><div class="line"><span class="keyword">var</span> t1 = f.call(&#123;<span class="attr">id</span>: <span class="number">2</span>&#125;)()(); <span class="comment">// id: 1</span></div><div class="line"><span class="keyword">var</span> t2 = f().call(&#123;<span class="attr">id</span>: <span class="number">3</span>&#125;)(); <span class="comment">// id: 1</span></div><div class="line"><span class="keyword">var</span> t3 = f()().call(&#123;<span class="attr">id</span>: <span class="number">4</span>&#125;); <span class="comment">// id: 1</span></div></pre></td></tr></table></figure></p><p>上面代码之中，只有一个<code>this</code>，就是函数<code>foo</code>的<code>this</code>，所以t1、t2、t3都输出同样的结果。因为所有的内层函数都是箭头函数，都没有自己的<code>this</code>，它们的this其实都是最外层<code>foo</code>函数的<code>this</code>。</p><p>（3）指向外层函数的对应的三个变量：<code>arguments</code>、<code>super</code>、<code>new.target</code>在箭头函数之中也是不存在的。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'args:'</span>, <span class="built_in">arguments</span>);</div><div class="line">  &#125;, <span class="number">100</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">foo(<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>)</div><div class="line"><span class="comment">// args: [2, 4, 6, 8]</span></div></pre></td></tr></table></figure></p><p>上面代码中，箭头函数内部的变量arguments，其实是函数foo的arguments变量。</p><p>（4）不可以使用<code>yield</code>命令，因此箭头函数不能用作 <code>Generator</code>函数。<br>（5）箭头函数没有自己的this，所以当然也就不能用<code>call()</code>、<code>apply()</code>、<code>bind()</code>这些方法去改变this的指向。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> [</div><div class="line">    <span class="function">(<span class="params">(</span>) =&gt;</span> <span class="keyword">this</span>.x).bind(&#123; <span class="attr">x</span>: <span class="string">'inner'</span> &#125;)()</div><div class="line">  ];</div><div class="line">&#125;).call(&#123; <span class="attr">x</span>: <span class="string">'outer'</span> &#125;);</div><div class="line"><span class="comment">// ['outer']</span></div></pre></td></tr></table></figure></p><p>ES6的箭头函数极大的解决了ES5中this‘指向不明’的错误 （面试当然不考ES6的this啦）</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这可能是我第三次尝试写箭头函数了吧哈哈&lt;br&gt;(&lt;em&gt;^▽^&lt;/em&gt;)  特写此文预祝比特币大跌  ٩(๑&amp;gt;◡&amp;lt;๑)۶&lt;br&gt;
    
    </summary>
    
    
      <category term="ES6" scheme="wangsiyuan233.github.io/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>初探ES6(2)--变量的解构赋值</title>
    <link href="wangsiyuan233.github.io/2018/04/03/39%E5%88%9D%E6%8E%A2ES6-2/"/>
    <id>wangsiyuan233.github.io/2018/04/03/39初探ES6-2/</id>
    <published>2018-04-03T08:31:54.000Z</published>
    <updated>2018-04-03T08:31:55.911Z</updated>
    
    <content type="html"><![CDATA[<p><strong>从数组和对象中提取值，对变量进行赋值，这被称为解构。</strong></p><h2 id="一、数组的解构赋值"><a href="#一、数组的解构赋值" class="headerlink" title="一、数组的解构赋值"></a>一、数组的解构赋值</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//以前ES5</span></div><div class="line"><span class="keyword">let</span> a = <span class="number">1</span>;</div><div class="line"><span class="keyword">let</span> b = <span class="number">2</span>;</div><div class="line"><span class="keyword">let</span> c = <span class="number">3</span>;</div><div class="line"></div><div class="line"><span class="comment">//现在ES6</span></div><div class="line"><span class="keyword">let</span> [a, b, c] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</div><div class="line"></div><div class="line"><span class="keyword">let</span> [foo, [[bar], baz]] = [<span class="number">1</span>, [[<span class="number">2</span>], <span class="number">3</span>]];</div><div class="line">foo <span class="comment">// 1</span></div><div class="line">bar <span class="comment">// 2</span></div><div class="line">baz <span class="comment">// 3</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> [ , , third] = [<span class="string">"foo"</span>, <span class="string">"bar"</span>, <span class="string">"baz"</span>];</div><div class="line">third <span class="comment">// "baz"</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> [x, , y] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</div><div class="line">x <span class="comment">// 1</span></div><div class="line">y <span class="comment">// 3</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> [head, ...tail] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</div><div class="line">head <span class="comment">// 1</span></div><div class="line">tail <span class="comment">// [2, 3, 4]</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> [x, y, ...z] = [<span class="string">'a'</span>];</div><div class="line">x <span class="comment">// "a"</span></div><div class="line">y <span class="comment">// undefined 解构不成功，变量的值就等于undefined。</span></div><div class="line">z <span class="comment">// []</span></div><div class="line"></div><div class="line"><span class="comment">//下面两个例子属于不完全结构，也可以成功</span></div><div class="line"><span class="keyword">let</span> [x, y] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</div><div class="line">x <span class="comment">// 1</span></div><div class="line">y <span class="comment">// 2</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> [a, [b], d] = [<span class="number">1</span>, [<span class="number">2</span>, <span class="number">3</span>], <span class="number">4</span>];</div><div class="line">a <span class="comment">// 1</span></div><div class="line">b <span class="comment">// 2 是个谜</span></div><div class="line">d <span class="comment">// 4</span></div></pre></td></tr></table></figure><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 下面的语句都会报错，因为等号右边的值，要么转为对象以后不具备 Iterator 接口（前五个表达式），要么本身就不具备 Iterator 接口（最后一个表达式）。</span></div><div class="line"><span class="keyword">let</span> [foo] = <span class="number">1</span>;</div><div class="line"><span class="keyword">let</span> [foo] = <span class="literal">false</span>;</div><div class="line"><span class="keyword">let</span> [foo] = <span class="literal">NaN</span>;</div><div class="line"><span class="keyword">let</span> [foo] = <span class="literal">undefined</span>;</div><div class="line"><span class="keyword">let</span> [foo] = <span class="literal">null</span>;</div><div class="line"><span class="keyword">let</span> [foo] = &#123;&#125;;</div><div class="line"><span class="comment">//定眼一瞧这不是基本类型吗哈哈</span></div></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//默认值</span></div><div class="line"><span class="keyword">let</span> [foo = <span class="literal">true</span>] = [];</div><div class="line">foo <span class="comment">// true</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> [x, y = <span class="string">'b'</span>] = [<span class="string">'a'</span>]; <span class="comment">// x='a', y='b'</span></div><div class="line"><span class="keyword">let</span> [x, y = <span class="string">'b'</span>] = [<span class="string">'a'</span>, <span class="literal">undefined</span>]; <span class="comment">// x='a', y='b'</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> [x = <span class="number">1</span>, y = x] = [];     <span class="comment">// x=1; y=1</span></div><div class="line"><span class="keyword">let</span> [x = <span class="number">1</span>, y = x] = [<span class="number">2</span>];    <span class="comment">// x=2; y=2</span></div><div class="line"><span class="keyword">let</span> [x = <span class="number">1</span>, y = x] = [<span class="number">1</span>, <span class="number">2</span>]; <span class="comment">// x=1; y=2</span></div><div class="line"><span class="keyword">let</span> [x = y, y = <span class="number">1</span>] = [];     <span class="comment">// ReferenceError: y is not defined x用y做默认值时，y还没有声明</span></div></pre></td></tr></table></figure><h2 id="二、对象的解构赋值"><a href="#二、对象的解构赋值" class="headerlink" title="二、对象的解构赋值"></a>二、对象的解构赋值</h2><p><strong>对象</strong>的解构赋值的内部机制，是先找到同名属性，然后再赋给对应的变量。真正被赋值的是后者，而不是前者。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//下面代码中，foo是匹配的模式，baz才是变量。真正被赋值的是变量baz，而不是模式foo。</span></div><div class="line"><span class="keyword">let</span> &#123; <span class="attr">foo</span>: baz &#125; = &#123; <span class="attr">foo</span>: <span class="string">"aaa"</span>, <span class="attr">bar</span>: <span class="string">"bbb"</span> &#125;;</div><div class="line">baz <span class="comment">// "aaa"</span></div><div class="line">foo <span class="comment">// error: foo is not defined</span></div></pre></td></tr></table></figure></p><h2 id="三、字符串的解构赋值"><a href="#三、字符串的解构赋值" class="headerlink" title="三、字符串的解构赋值"></a>三、字符串的解构赋值</h2><p>解构赋值的规则是，只要等号右边的值<strong>不是对象或数组</strong>，就先将其转为对象。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> [a, b, c, d, e] = <span class="string">'hello'</span>;</div><div class="line">a <span class="comment">// "h"</span></div><div class="line">b <span class="comment">// "e"</span></div><div class="line">c <span class="comment">// "l"</span></div><div class="line">d <span class="comment">// "l"</span></div><div class="line">e <span class="comment">// "o"</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> &#123;<span class="attr">length</span> : len&#125; = <span class="string">'hello'</span>;</div><div class="line">len <span class="comment">// 5</span></div></pre></td></tr></table></figure></p><h2 id="四、数值和布尔值的解构赋值"><a href="#四、数值和布尔值的解构赋值" class="headerlink" title="四、数值和布尔值的解构赋值"></a>四、数值和布尔值的解构赋值</h2><p>解构赋值的规则是，只要等号右边的值<strong>不是对象或数组</strong>，就先将其转为对象。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> &#123;<span class="attr">toString</span>: s&#125; = <span class="number">123</span>;</div><div class="line">s === <span class="built_in">Number</span>.prototype.toString <span class="comment">// true</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> &#123;<span class="attr">toString</span>: s&#125; = <span class="literal">true</span>;</div><div class="line">s === <span class="built_in">Boolean</span>.prototype.toString <span class="comment">// true</span></div></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//由于undefined和null无法转为对象，所以对它们进行解构赋值，都会报错。</span></div><div class="line"><span class="keyword">let</span> &#123; <span class="attr">prop</span>: x &#125; = <span class="literal">undefined</span>; <span class="comment">// TypeError</span></div><div class="line"><span class="keyword">let</span> &#123; <span class="attr">prop</span>: y &#125; = <span class="literal">null</span>; <span class="comment">// TypeError</span></div></pre></td></tr></table></figure><h2 id="五、函数参数的解构赋值"><a href="#五、函数参数的解构赋值" class="headerlink" title="五、函数参数的解构赋值"></a>五、函数参数的解构赋值</h2><p>解构赋值的规则是，只要等号右边的值<strong>不是对象或数组</strong>，就先将其转为对象。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//第一个move函数：下面代码中，函数move的参数是一个对象，通过对这个对象进行解构，得到变量x和y的值。如果解构失败，x和y等于默认值。</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">move</span>(<span class="params">&#123;x = <span class="number">0</span>, y = <span class="number">0</span>&#125; = &#123;&#125;</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> [x, y];</div><div class="line">&#125;</div><div class="line"></div><div class="line">move(&#123;<span class="attr">x</span>: <span class="number">3</span>, <span class="attr">y</span>: <span class="number">8</span>&#125;); <span class="comment">// [3, 8]</span></div><div class="line">move(&#123;<span class="attr">x</span>: <span class="number">3</span>&#125;); <span class="comment">// [3, 0]</span></div><div class="line">move(&#123;&#125;); <span class="comment">// [0, 0]</span></div><div class="line">move(); <span class="comment">// [0, 0]</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//第二个move函数：下面代码是为函数move的参数指定默认值，而不是为变量x和y指定默认值，所以会得到与前一种写法不同的结果。</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">move</span>(<span class="params">&#123;x, y&#125; = &#123; x: <span class="number">0</span>, y: <span class="number">0</span> &#125;</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> [x, y];</div><div class="line">&#125;</div><div class="line"></div><div class="line">move(&#123;<span class="attr">x</span>: <span class="number">3</span>, <span class="attr">y</span>: <span class="number">8</span>&#125;); <span class="comment">// [3, 8]</span></div><div class="line">move(&#123;<span class="attr">x</span>: <span class="number">3</span>&#125;); <span class="comment">// [3, undefined]</span></div><div class="line">move(&#123;&#125;); <span class="comment">// [undefined, undefined]</span></div><div class="line">move(); <span class="comment">// [0, 0]</span></div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;从数组和对象中提取值，对变量进行赋值，这被称为解构。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;一、数组的解构赋值&quot;&gt;&lt;a href=&quot;#一、数组的解构赋值&quot; class=&quot;headerlink&quot; title=&quot;一、数组的解构赋值&quot;&gt;&lt;/a&gt;一、数组的解构赋值&lt;/h2&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//以前ES5&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; a = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; b = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; c = &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//现在ES6&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; [a, b, c] = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; [foo, [[bar], baz]] = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, [[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;], &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;]];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;foo &lt;span class=&quot;comment&quot;&gt;// 1&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;bar &lt;span class=&quot;comment&quot;&gt;// 2&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;baz &lt;span class=&quot;comment&quot;&gt;// 3&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; [ , , third] = [&lt;span class=&quot;string&quot;&gt;&quot;foo&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;bar&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;baz&quot;&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;third &lt;span class=&quot;comment&quot;&gt;// &quot;baz&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; [x, , y] = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;x &lt;span class=&quot;comment&quot;&gt;// 1&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;y &lt;span class=&quot;comment&quot;&gt;// 3&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; [head, ...tail] = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;head &lt;span class=&quot;comment&quot;&gt;// 1&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;tail &lt;span class=&quot;comment&quot;&gt;// [2, 3, 4]&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; [x, y, ...z] = [&lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;x &lt;span class=&quot;comment&quot;&gt;// &quot;a&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;y &lt;span class=&quot;comment&quot;&gt;// undefined 解构不成功，变量的值就等于undefined。&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;z &lt;span class=&quot;comment&quot;&gt;// []&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//下面两个例子属于不完全结构，也可以成功&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; [x, y] = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;x &lt;span class=&quot;comment&quot;&gt;// 1&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;y &lt;span class=&quot;comment&quot;&gt;// 2&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; [a, [b], d] = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, [&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;], &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;a &lt;span class=&quot;comment&quot;&gt;// 1&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;b &lt;span class=&quot;comment&quot;&gt;// 2 是个谜&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;d &lt;span class=&quot;comment&quot;&gt;// 4&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="ES6" scheme="wangsiyuan233.github.io/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>聊聊系列(3)-- HTTP</title>
    <link href="wangsiyuan233.github.io/2018/04/02/38%E8%81%8A%E8%81%8A%E7%B3%BB%E5%88%97-3/"/>
    <id>wangsiyuan233.github.io/2018/04/02/38聊聊系列-3/</id>
    <published>2018-04-02T06:53:17.000Z</published>
    <updated>2018-04-03T07:03:51.103Z</updated>
    
    <content type="html"><![CDATA[<p>本文是<a href="https://book.douban.com/subject/25863515/" target="_blank" rel="external">《图解HTTP》</a>的“摘要”版本，笔者更多关注得是和自身知识所融洽的部分，如果对更详细的内容感兴趣，可以移步实体书。</p><h2 id="一、TCP-IP通信传输流"><a href="#一、TCP-IP通信传输流" class="headerlink" title="一、TCP/IP通信传输流"></a>一、TCP/IP通信传输流</h2><p><img src="https://i.imgur.com/wj6Zhcp.png" alt=""><br><a id="more"></a></p><h2 id="二、TCP协议三次握手策略"><a href="#二、TCP协议三次握手策略" class="headerlink" title="二、TCP协议三次握手策略"></a>二、TCP协议三次握手策略</h2><p>第一次：客户端 ——&gt;&gt;&gt; 服务端 SYN数据打包给你啦！<br>第二次：服务端 ——&gt;&gt;&gt; 客户端 我收到啦！（SYN/ACK）<br>第三次：客户端 ——&gt;&gt;&gt; 服务端 我知道你知道啦！</p><h2 id="三、概念的厘清"><a href="#三、概念的厘清" class="headerlink" title="三、概念的厘清"></a>三、概念的厘清</h2><p>1、DNS协议提供域名查找IP，或知道IP反查域名；<br>2、IP是一组纯地址，而我们访问的<code>baidu.com</code>是域名或主机名<br>3、URL是需要输入的资源地址（网址）；URI是用字符串标识的某一互联网资源；<br>   URL是URI的子集；<br>4、POST的目的是传输（发信息）<br>   GET的目的是请求资源；<br>5、cookie通过在请求和响应报文中写入cookie信息，来控制客户端的状态<br>   翻译成人话就是：刷新以后我在这个网站还是登陆的状态。</p><h2 id="四、HTTP状态码"><a href="#四、HTTP状态码" class="headerlink" title="四、HTTP状态码"></a>四、HTTP状态码</h2><p><img src="https://i.imgur.com/HFcsVlO.png" alt=""></p><blockquote><p>200 OK 服务端正常处理了客户端发来的请求<br>204 no content 服务端正常处理了客户端发来的请求,但返回的报文中不含主体部分；</p><h2 id="206-partial-content-服务端成功的执行了范围请求"><a href="#206-partial-content-服务端成功的执行了范围请求" class="headerlink" title="206 partial content 服务端成功的执行了范围请求"></a>206 partial content 服务端成功的执行了范围请求</h2><p>301 moved permanently 永久性重定向 请求的资源被分配了新的URI，以后也要用这个新的URI<br>302 Found 临时性重定向 请求的资源被分配了新的URI，现在就要用这个新的URI （已移动的资源可能会变回了，这次先用着吧）<br>303 see other 和302不同之处在于 要求GET方法定向获取资源<br>【当301/302/303返回时，几乎所有的浏览器都会删除请求主体+把POST改成GET，之后请求会再次自动发送】<br>304 Not Modified (虽然是3系，但是和重定向没有关系) 客户端发送了附带条件的请求，服务端虽然找到了资源，但是不符合[附带的条件]</p><h2 id="307-Temporary-Redirect-临时重定向-和302很像-也是禁止POST变成GET"><a href="#307-Temporary-Redirect-临时重定向-和302很像-也是禁止POST变成GET" class="headerlink" title="307 Temporary Redirect 临时重定向 和302很像 也是禁止POST变成GET"></a>307 Temporary Redirect 临时重定向 和302很像 也是禁止POST变成GET</h2><p>400 Bad Request 请求中有语法错误<br>401 Unauthorized 表示请求中需要HTTP认证哦！浏览器第1次就收401里面会带一个认证对话窗口，第2次再接到401代表用户认证失败<br>403 Forbidden 服务器拒绝了这次请求的资源</p><h2 id="404-Not-Found-服务器上无法找到请求的资源"><a href="#404-Not-Found-服务器上无法找到请求的资源" class="headerlink" title="404 Not Found 服务器上无法找到请求的资源"></a>404 Not Found 服务器上无法找到请求的资源</h2><p>5系代表服务器本身的错误<br>500 Internal Server Error 服务器在执行请求时发生了错误<br>503 Service Unavailable 服务器暂时处于超负荷运转或者停机维护阶段</p></blockquote><h2 id="五、GET请求"><a href="#五、GET请求" class="headerlink" title="五、GET请求"></a>五、GET请求</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">//GET 请求 </div><div class="line">GET /?w=1 HTTP/1.1</div><div class="line">Host: baidu.com</div><div class="line">Accept: text/html</div><div class="line"></div><div class="line"></div><div class="line">//响应</div><div class="line">HTTP/1.1 200 OK</div><div class="line">Content-Type: text/html; charset=utf-8</div><div class="line">Content-Length: 10000</div><div class="line"></div><div class="line"><span class="meta">&lt;!DOCTYPE&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span>......<span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><h2 id="六、POST请求"><a href="#六、POST请求" class="headerlink" title="六、POST请求"></a>六、POST请求</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">//POST 请求</div><div class="line">POST /login?w=1 HTTP/1.1</div><div class="line">Host: baidu.com</div><div class="line">Accept: application/ms-word</div><div class="line">Content-Type: application/x-www-form-urlencoded</div><div class="line">Content-Length: 10</div><div class="line"></div><div class="line">username=fangfang&amp;password=mima</div><div class="line"></div><div class="line">//响应</div><div class="line">HTTP/1.1 403 Forbidden</div><div class="line">Content-Type: application/md-word</div><div class="line">Content-Length: 200</div><div class="line"></div><div class="line">word格式</div></pre></td></tr></table></figure><h2 id="七、Web安全"><a href="#七、Web安全" class="headerlink" title="七、Web安全"></a>七、Web安全</h2><p>HTTP的不足之处：<br>1、通信使用明文，内容可能被窃听<br>2、通信放的什么可能被伪装<br>3、报文的完整性被篡改<br>—-&gt;&gt;&gt;&gt; 改进<br><strong>HTTP + 加密 + 认证 + 完整性保护 = HTTPS</strong><br>（HTTPS的不足：证书贵+速度很慢）</p><p>怎样给数据加密呢？<br>目前有以下几种加密方式：<br>1、对称加密 ： 加密和解密数据使用同一个密钥。这种加密方式的优点是速度很快，常见对称加密的算法有 AES；<br>2、非对称加密： 加密和解密使用不同的密钥，叫公钥和私钥。数据用公钥加密后必须用私钥解密，数据用私钥加密后必须用公钥解密。一般来说私钥自己保留好，把公钥公开给别人，让别人拿自己的公钥加密数据后发给自己，这样只有自己才能解密。 这种加密方式的特点是速度慢，CPU 开销大，常见非对称加密算法有 RSA；<br>3、Hash： hash 是把任意长度数据经过处理变成一个长度固定唯一的字符串，但任何人拿到这个字符串无法反向解密成原始数据（解开你就是密码学专家了），Hash 常用来验证数据的完整性。常见 Hash 算法有 MD5（已经不安全了）、SHA1、SHA256<br>这些加密其实都是各式各样的<strong>算法</strong>。</p><p><strong>讲个小故事</strong></p><p>班里来了个新同学小美，长的特别漂亮，小谷暗恋小美很久，终于有一天小谷鼓起勇气向小美表白。小谷写了个纸条：“我是小谷，我喜欢你，你喜欢我吗？” ，让小王转交给小美。<br>正常情况下，小王会把纸条转给小美，小美看到后很开心，回复了纸条：“我是小美，我也喜欢你”，让小王再转递给小谷。<br>可是小王也暗恋小美，当然不愿甘做嫁衣。这个时候小王可以有几方法来捣乱：<br>收到小谷的纸条后扔掉纸条。但这样做小谷收不到回应下课会去单独问小美，事情就败露了<br>偷窥纸条的内容，然后举报给老师<br>收到小谷的纸条后，小王立即给小谷发一个回复纸条：“我不喜欢你，我喜欢小王”。同时小王给小美发一个纸条：“我是小谷，你长的真丑，嘿嘿”<br>正常帮小谷和小美投递纸条，成就美事。但复印一份小谷的纸条，过两天小王把这个纸条发给了班里的其他女生小花，这样小美知道后必然会闹分手</p><p>小谷很聪明，早就看出来小王心怀不轨，可是没办法，要传信必然要经过小王，要怪就怪自己太腼腆不敢下课直接亲手送上。怎么办呢？<br>有一种办法是把纸条的信息加密(AES 加密)，小王就不知道纸条内容了。可是问题来了，小美也不知道密钥，她收到信后也无法解密啊。倒是可以把密钥放到纸条里，可这样小王也得到了密钥等于白忙活一场。<br>再说说小美，小美很漂亮，在以前的学校被称为数学女神，转学到这里后立即被小谷吸引了，她看出来小谷有点喜欢自己但又不十分确定，她不想主动。她猜到小谷会在上课的时候可能用写纸条的方式表白，也猜到猥琐的小王会在中间捣乱。如何让小谷能顺利向自己表白呢？小美在疯狂的思考：<br>方案一： 我可以生成一对公钥和私钥，把公钥公开给班里所有的同学。这样小谷就能得到公钥，把要发的信息用公钥加密，只有我自己能用私钥解密。可是我如何把我的回复发出去呢？如果用我的私钥加密，小谷倒是能用公钥解密，但班里任何同学都能解密，被其他同学看到就糗大了。而且如果小谷纸条的内容太多，他用公钥加密需要花一整节课的时间，不能耽误他学习<br>方案二：我可以生成一对公钥和私钥，把公钥公开给班里所有的同学，这样小谷就能得到公钥。如果小谷够聪明的话，他得到公钥后会生成一个对称加密AES的密钥，然后用我的公钥把 AES 密钥加密(AES 密钥长度很短加密几乎不需要时间)，然后把加密后的密钥发给我。我收到后用我的私钥解密，得到小谷和我约定的对对称加密密钥，然后我们用这个只有我们俩知道的对称密钥加密数据进行交流。 </p><p>下课休息的时候，小美给班里的同学说：“快数学考试了，我的数学很好，考场上需要要我帮忙的同学可以找我，我公布一下我的公钥，为了安全起见大家用我的公钥加密消息。”</p><p>一切貌似天衣无缝，可是小美在班里公布自己公钥的时候小谷正好拉肚子去了厕所，回来之后才知道这事，小谷于是问旁边的同学小花小美公钥是多少。小花以前是班里受欢迎的女生被很多男生仰慕，在小美来之后立即被夺了风头，一直怀恨在心。于是小花告诉了小谷一个假公钥，其实是自己生成的公钥。这样万一小谷找小美要小抄，自己可以冒充小美给一个错答案。</p><p>一切被小美看到眼里，这样不行啊， 别到时候自己和小谷的好事没成，反而同学考试被陷害栽赃到自己头上。怎么办呢？对了，班长是班里人品很正的人，可以用班长给自己做信用背书，正好前两天班长在班里通知了自己的公钥。 于是小美找到班长，做了一个证书，证书上有自己的名字、学号、公钥、公证人班长的名字，同时把这些信息通过 Hash (sha256)处理后请求班长用自己的私钥进行加密（为什么用 Hash 处理？因为东西太多非对称加密很费时），也放到证书上。于是小美再次把证书通报给班里所有的同学。</p><p>小谷这次得到了证书，发现上面的公证人是班长，于是先用班长的公钥对证书上被班长私钥加密后的字段进行解密，得到元素数据的 Hash。   再对元素数据进行 Hash和刚刚解密的 Hash 进行比对。如果比对成功表示证书上的信息无误，且是由班长担保的。这时候小谷确信证书上的公钥就是小美的。任何人因为没有班长的私钥都无法伪造证书。</p><p>你以为故事就这么圆满结束了吗？其实没有，班长前两天在公布自己的证书的时候小谷正好生病请假了。 他根本不知道班长的公钥是不是他本人的。<br>这个时候他发现班长的证书上有班主任的担保（班主任的公钥做了签名），班主任的证书上有校长的担保，而小谷是有校长的的公钥的，就印在学生证上。</p><p>终于，小谷收获了女神的芳心。</p><p>故事完了。故事中 小谷是浏览器，小美是服务器，小花和小王是坏蛋，班长是 CA 机构，班主任是上级 CA，校长是根 CA 服务器。当一个网站要使用 https 时先需在一些国际认证的 CA 机构填写网站信息申请证书，而这些 CA机构往往还有上层 CA，最终有一个根 CA。一般来说浏览器都会内置根 CA 和一些顶级 CA 的证书，但需要验证的时候会通过 CA 链逐级验证。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文是&lt;a href=&quot;https://book.douban.com/subject/25863515/&quot;&gt;《图解HTTP》&lt;/a&gt;的“摘要”版本，笔者更多关注得是和自身知识所融洽的部分，如果对更详细的内容感兴趣，可以移步实体书。&lt;/p&gt;
&lt;h2 id=&quot;一、TCP-IP通信传输流&quot;&gt;&lt;a href=&quot;#一、TCP-IP通信传输流&quot; class=&quot;headerlink&quot; title=&quot;一、TCP/IP通信传输流&quot;&gt;&lt;/a&gt;一、TCP/IP通信传输流&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/wj6Zhcp.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="聊聊系列" scheme="wangsiyuan233.github.io/tags/%E8%81%8A%E8%81%8A%E7%B3%BB%E5%88%97/"/>
    
      <category term="HTTP" scheme="wangsiyuan233.github.io/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>&lt;Algorithms&gt;-1.1基础编程模型</title>
    <link href="wangsiyuan233.github.io/2018/04/01/37Algorithms1-1/"/>
    <id>wangsiyuan233.github.io/2018/04/01/37Algorithms1-1/</id>
    <published>2018-04-01T10:46:25.538Z</published>
    <updated>2018-04-10T13:48:28.205Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://book.douban.com/subject/10432347/" target="_blank" rel="external">《算法 （第四版）》</a>梳理框架<br>不建议阅读，反正你也读不下去<br><a id="more"></a><br>1.1编程基础模型</p></blockquote><p>本书是基于Java编程语言来实现的算法，我们这么做的原因是：</p><ul><li>我们的程序时精确的、优雅的、且完整的描述了算法；</li><li>你运行程序时可以学习到准确的算法（知识）；</li><li>你可以让你的算法马上投入到应用中。<br>这些优点对于用英语来描述算法的工作来说，非常重要。<br>我们现在有一种趋势：那就是不得不使用特殊的编程语言，使得将算法从执行细节中剥离出来变得困难。我们利用现代语言和对算法的丰富的解释使得执行的难度降低。<br>我们只用了Java的一小部分子集，同时我们停止使用我们自定义的子集，你将几乎看不到Java的结构。我们提供的代码是完整的，我们希望你可以下载并运行它，用我们的或者你自己的测试数据都可以。<br>我们涉及到的编程的构建、软件库和操作系统常常是在我们的编程模型上执行的，在这一小节和1.2小节，我们将完整的介绍这个系统模型，我们配套齐全就是为了让你明白这个书里的任一代码。我们的模型提供了一种慢步调去介绍这些材料。<br>在参考书目中，我们完整的通过阐明程序模型的基本特征，来详尽的描绘了Java程序。当讨论语言特征时，我们通过这些代码进行举例。当涉及到P46那样的细节时，我们假设你是有现代变成的经验的，所以你是可以认出这些代码的许多特性的，页码注释将会帮助你解决一些问题。自从我们的代码有点程式化，我们致力于使用符合Java语句和结构的代码，这同样适用于经验丰富的Java码农阅读这些代码。（这不是废话吗）<br>【【【【图1.1.1】】】】<br><strong>1.1.1Java的基础结构</strong><br>Java的类既是静态的方法库，也是数据类型定义，为了创造这两者，我们用了一下5个部分，它们是以Java和其他编程语言为基础的：</li><li><em>原始数据类型</em> 精确的定义了整数、浮点数和布尔值这些计算机编程概念。它们的定义包括取值范围和能够对相应的值进行的操作，它们能被组合为类似数学公式的表达式。</li><li><em>语句</em> 通过创建变量和控制执行流来赋值，或者引发副作用来进行计算。我们会使用6种语句：声明、赋值、条件、循环、调用和返回。</li><li><em>数组</em> 同种类型的数值。</li><li><em>静态方法</em> 概括代码，使程序成为独立的模块</li><li><em>字符串</em> 是一系列characters，Java中的一些操作是基于它们的。</li><li><em>标准输入/输出</em> 是程序和外界的桥梁。</li><li><em>数据抽象</em> 让我们定义了非原始数据类型，支持面向对象编程。<br>在这一小节，我们依次介绍前五个，数据抽象是下一节的内容。<br>跑一个Java程序意味着和操作系统或编程环境的交互，为了清晰和简介，我们把这样的活动叫做 虚拟终端，虚拟终端就是我们键入命令行编程的地方，快试试那些好的程序吧！<br>例如，BinarySearch有两种静态方法<code>rank()</code>和<code>main()</code>,<code>rank()</code>有四种语句，两个声明，一个循环和一个返回；<code>main()</code>有三个语句，一个声明，一个调用和一个循环。<br>为了调用Java程序，我们首先要编译Java命令行，接着运行这些Java命令行。例如运行BinarySearch，我们首先要输入命令行 Javac BinarySearch.java，接着我们输入 java BinarySearch把控制权移交给这段字节码程序。为了理解这段程序，我们接下来考虑的是详细介绍Java的原始数据类型、数组、静态方法、字符串和标准IO。</li></ul><p><strong>1.1.2原始数据类型与表达式</strong><br>数据类型就是一组数据+对其的操作的集合。我们首先考虑下面4种基础的Java语言：</p><ul><li><em>整型</em> 及其运算符</li><li><em>浮点型</em> 及其运算符</li><li><em>布尔值</em> 的{true 和 false}及其逻辑运算</li><li><em>字符型</em> 它的值是你能输入的英文字母数字字符和符合<br>接下来我们看看怎么指定这些类型的值或者怎样对这些类型进行操作。<br>表达式：优先级很重要，运算里面乘除大于加减，逻辑里面 ! &gt; &amp;&amp; &gt; ||,圆括号可以改变优先级；<br>类型转换：int3.7就是3；double3是3.0；<br>比较：在条件和循环语句中非常重要；<br>其他原始类型：64字节long、16字节short、16字节char、8字节byte、32字节单精float；</li></ul><p><strong>1.1.3语句</strong><br>Java 的程序是由 声明、赋值来控制操作的执行流<br>声明：给变量命名标识符；<br>赋值：给变量一种数据类型，当然Java也有隐式赋值法<br>条件：根据条件不同，执行不同的语句<br>循环：在块里可以反复执行下去，除非你有一个“暂停键”；<br>返回：是一种改变执行方向的静态方法<br>一个程序是由一系列的语句组成的，当然程序也有嵌套结构，一个条件语句中也可以包含条件语句<br>1.1.3.1<br>声明语句：变量名+类型，声明要在变量使用之前出现，变量的作用域就是定义它的地方<br>1.1.3.2<br>赋值语句：变量+数据类型，等号左边单一变量，右边相应的表达式<br>1.1.3.3<br>条件语句：用不同的操作处理不同的输入，如果是true语句就会执行<br>1.1.3.4<br>循环语句：与if语句不同的是，while语句会不断的check布尔值是否为true，然后不停的执行<br>1.1.3.5<br>break 和 continue: while循环时使用；<br>break：是跳出当前的循环块或者程序块。<br>continues：停止运行剩余的循环主体，回到循环的开始处继续运行。</p><p><strong>1.1.4 简便记法 程序有很多写法</strong><br>1.1.4.1<br>声明并初始化<br>1.1.4.2<br>隐式赋值：i++<br>1.1.4.3<br>单语句代码段<br>1.1.4.4<br>for语句</p><p><strong>1.1.5 数组</strong><br>数组储存着一系列相同type的值，我们同样希望能取到这些值<br>1.1.5.1<br>创造并初始化一个数组<br>三个步骤：声明name和type;创建arry;初始化<br>name + datatype + length<br>1.1.5.2<br>简化写法<br>如果是从0开始，for loop 可以省略<br>1.1.5.3<br>使用数组<br>数组在创建时的大小时确定的<br>1.1.5.4<br>起外号<br>数组名表示的是整个数组，如果我们要把数组a赋予数组b，此时，a和b都会指向同一个数组<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//正确赋值数组</span></div><div class="line"><span class="keyword">double</span>[]b = <span class="keyword">new</span> <span class="keyword">double</span>[N]</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, i &lt; N, i++)</div><div class="line">b[i] = a[i]</div></pre></td></tr></table></figure></p><p>1.1.5.5<br>二维数组<br>二维数组就是一维数组的数组。<br>我们规定：M为行，N为列<br>数组型初始化为0，布尔型初始化为false<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//正确赋值数组</span></div><div class="line"><span class="keyword">double</span>[]a = <span class="keyword">new</span> <span class="keyword">double</span>[M][N];</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, i &lt; N, i++)</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>, j &lt; N, j++)</div><div class="line">a[i][j] = <span class="number">0.0</span>;</div></pre></td></tr></table></figure></p><p><strong>1.1.6 静态方法</strong><br>在别的语言中，总是把静态方法叫做函数，它们都是按照语句的顺序执行的<br>1.1.6.1<br>一个方法中需要参数，返回的数值也有参数决定<br>Java中每一个静态方法都是由 signature 和 body 组成的<br>1.1.6.2<br>调用静态方法<br>调用静态方法的方法，是写出方法名，并在后面的括号中列出参数值，用逗号分隔。<br>当调用是表达式的一部分时，方法的返回值将会，替代表达式中的方法调用。<br>1.1.6.3<br>方法的性质<br>-参数按值来传递 ：参数的值是由调用方提供的；改变参数的值对函数没有啥影响；值传递意味着数组参数是原数组的别名<br>-方法名可以被重载：一个函数需要参数，另一个函数可以提供参数<br>-方法只能有一个返回值，但可以包含多个语句<br>-方法可能产生副作用：void方法没有返回值，void函数有 side effct</p><p>1.1.6.4 递归<br>一个方法可以调用它自己，就是递归。<br>-递归有一个基本的方法就是第一行就是返回语句<br>-递归总是试图address更小的问题<br>-递归要解决的父类问题和它的子类之间不能有交集<br>遵循了以上三条法则，代码就会变得简洁高效</p><p>1.1.6.5 基础编程模型<br>一个静态方法库是由 public clss + name + 括号 组成的。<br>Java通过创造静态方法库去解决一些特殊的项目需求<br>Java + class name + 字符串 就能调用 mian()<br>字符串组成的数组作为参数执行到最后一句时，程序结束</p><p>1.1.6.6 模块化编程<br>最重要的是，静态方法库能使编程模块化<br>一个库中的静态方法可以调用另一个库中的静态方法<br>这样做的好处有：<br>-代码体积合理<br>-方便再次使用<br>-升级执行了也方便被取代<br>-缩小调试范围</p><p>1.1.6.7 单元测试<br>适当的单元测试对程序时重要的<br>简单来说，每个模块的main()方法都要保证代码运行正常<br>随着模块的成熟，我们精化main（）方法成为 开发用例 以告诉我们更多细节<br>或成为测试用例 以便更广阔的测试<br>用例太复杂时，我们就需要一个独立的模块</p><p>1.1.6.8 外部库<br>以下四种静态方法，来自不同的库，一些是由数据类型决定的。<br>-标准系统库 java.lang：Math常用于数学计算<br>-导入的系统库 java.util.Array: java中有很多类似的库<br>-其他库比如 rank()<br>-标准库 Std<br>如果要在一个方法中声明一个库，我们需要在方法前知道库的名字</p><p><strong>1.1.7 API</strong><br>模块化编程的一个重要组成部分就是记录方法的用法并提供文档给其他人参考<br>1.1.7.1 举例<br>这些方法将它们的参数 运用数学方法 转换为一个特殊的类型<br>这种拓展的性质恰巧是现代编程的特点之一<br>API的每一行都描述了一种方法，并且提供了使用该方法所需要使用的所有信息</p><p>1.1.7.2 Java库<br>网上有许多Java版本的库，我们节选了一小部分，足够说明问题了</p><p>1.1.7.3 标准库<br>我们开发了一些库用来实现一些实用的功能<br>这些库大多用与处理输入和输出<br>有些方法非常简单，为啥我们还要把它们写进一个库呢？<br>-让我们把重心放在测试和算法上，而不是随机数的计算上<br>-方法库需要大量的测试，其中就包含了极端和罕见的情况，如果我们自己手写就很麻烦<br>这些都是模块化编程的基石，当然有些夸大其词了<br>哈哈其实这些方法执行起来并不困难，它们中有些还代表了有趣的算法~</p><p>1.1.7.4 自己的库<br>有没有想过自己写一个库呢？以后想要调用的时候就随时调用哦<br>-编写用例，将计算分解为可控的部分<br>-明确方法库和与其对应的API<br>-实现API和一个能够对方法进行独立测试的mian()函数<br>。。。。结果很诱人。。。。这三条我看都看不懂<br>自己的库不仅方便调用，而且能让你更好的着手复杂的工作</p><p><strong>1.1.8 字符串</strong><br>字符串竟然不是Java的原始数据类型！<br>1.1.8.1 字符串拼接<br>字符串的拼接结果是：两个字符串变成一个 ———— “hi,” + “Bob” —&gt; “hi,Bob”<br>1.1.8.2 类型转换<br>字符串的两个主要用途：<br>1、用户输入的值转换为相应的数据类型<br>2、将数据类型转换为屏幕能显示的值<br>？？？？？？？？？？？？  这是啥 ？？？？？？<br>1.1.8.3 自动转换<br>我们几乎不使用 toString()方法，是因为Java提供了拼接的方法<br>使用 + 就可以把其他数据类型转换为 String 类型<br>或者 +’’ 拼接一个空字符串，也可以转换<br>1.1.8.4 命令行参数<br>Java中字符串的一个用处是接受命令行传递信息<br>当你输入 java + 库名 + 字符串<br>java会调用 main()方法，将【由字符串变成的数组】<br>作为参数，传递给main()函数</p><p><strong>1.1.9 输入和输出</strong><br>Java的输入、输出和绘图库是为了与外界交流<br>1、Java的输入值来源于命令行参数 或 标准输入流，输出值 在 标准输出流中<br>2、我们必然要思考Java和操作系统之间的连接<br>3、我们把应用程序提供的输入和显示的窗口叫 终端</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://book.douban.com/subject/10432347/&quot;&gt;《算法 （第四版）》&lt;/a&gt;梳理框架&lt;br&gt;不建议阅读，反正你也读不下去&lt;br&gt;
    
    </summary>
    
    
      <category term="算法" scheme="wangsiyuan233.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>初探ES6(1)--let</title>
    <link href="wangsiyuan233.github.io/2018/04/01/35%E5%88%9D%E6%8E%A2ES6-1/"/>
    <id>wangsiyuan233.github.io/2018/04/01/35初探ES6-1/</id>
    <published>2018-04-01T10:31:37.000Z</published>
    <updated>2018-04-03T06:46:21.831Z</updated>
    
    <content type="html"><![CDATA[<p>先从一块代码讲起<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> liList = <span class="built_in">document</span>.querySelectorAll(<span class="string">'li'</span>) <span class="comment">// 共5个li</span></div><div class="line"><span class="keyword">for</span>( <span class="keyword">var</span> i=<span class="number">0</span>; i&lt;liList.length; i++)&#123;</div><div class="line">  liList[i].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(i)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>我们知道会依次打印出5个5.<br>只是将 var 改成 let 之后<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> liList = <span class="built_in">document</span>.querySelectorAll(<span class="string">'li'</span>) <span class="comment">// 共5个li</span></div><div class="line"><span class="keyword">for</span>( <span class="keyword">let</span> i=<span class="number">0</span>; i&lt;liList.length; i++)&#123;</div><div class="line">  liList[i].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(i)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>我们知道会依次打印出 1 2 3 4 5.<br><strong>var 和 let 竟然还有不同？</strong><br><a id="more"></a><br>一个大胆的猜测：<br>1、for( let i = 0; i&lt; 5; i++) 这句话的圆括号之间，有一个隐藏的作用域<br>2、for( let i = 0; i&lt; 5; i++) { 循环体 } 在每次执行循环体之前，JS 引擎会把 i 在循环体的上下文中重新声明及初始化一次。<br>第二块代码近似近似近似于：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> liList = <span class="built_in">document</span>.querySelectorAll(<span class="string">'li'</span>) <span class="comment">// 共5个li</span></div><div class="line"><span class="keyword">for</span>( <span class="keyword">let</span> i=<span class="number">0</span>; i&lt;liList.length; i++)&#123;</div><div class="line">  <span class="keyword">let</span> i = 隐藏作用域中的i <span class="comment">// 看这里看这里看这里</span></div><div class="line">  liList[i].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(i)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><strong>一、var 声明的「创建、初始化和赋值」过程</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> x = <span class="number">1</span></div><div class="line">  <span class="keyword">var</span> y = <span class="number">2</span></div><div class="line">&#125;</div><div class="line">fn()</div></pre></td></tr></table></figure></p><p><strong>二、let 声明的「创建、初始化和赋值」过程</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="keyword">let</span> x = <span class="number">1</span></div><div class="line">  x = <span class="number">2</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><strong>三、function 声明的「创建、初始化和赋值」过程</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">fn2()</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn2</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="number">2</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><strong>四、const 声明的「创建、初始化和赋值」过程</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> x = <span class="number">1</span></div><div class="line">  <span class="keyword">var</span> y = <span class="number">2</span></div><div class="line">&#125;</div><div class="line">fn()</div></pre></td></tr></table></figure></p><blockquote><p>结论:</p></blockquote><p>var 的「创建」和「初始化」都被提升了。<br>let 的「创建」过程被提升了，但是「初始化」没有提升。<br>const 只有「创建」和「初始化」，没有「赋值」过程。<br>function 的「创建」「初始化」和「赋值」都被提升了。</p><p>所谓<strong>暂时死区</strong>（temp dead zone），就是不能在初始化之前，使用变量。</p><p>如果 let x 的<strong>初始化过程失败</strong>了，那么<br>1、x 变量就将永远处于 created 状态。<br>2、你无法再次对 x 进行初始化（初始化只有一次机会，而那次机会你失败了）。<br>3、由于 x 无法被初始化，所以 x 永远处在暂时死区（也就是盗梦空间里的 limbo）！<br>4、有人会觉得 JS 坑，怎么能出现这种情况；其实问题不大，因为此时代码已经报错了，后面的代码想执行也没机会。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;先从一块代码讲起&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; liList = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.querySelectorAll(&lt;span class=&quot;string&quot;&gt;&#39;li&#39;&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// 共5个li&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;( &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i&amp;lt;liList.length; i++)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  liList[i].onclick = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(i)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;我们知道会依次打印出5个5.&lt;br&gt;只是将 var 改成 let 之后&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; liList = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.querySelectorAll(&lt;span class=&quot;string&quot;&gt;&#39;li&#39;&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// 共5个li&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;( &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i&amp;lt;liList.length; i++)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  liList[i].onclick = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(i)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;我们知道会依次打印出 1 2 3 4 5.&lt;br&gt;&lt;strong&gt;var 和 let 竟然还有不同？&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="ES6" scheme="wangsiyuan233.github.io/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>深入理解JavaScript--异步系列(2)</title>
    <link href="wangsiyuan233.github.io/2018/03/30/36%E5%BC%82%E6%AD%A5%E7%B3%BB%E5%88%97-2/"/>
    <id>wangsiyuan233.github.io/2018/03/30/36异步系列-2/</id>
    <published>2018-03-30T08:21:36.830Z</published>
    <updated>2018-04-01T09:25:36.929Z</updated>
    
    <content type="html"><![CDATA[<p>这一小节主讲ajax，可以看我之前的<a href="http://wangsiyuan233.cn/2018/02/28/AJAX%EF%BC%88一%EF%BC%89/" target="_blank" rel="external">封装一个ajax</a><br><a id="more"></a><br>实在是不想写Promise。。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这一小节主讲ajax，可以看我之前的&lt;a href=&quot;http://wangsiyuan233.cn/2018/02/28/AJAX%EF%BC%88一%EF%BC%89/&quot;&gt;封装一个ajax&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="异步" scheme="wangsiyuan233.github.io/tags/%E5%BC%82%E6%AD%A5/"/>
    
  </entry>
  
  <entry>
    <title>深入理解JavaScript--异步系列(1)</title>
    <link href="wangsiyuan233.github.io/2018/03/30/34%E5%BC%82%E6%AD%A5%E7%B3%BB%E5%88%97-1/"/>
    <id>wangsiyuan233.github.io/2018/03/30/34异步系列-1/</id>
    <published>2018-03-30T08:20:34.000Z</published>
    <updated>2018-03-30T08:34:33.430Z</updated>
    
    <content type="html"><![CDATA[<h2 id="异步的实现原理"><a href="#异步的实现原理" class="headerlink" title="异步的实现原理"></a>异步的实现原理</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> ajax = $.ajax(&#123;</div><div class="line">    <span class="attr">url</span>: <span class="string">'/data/data1.json'</span>,</div><div class="line">    <span class="attr">success</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'success'</span>)</div><div class="line">    &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure><p>对于ajax这种传递过去不执行，等出来结果之后再执行的函数，叫做callback，即回调函数.<br>实现<strong>异步的最核心原理</strong>，就是将callback作为参数传递给异步执行函数，当有结果返回之后再触发 callback执行.<br><a id="more"></a><br>JavaScript语言的一大特点就是单线程，也就是说，同一个时间只能做一件事。</p><p>单线程就意味着，所有任务需要排队，前一个任务结束，才会执行后一个任务。如果前一个任务耗时很长，后一个任务就不得不一直等着。</p><p>JavaScript语言的设计者意识到，这时主线程完全可以不管IO设备，挂起处于等待中的任务，先运行排在后面的任务。等到IO设备返回了结果，再回过头，把挂起的任务继续执行下去。</p><p>于是，所有任务可以分成两种，一种是同步任务（synchronous），另一种是异步任务（asynchronous）。</p><p>一旦”执行栈”中的所有同步任务执行完毕，系统就会读取”任务队列”，看看里面有哪些事件。那些对应的异步任务，于是结束等待状态，进入执行栈，开始执行。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">setTimeout(<span class="built_in">console</span>.log, <span class="number">0</span>, <span class="string">'a'</span>)</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'b'</span>)</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'c'</span>)</div><div class="line"><span class="comment">// b c a</span></div></pre></td></tr></table></figure></p><p>第一步，执行第一行，此时会将这个操作暂时存储到其他地方，因为setTimeout是一个异步执行操作。<br>第二步，执行第二行，打印 b<br>第三步，执行第三行，打印 c<br>第四步，等待最后一行程序（一共三行）都全部执行完了，然后立马实时查看刚才暂存的异步操作有没有。如果有可执行的，就立即拿到出来继续执行。<br>第五步，执行完毕之后，再实时查看暂存位置中是否还有未执行的异步回调。</p><p><strong>事件绑定算不算异步？</strong></p><p>原来事件绑定和异步操作的实现机制是一样的，那么<strong>事件绑定算不算异步呢？</strong>（声明一下，这里说的事件绑定是如下代码的形式）<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$btn.on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'你点击了按钮'</span>)</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p><p><strong>一、共同之处：</strong><br>技术实现以及书写方法上是一样的，最终执行的方式也基本一样，都通过 evet-loop 执行。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$btn.on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'你点击了按钮'</span>)</div><div class="line">&#125;)</div><div class="line"></div><div class="line">fs.readFile(<span class="string">'data1.json'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</div><div class="line">    <span class="comment">// 获取数据</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure></p><p><strong>二、不同之处：</strong><br>第一，event-loop 执行时，调用的源不一样。异步操作是系统自动调用，无论是setTimeout时间到了还是$.ajax请求返回了，系统会自动调用。而事件绑定就需要用户手动触发<br>第二，从设计上来将，事件绑定有着明显的“订阅-发布”的设计模式，而异步操作却没有。<br>第三，事件绑定在 js 中扮演着非常重要的角色，各个地方都会用到事件绑定的形式。例如 web 页面监控鼠标、键盘，以及 nodejs 中的 EventEmitter 应用非常广泛（特别是涉及到数据流时）。而事件绑定被应用到非常广泛，却没有发生像异步操作带来的程序逻辑问题。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;异步的实现原理&quot;&gt;&lt;a href=&quot;#异步的实现原理&quot; class=&quot;headerlink&quot; title=&quot;异步的实现原理&quot;&gt;&lt;/a&gt;异步的实现原理&lt;/h2&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; ajax = $.ajax(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;url&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;/data/data1.json&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;success&lt;/span&gt;: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;success&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;对于ajax这种传递过去不执行，等出来结果之后再执行的函数，叫做callback，即回调函数.&lt;br&gt;实现&lt;strong&gt;异步的最核心原理&lt;/strong&gt;，就是将callback作为参数传递给异步执行函数，当有结果返回之后再触发 callback执行.&lt;br&gt;
    
    </summary>
    
    
      <category term="异步" scheme="wangsiyuan233.github.io/tags/%E5%BC%82%E6%AD%A5/"/>
    
  </entry>
  
  <entry>
    <title>CSS布局方案之flex+float</title>
    <link href="wangsiyuan233.github.io/2018/03/29/33CSS%E5%B8%83%E5%B1%80%E6%96%B9%E6%A1%88%E4%B9%8Bflex-float/"/>
    <id>wangsiyuan233.github.io/2018/03/29/33CSS布局方案之flex-float/</id>
    <published>2018-03-29T08:59:39.000Z</published>
    <updated>2018-04-06T12:36:48.454Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://js.jirengu.com/cinigoriva/1/edit?html,css,output" target="_blank" rel="external">【【【&lt;&lt;&lt;我是flex的总结 我超轻便&gt;&gt;&gt;】】】</a><br><a href="http://js.jirengu.com/pezobuyoki/1/edit?html,css,output" target="_blank" rel="external">【【【&lt;&lt;&lt;我是float的总结 我覆盖全&gt;&gt;&gt;】】】</a></p><blockquote><p>一、居中布局</p></blockquote><p><strong>1、水平居中</strong><a href="http://js.jirengu.com/sobosuvuxa/1/edit?html,css,output" target="_blank" rel="external">【5个示例 &gt;&gt;&gt;】</a><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child"</span>&gt;</span> wangsiyuan wangsiyuan <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p><a id="more"></a><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.child</span>&#123; <span class="comment">/*1.1 */</span></div><div class="line">    <span class="attribute">display</span>: inline-block;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.parent</span>&#123;</div><div class="line">    <span class="attribute">text-align</span>: center;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="selector-class">.child</span> &#123; <span class="comment">/*1.2 */</span></div><div class="line">    <span class="attribute">display</span>: table;</div><div class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="selector-class">.parent</span> &#123;<span class="comment">/*1.3*/</span></div><div class="line">    <span class="attribute">position</span>: relative;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.child</span> &#123;</div><div class="line">    <span class="attribute">position</span>: absolute;</div><div class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</div><div class="line">    <span class="attribute">transform</span>: <span class="built_in">translateX</span>(-50%);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="selector-class">.parent</span> &#123; <span class="comment">/*1.4*/</span></div><div class="line">    <span class="attribute">display</span>: flex;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.child</span> &#123;</div><div class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="selector-class">.parent</span> &#123; <span class="comment">/*1.5*/</span></div><div class="line">    <span class="attribute">display</span>: flex;</div><div class="line">    <span class="attribute">justify-content</span>: center;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>2、垂直居中</strong><a href="http://js.jirengu.com/lucebucusi/1/edit?html,css,output" target="_blank" rel="external">【3个示例 &gt;&gt;&gt;】</a><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child"</span>&gt;</span> wangsiyuan wangsiyuan <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.parent</span> &#123; <span class="comment">/*2.1*/</span></div><div class="line">    <span class="attribute">display</span>: table-cell;</div><div class="line">    <span class="attribute">vertical-align</span>: middle;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="selector-class">.parent</span> &#123; <span class="comment">/*2.2*/</span></div><div class="line">    <span class="attribute">position</span>: relative;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.child</span> &#123;</div><div class="line">    <span class="attribute">position</span>: absolute;</div><div class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</div><div class="line">    <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-50%);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="selector-class">.parent</span> &#123; <span class="comment">/*2.3*/</span></div><div class="line">    <span class="attribute">position</span>: flex;</div><div class="line">    <span class="attribute">align-items</span>: center;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>3、水平+垂直</strong><a href="http://js.jirengu.com/yiretexine/1/edit?html,css,output" target="_blank" rel="external">【3个示例 &gt;&gt;&gt;】</a><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child"</span>&gt;</span> wangsiyuan wangsiyuan <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.parent</span> &#123; <span class="comment">/*3.1*/</span></div><div class="line">    <span class="attribute">position</span>: relative;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.child</span> &#123;</div><div class="line">    <span class="attribute">position</span>:absolute;</div><div class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</div><div class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</div><div class="line">    <span class="attribute">transform</span>: <span class="built_in">tranplate</span>(-50%,-50%);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="selector-class">.parent</span> &#123;  <span class="comment">/*3.2*/</span></div><div class="line">    <span class="attribute">text-align</span>: center;</div><div class="line">    <span class="attribute">display</span>: table-cell;</div><div class="line">    <span class="attribute">vertical-align</span>: middle;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.child</span> &#123;</div><div class="line">    <span class="attribute">display</span>: inline-block;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="selector-class">.parent</span> &#123;  <span class="comment">/*3.3*/</span></div><div class="line">    <span class="attribute">display</span>: flex;</div><div class="line">    <span class="attribute">justify-content</span>: center;</div><div class="line">    <span class="attribute">align-items</span>: center;</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>二、多列布局</p></blockquote><p><strong>1、1定宽+1自适应</strong><a href="http://js.jirengu.com/xanorajiri/1/edit?html,css,output" target="_blank" rel="external">【4个示例 &gt;&gt;&gt;】</a><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 方法一 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>left<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>right<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>right<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.left</span> &#123; <span class="comment">/* 方法一 1.1 */</span></div><div class="line">    <span class="attribute">float</span>: left;</div><div class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">    <span class="attribute">margin-right</span>: <span class="number">20px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.right</span> &#123;</div><div class="line">    <span class="attribute">overflow</span>: hidden;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="selector-class">.left</span> &#123; <span class="comment">/*1.2*/</span></div><div class="line">    <span class="attribute">float</span>: left;</div><div class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.right</span> &#123;</div><div class="line">    <span class="attribute">margin-left</span>: <span class="number">120px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="selector-class">.parent</span> &#123; <span class="comment">/*1.3*/</span></div><div class="line">    <span class="attribute">display</span>: table;</div><div class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">    <span class="attribute">table-layout</span>: fixed;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.left</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">    <span class="attribute">padding-right</span>: <span class="number">20px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.right</span>,<span class="selector-class">.left</span> &#123;</div><div class="line">    <span class="attribute">display</span>: table-cell;    </div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="selector-class">.parent</span> &#123; <span class="comment">/*1.4*/</span></div><div class="line">    <span class="attribute">display</span>: flex;</div><div class="line">&#125; </div><div class="line"><span class="selector-class">.left</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">    <span class="attribute">margin-right</span>: <span class="number">20px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.right</span> &#123;</div><div class="line">    <span class="attribute">flex</span>: <span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><a href="http://js.jirengu.com/yakumuqawu/1/edit?html,css,output" target="_blank" rel="external">【第5个示例 &gt;&gt;&gt;】</a><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 方法二 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>left<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"rigth-fix"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>right<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>right<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.left</span> &#123; <span class="comment">/* 方法二 */</span></div><div class="line">    <span class="attribute">float</span>: left;</div><div class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">    <span class="attribute">position</span>: relative;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.right-fix</span> &#123;</div><div class="line">    <span class="attribute">float</span>: right;</div><div class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">    <span class="attribute">margin-left</span>: -<span class="number">100px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.right</span> &#123;</div><div class="line">    <span class="attribute">margin-left</span>: <span class="number">120px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>2、2定宽+1自适应</strong><a href="http://js.jirengu.com/vubulurosa/1/edit?html,css,output" target="_blank" rel="external">【1个示例 &gt;&gt;&gt;】</a><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>left<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"center"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>center<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>right<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>right<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.left</span>,<span class="selector-class">.center</span> &#123;</div><div class="line">    <span class="attribute">float</span>: left;</div><div class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">    <span class="attribute">margin-right</span>: <span class="number">20px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.right</span> &#123;</div><div class="line">    <span class="attribute">overflow</span>: hidden;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>3、1不定宽 + 1自适应</strong><a href="http://js.jirengu.com/fenexahuxi/1/edit?html,css,output" target="_blank" rel="external">【3个示例 &gt;&gt;&gt;】</a><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>left<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>right<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>right<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.left</span>&#123;<span class="comment">/*3.1*/</span></div><div class="line">        <span class="attribute">float</span>: left;</div><div class="line">        <span class="attribute">margin-right</span>: <span class="number">20px</span>;</div><div class="line">    &#125;</div><div class="line"><span class="selector-class">.right</span>&#123;</div><div class="line">    <span class="attribute">overflow</span>: hidden;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.left</span> <span class="selector-tag">p</span>&#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="selector-class">.parent</span>&#123; <span class="comment">/*3.2*/</span></div><div class="line">    <span class="attribute">display</span>: table; <span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">    &#125;</div><div class="line"><span class="selector-class">.left</span>,<span class="selector-class">.right</span>&#123;</div><div class="line">    <span class="attribute">display</span>: table-cell;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.left</span>&#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">0.1%</span>;</div><div class="line">    <span class="attribute">padding-right</span>: <span class="number">20px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.left</span> <span class="selector-tag">p</span>&#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="selector-class">.parent</span> &#123; <span class="comment">/*3.3*/</span></div><div class="line">    <span class="attribute">display</span>: flex;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.left</span> &#123;</div><div class="line">    <span class="attribute">margin-right</span>: <span class="number">20px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.right</span> &#123;</div><div class="line">    <span class="attribute">flex</span>: <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.left</span> <span class="selector-tag">p</span>&#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>4、2不定宽+1自适应</strong><a href="http://js.jirengu.com/gexaqoqasu/1/edit?html,css,output" target="_blank" rel="external">【1个示例 &gt;&gt;&gt;】</a><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>left<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"center"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>center<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>right<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>right<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.left</span>,<span class="selector-class">.center</span>&#123;</div><div class="line">    <span class="attribute">float</span>: left;</div><div class="line">    <span class="attribute">margin-right</span>: <span class="number">20px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.right</span>&#123;</div><div class="line">    <span class="attribute">overflow</span>: hidden;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.left</span> <span class="selector-tag">p</span>,<span class="selector-class">.center</span> <span class="selector-tag">p</span>&#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>5、1定宽+1自适应+高度一样</strong><a href="http://js.jirengu.com/tecemeboqu/2/edit?html,css,output" target="_blank" rel="external">【4个示例 &gt;&gt;&gt;】</a><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 方法一 float --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>left<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>right<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>right<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">p</span>&#123; <span class="comment">/* 方法一 */</span></div><div class="line">    <span class="attribute">background</span>: none<span class="meta">!important</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.left</span>,<span class="selector-class">.right</span>&#123;</div><div class="line">    <span class="attribute">background</span>: <span class="number">#444</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.parent</span>&#123;</div><div class="line">    <span class="attribute">overflow</span>: hidden;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.left</span>,<span class="selector-class">.right</span>&#123;</div><div class="line">    <span class="attribute">padding-bottom</span>: <span class="number">9999px</span>;</div><div class="line">    <span class="attribute">margin-bottom</span>: -<span class="number">9999px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.left</span>&#123;</div><div class="line">    <span class="attribute">float</span>: left; </div><div class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">    <span class="attribute">margin-right</span>: <span class="number">20px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.right</span>&#123;</div><div class="line">    <span class="attribute">overflow</span>: hidden;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 方法二 table --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>left<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>right<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>right<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.parent</span> &#123; <span class="comment">/*方法二*/</span></div><div class="line">    <span class="attribute">display</span>:table;</div><div class="line">    <span class="attribute">width</span>:<span class="number">100%</span>;</div><div class="line">    <span class="attribute">table-layout</span>:fixed;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.left</span> &#123;</div><div class="line">    <span class="attribute">width</span>:<span class="number">100px</span>;</div><div class="line">    <span class="attribute">padding-right</span>:<span class="number">20px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.right</span>,<span class="selector-class">.left</span> &#123;</div><div class="line">    <span class="attribute">display</span>:table-cell;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 方法三 flex --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>left<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>right<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>right<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.parent</span> &#123; <span class="comment">/*方法三*/</span></div><div class="line">    <span class="attribute">display</span>: flex;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.left</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">    <span class="attribute">margin-right</span>: <span class="number">20px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.right</span> &#123;</div><div class="line">    <span class="attribute">flex</span>: <span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 方法四 display --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>right <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.parent</span> &#123; <span class="comment">/*方法四*/</span></div><div class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">    <span class="attribute">display</span>: -webkit-box;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.left</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">    <span class="attribute">margin-right</span>: <span class="number">20px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.right</span> &#123;</div><div class="line">    <span class="attribute">-webkit-box-flex</span>: <span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>6、等分</strong><a href="http://js.jirengu.com/yisusonehe/1/edit?html,css,output" target="_blank" rel="external">【3个示例 &gt;&gt;&gt;】</a><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 方法一  --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>1<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>2<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>3<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>4<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.parent</span>&#123; <span class="comment">/* 方法一 */</span></div><div class="line">    <span class="attribute">margin-left</span>: -<span class="number">20px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.column</span>&#123;</div><div class="line">    <span class="attribute">float</span>: left;</div><div class="line">    <span class="attribute">width</span>: <span class="number">25%</span>;</div><div class="line">    <span class="attribute">padding-left</span>: <span class="number">20px</span>;</div><div class="line">    <span class="attribute">box-sizing</span>: border-box;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 方法二  --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent-fix"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>1<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>2<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>3<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>4<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.parent-fix</span>&#123; <span class="comment">/*方法二*/</span></div><div class="line">    <span class="attribute">margin-left</span>: -<span class="number">20px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.parent</span>&#123;</div><div class="line">    <span class="attribute">display</span>: table;</div><div class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">    <span class="attribute">table-layout</span>: fixed;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.column</span>&#123;</div><div class="line">    <span class="attribute">display</span>: table-cell;</div><div class="line">    <span class="attribute">padding-left</span>: <span class="number">20px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 方法三flex  --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>1<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>2<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>3<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>4<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.parent</span>&#123; <span class="comment">/*方法三*/</span></div><div class="line">    <span class="attribute">display</span>: flex;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.column</span>&#123;</div><div class="line">    <span class="attribute">flex</span>: <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.column</span>+<span class="selector-class">.column</span>&#123;</div><div class="line">    <span class="attribute">margin-left</span>: <span class="number">20px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>三、全屏布局</p></blockquote><p><strong>定宽 + 定高 + 内容自适应</strong><br><a href="http://js.jirengu.com/vilerawove/1/edit?html,css,output" target="_blank" rel="external">【position示例 &gt;&gt;&gt;】</a><br><img src="https://i.imgur.com/oehNFHw.png" alt=""><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 方法一 position  --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"top"</span>&gt;</span>top<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inner"</span>&gt;</span>right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bottom"</span>&gt;</span>bottom<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">html</span>,<span class="selector-tag">body</span>,<span class="selector-class">.parent</span>&#123; <span class="comment">/* 方法一*/</span></div><div class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</div><div class="line">    <span class="attribute">overflow</span>: hidden;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">body</span>&#123;</div><div class="line">    <span class="attribute">color</span>: white;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.top</span>&#123;</div><div class="line">    <span class="attribute">position</span>: absolute;</div><div class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">    <span class="attribute">background</span>: blue;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.left</span>&#123;</div><div class="line">    <span class="attribute">position</span>:absolute;</div><div class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">top</span>: <span class="number">100px</span>;</div><div class="line">    <span class="attribute">bottom</span>: <span class="number">50px</span>;</div><div class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">    <span class="attribute">background</span>: red;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.right</span>&#123;</div><div class="line">    <span class="attribute">position</span>:absolute;</div><div class="line">    <span class="attribute">left</span>: <span class="number">200px</span>;</div><div class="line">    <span class="attribute">top</span>: <span class="number">100px</span>;</div><div class="line">    <span class="attribute">bottom</span>: <span class="number">50px</span>;</div><div class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">background</span>: pink;</div><div class="line">    <span class="attribute">overflow</span>: auto;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.right</span> <span class="selector-class">.inner</span>&#123;</div><div class="line">    <span class="attribute">min-height</span>: <span class="number">1000px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.bottom</span>&#123;</div><div class="line">    <span class="attribute">position</span>: absolute;</div><div class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</div></pre></td></tr></table></figure><p><a href="http://js.jirengu.com/gusixilake/1/edit?html,css,output" target="_blank" rel="external">【flex示例 &gt;&gt;&gt;】</a><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 方法二 flex  --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"top"</span>&gt;</span>top<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"middle"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inner"</span>&gt;</span>right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bottom"</span>&gt;</span>bottom<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">html</span>,<span class="selector-tag">body</span>,<span class="selector-class">.parent</span>&#123; <span class="comment">/* 方法二 */</span></div><div class="line">    <span class="attribute">margin</span>:<span class="number">0</span>;</div><div class="line">    <span class="attribute">height</span>:<span class="number">100%</span>;</div><div class="line">    <span class="attribute">overflow</span>:hidden;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">body</span>&#123;</div><div class="line">    <span class="attribute">color</span>: white;</div><div class="line">&#125; </div><div class="line"><span class="selector-class">.parent</span>&#123;</div><div class="line">    <span class="attribute">display</span>: flex;</div><div class="line">    <span class="attribute">flex-direction</span>: column;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.top</span>&#123;</div><div class="line">    <span class="attribute">height</span>:<span class="number">100px</span>;</div><div class="line">    <span class="attribute">background</span>: blue;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.bottom</span>&#123;</div><div class="line">    <span class="attribute">height</span>:<span class="number">50px</span>;</div><div class="line">    <span class="attribute">background</span>: black;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.middle</span>&#123;</div><div class="line">    <span class="attribute">flex</span>:<span class="number">1</span>;</div><div class="line">    <span class="attribute">display</span>:flex;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.left</span>&#123;</div><div class="line">    <span class="attribute">width</span>:<span class="number">200px</span>;</div><div class="line">    <span class="attribute">background</span>: red;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.right</span>&#123;</div><div class="line">    <span class="attribute">flex</span>: <span class="number">1</span>;</div><div class="line">    <span class="attribute">overflow</span>: auto;</div><div class="line">    <span class="attribute">background</span>:pink;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.right</span> <span class="selector-class">.inner</span>&#123;</div><div class="line">    <span class="attribute">min-height</span>: <span class="number">1000px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>全部自适应</strong><a href="http://js.jirengu.com/ribavuziha/1/edit?html,css,output" target="_blank" rel="external">【示例 &gt;&gt;&gt;】</a><br><img src="https://i.imgur.com/5Iv4aMK.png" alt=""><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"top"</span>&gt;</span>top<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"middle"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inner"</span>&gt;</span>right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bottom"</span>&gt;</span>bottom<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">html</span>,<span class="selector-tag">body</span>,<span class="selector-class">.parent</span>&#123;</div><div class="line">    <span class="attribute">margin</span>:<span class="number">0</span>;</div><div class="line">    <span class="attribute">height</span>:<span class="number">100%</span>;</div><div class="line">    <span class="attribute">overflow</span>:hidden;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">body</span>&#123;</div><div class="line">    <span class="attribute">color</span>:white;</div><div class="line">&#125; </div><div class="line"><span class="selector-class">.parent</span>&#123;</div><div class="line">    <span class="attribute">display</span>:flex;</div><div class="line">    <span class="attribute">flex-direction</span>:column;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.top</span>&#123;</div><div class="line">    <span class="attribute">background</span>:blue;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.bottom</span>&#123;</div><div class="line">    <span class="attribute">background</span>:black;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.middle</span>&#123;</div><div class="line">    <span class="attribute">flex</span>:<span class="number">1</span>;</div><div class="line">    <span class="attribute">display</span>:flex;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.left</span>&#123;</div><div class="line">    <span class="attribute">background</span>: red;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.right</span>&#123;</div><div class="line">    <span class="attribute">flex</span>:<span class="number">1</span>;</div><div class="line">    <span class="attribute">overflow</span>:auto;</div><div class="line">    <span class="attribute">background</span>: pink;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.right</span> <span class="selector-class">.inner</span>&#123;</div><div class="line">    <span class="attribute">min-height</span>:<span class="number">1000px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://js.jirengu.com/cinigoriva/1/edit?html,css,output&quot;&gt;【【【&amp;lt;&amp;lt;&amp;lt;我是flex的总结 我超轻便&amp;gt;&amp;gt;&amp;gt;】】】&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://js.jirengu.com/pezobuyoki/1/edit?html,css,output&quot;&gt;【【【&amp;lt;&amp;lt;&amp;lt;我是float的总结 我覆盖全&amp;gt;&amp;gt;&amp;gt;】】】&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一、居中布局&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;1、水平居中&lt;/strong&gt;&lt;a href=&quot;http://js.jirengu.com/sobosuvuxa/1/edit?html,css,output&quot;&gt;【5个示例 &amp;gt;&amp;gt;&amp;gt;】&lt;/a&gt;&lt;br&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;parent&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;child&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt; wangsiyuan wangsiyuan &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="CSS" scheme="wangsiyuan233.github.io/tags/CSS/"/>
    
      <category term="进阶" scheme="wangsiyuan233.github.io/tags/%E8%BF%9B%E9%98%B6/"/>
    
  </entry>
  
  <entry>
    <title>函数知多少</title>
    <link href="wangsiyuan233.github.io/2018/03/28/32%E5%87%BD%E6%95%B0%E7%9F%A5%E5%A4%9A%E5%B0%91/"/>
    <id>wangsiyuan233.github.io/2018/03/28/32函数知多少/</id>
    <published>2018-03-28T11:35:06.000Z</published>
    <updated>2018-03-29T02:41:19.671Z</updated>
    
    <content type="html"><![CDATA[<p><strong>一、定义</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//1、匿名函数</span></div><div class="line"><span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;<span class="keyword">return</span> <span class="number">3</span>&#125; <span class="comment">//浏览器会直接报错</span></div><div class="line"><span class="keyword">var</span> f1 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;&#125; <span class="comment">//将匿名函数存在f1这个地址</span></div><div class="line">f1.name <span class="comment">//f1   虽然是匿名函数，但是它有name</span></div></pre></td></tr></table></figure></p><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//2、具名函数</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> <span class="number">1</span>&#125; <span class="comment">//作用域是全局作用域，f1是变量</span></div><div class="line"><span class="keyword">var</span> f2 = <span class="function"><span class="keyword">function</span> <span class="title">f3</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> <span class="number">2</span>&#125; <span class="comment">// 作用域在f3函数体内</span></div></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//3、箭头函数</span></div><div class="line"><span class="keyword">var</span> f4 = <span class="function">(<span class="params">i,j</span>) =&gt;</span> &#123;<span class="built_in">console</span>.log(<span class="number">1</span>); <span class="keyword">return</span> i * j&#125;</div><div class="line"><span class="comment">//本质上和上两种没有区别，this的值却是内外相同</span></div></pre></td></tr></table></figure><p><strong>二、<a href="wangsiyuan233.cn/2018/03/26/闭包系列-2/">执行上下文环境</a></strong><br><strong>三、call stack</strong><br>一种先进后出的模式<br>JS是单线程，遇到函数就会暗暗的做下标记再进去，a_&gt;b-&gt;c,从c退出了在进入b,最后才退出a<br>1、<a href="http://latentflip.com/loupe/?code=ZnVuY3Rpb24gYSgpewogICAgY29uc29sZS5sb2coJ2EnKQogIHJldHVybiAnYScgIAp9CgpmdW5jdGlvbiBiKCl7CiAgICBjb25zb2xlLmxvZygnYicpCiAgICByZXR1cm4gJ2InCn0KCmZ1bmN0aW9uIGMoKXsKICAgIGNvbnNvbGUubG9nKCdjJykKICAgIHJldHVybiAnYycKfQoKYSgpCmIoKQpjKCk%3D!!!" target="_blank" rel="external">普通调用</a><br>2、<a href="http://latentflip.com/loupe/?code=ZnVuY3Rpb24gYSgpewogICAgY29uc29sZS5sb2coJ2ExJykKICAgIGIoKQogICAgY29uc29sZS5sb2coJ2EyJykKICByZXR1cm4gJ2EnICAKfQpmdW5jdGlvbiBiKCl7CiAgICBjb25zb2xlLmxvZygnYjEnKQogICAgYygpCiAgICBjb25zb2xlLmxvZygnYjInKQogICAgcmV0dXJuICdiJwp9CmZ1bmN0aW9uIGMoKXsKICAgIGNvbnNvbGUubG9nKCdjJykKICAgIHJldHVybiAnYycKfQphKCkKY29uc29sZS5sb2coJ2VuZCcp!!!" target="_blank" rel="external">嵌套调用</a><br>3、<a href="http://latentflip.com/loupe/?code=ZnVuY3Rpb24gZmFiKG4pewogICAgY29uc29sZS5sb2coJ3N0YXJ0IGNhbGMgZmFiICcrIG4pCiAgICBpZihuPj0zKXsKICAgICAgICByZXR1cm4gZmFiKG4tMSkgKyBmYWIobi0yKQogICAgfWVsc2V7CiAgICAgICAgcmV0dXJuIDEKICAgIH0KfQoKZmFiKDUp!!!PGJ1dHRvbj5DbGljayBtZSE8L2J1dHRvbj4%3D" target="_blank" rel="external">递归</a><br><strong>四、this,arguments,apply,bind</strong><br>进入一个函数的时候，不仅记录地址，还记录这个函数的传参<br>this必须是对象，this是函数和对象的羁绊<br>fn.call(undefined,arguments)可以确定arguments的个数<br>this会被填充为小window，arguments默认是空数组<br>fn.apply(undefined,arguments)不能确定arguments的个数<br>call 和 apply 是直接调用函数，而 bind 则是返回一个新函数（并没有调用原来的函数），这个新函数会 call 原来的函数，call 的参数由你指定。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;一、定义&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//1、匿名函数&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&amp;#125; &lt;span class=&quot;comment&quot;&gt;//浏览器会直接报错&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; f1 = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&amp;#125; &lt;span class=&quot;comment&quot;&gt;//将匿名函数存在f1这个地址&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;f1.name &lt;span class=&quot;comment&quot;&gt;//f1   虽然是匿名函数，但是它有name&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="wangsiyuan233.github.io/tags/javascript/"/>
    
      <category term="进阶" scheme="wangsiyuan233.github.io/tags/%E8%BF%9B%E9%98%B6/"/>
    
  </entry>
  
  <entry>
    <title>深入理解JavaScript--闭包系列(4)</title>
    <link href="wangsiyuan233.github.io/2018/03/27/31%E9%97%AD%E5%8C%85%E7%B3%BB%E5%88%97-4/"/>
    <id>wangsiyuan233.github.io/2018/03/27/31闭包系列-4/</id>
    <published>2018-03-27T11:59:31.929Z</published>
    <updated>2018-03-28T01:04:06.070Z</updated>
    
    <content type="html"><![CDATA[<p>终于讲到了正题，也是我们的最后一部分了！<br>大家打起精神耶耶耶！~<br>（图书馆关门之前我一定要整理完）</p><p>如果你看到这里还对闭包的知识有任何的疑问<br>请跟我默念这两种应用场景：<strong>函数作为返回值，函数作为参数传递</strong><br><a id="more"></a><br>1、<strong>【函数作为返回值】</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</div><div class="line"><span class="keyword">var</span> max = <span class="number">10</span>;</div><div class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params">x</span>)</span>&#123;</div><div class="line"><span class="keyword">if</span> ( x &gt; max) &#123;<span class="built_in">console</span>.log(x);&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> f1 = fn;</div><div class="line">f1(<span class="number">15</span>); <span class="comment">// 15</span></div></pre></td></tr></table></figure></p><p>2、<strong>【函数作为参数传递】</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> max = <span class="number">10</span>;</div><div class="line">fn = <span class="function"><span class="keyword">function</span> (<span class="params">x</span>)</span>&#123;</div><div class="line"><span class="keyword">if</span> ( x &gt; max) &#123;<span class="built_in">console</span>.log(x);&#125;</div><div class="line">&#125;</div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">f1</span>)</span>&#123;<span class="keyword">var</span> max = <span class="number">100</span>; f1(<span class="number">15</span>)&#125; )(fn); <span class="comment">// 15</span></div></pre></td></tr></table></figure></p><hr><p>在<a href="http://wangsiyuan233.cn/2018/03/26/闭包系列-1/" target="_blank" rel="external">闭包系列1</a>中我们提到当一个函数被调用完成之后，其执行上下文环境将被销毁，其中的变量也会被同时销毁。<br>但是在当时那篇文章中留了一个问号——有些情况下，函数调用完成之后，其执行上下文环境不会接着被销毁。这就是<strong>【闭包】</strong><br>（还是被赶出来了…）<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</div><div class="line"><span class="keyword">var</span> max = <span class="number">10</span>;</div><div class="line"></div><div class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params">x</span>)</span>&#123;</div><div class="line"><span class="keyword">if</span> ( x &gt; max) &#123;<span class="built_in">console</span>.log(x);&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> f2 = fn();</div><div class="line">max = <span class="number">100</span>;</div><div class="line">f2(<span class="number">15</span>);</div></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/ApNdBSw.png" alt=""><br>第一步：全局上下文环境时，max为undefined;<br>第二步：执行到第9行 <code>var f2 = fn()</code>，产生fn()执行上下文环境；<br>第三步：按理说第9行执行完了，fn()的执行上下文环境应该被销毁，【但是】，重点来了：因为执行fn()时，返回的是一个函数。函数的特别之处在于可以创建一个独立的作用域。而正巧合的是，返回的这个函数体中，还有一个自由变量max要引用fn作用域下的fn()上下文环境中的max;<br>因此，这个max不能被销毁，销毁了之后f1函数中的max就找不到值了;<br>因此，这里的fn()上下文环境不能被销毁，还依然存在与执行上下文栈中;<br>因此，执行到第10行时，全局上下文环境将变为活动状态，但是fn()上下文环境依然会在执行上下文栈中。另外，执行完第10行，全局上下文环境中的max被赋值为100。<br>第四步：第11行，执行f2(15)，即执行f1(15)，创建f1(15)上下文环境;<br>执行f1(15)时，max是自由变量，需要向创建f1函数的作用域中查找，找到了max的值为10;<br>这里的重点就在于，创建f1函数是在执行fn()时创建的。fn()早就执行结束了，但是fn()执行上下文环境还存在与栈中，因此f1(15)时，max可以查找到。如果fn()上下文环境销毁了，那么max就找不到了。<br>使用闭包会消耗更多的内存哦！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;终于讲到了正题，也是我们的最后一部分了！&lt;br&gt;大家打起精神耶耶耶！~&lt;br&gt;（图书馆关门之前我一定要整理完）&lt;/p&gt;
&lt;p&gt;如果你看到这里还对闭包的知识有任何的疑问&lt;br&gt;请跟我默念这两种应用场景：&lt;strong&gt;函数作为返回值，函数作为参数传递&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="闭包" scheme="wangsiyuan233.github.io/tags/%E9%97%AD%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>深入理解JavaScript--闭包系列(3)</title>
    <link href="wangsiyuan233.github.io/2018/03/27/30%E9%97%AD%E5%8C%85%E7%B3%BB%E5%88%97-3/"/>
    <id>wangsiyuan233.github.io/2018/03/27/30闭包系列-3/</id>
    <published>2018-03-27T11:58:53.000Z</published>
    <updated>2018-03-27T12:23:40.529Z</updated>
    
    <content type="html"><![CDATA[<p>首先定义一下<strong>自由变量</strong>：如下图这个函数，x就不是f1里定义的变量，它就是个自由变量。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> x = <span class="number">23</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;</div><div class="line"><span class="keyword">var</span> b = <span class="number">34</span>;</div><div class="line"><span class="built_in">console</span>.log(x + b)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><a id="more"></a><p>所以自由变量就是在当前函数的父级作用域里面找吗？<br>当然不是的。<br>1、可能它的作用域链上根本就没有这个函数，最后就是undefined<br>2、最重要的是从【创造】这个函数的作用域里寻找，而不是【调用】。<br>如下图：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> x= <span class="number">76</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;</div><div class="line"><span class="built_in">console</span>.log(x);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params">f2</span>)</span>&#123;</div><div class="line"><span class="keyword">var</span> x = <span class="number">32</span>;</div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;f2();&#125;)(); </div><div class="line">&#125;</div><div class="line">show(f1) <span class="comment">//76</span></div></pre></td></tr></table></figure></p><p>引出<strong>作用域链</strong>的概念，一层一层的往外找：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="number">34</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;</div><div class="line"><span class="keyword">var</span> b = <span class="number">21</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>)</span>&#123;</div><div class="line"><span class="built_in">console</span>.log(a + b)</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> f2;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> x = f1();</div><div class="line">b = <span class="number">248</span>；</div><div class="line">x();</div></pre></td></tr></table></figure></p><p>第7行时，f1()返回的是f2，将f2赋值给x,第9行x()相当于console.log（a + b）</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首先定义一下&lt;strong&gt;自由变量&lt;/strong&gt;：如下图这个函数，x就不是f1里定义的变量，它就是个自由变量。&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; x = &lt;span class=&quot;number&quot;&gt;23&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;f1&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; b = &lt;span class=&quot;number&quot;&gt;34&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(x + b)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="闭包" scheme="wangsiyuan233.github.io/tags/%E9%97%AD%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>深入理解JavaScript--闭包系列(2)</title>
    <link href="wangsiyuan233.github.io/2018/03/26/29%E9%97%AD%E5%8C%85%E7%B3%BB%E5%88%97-2/"/>
    <id>wangsiyuan233.github.io/2018/03/26/29闭包系列-2/</id>
    <published>2018-03-26T10:35:04.000Z</published>
    <updated>2018-03-27T12:51:39.938Z</updated>
    
    <content type="html"><![CDATA[<p>先说<strong>作用域</strong></p><p>光知道“JavaScript没有块级作用域”是完全不够的，你需要知道的是——JavaScript除了全局作用域之外，只有<strong>函数</strong>可以创建的作用域。<br>所以，我们在声明变量时，全局代码要在代码前端声明，函数中要在函数体一开始就声明好。除了这两个地方，其他地方都不要出现变量声明。而且建议用“单var”形式。<br><a id="more"></a><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</div><div class="line">    b = <span class="number">20</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params">x</span>)</span>&#123;</div><div class="line"><span class="keyword">var</span> a = <span class="number">100</span>;</div><div class="line">c = <span class="number">300</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params">x</span>)</span>&#123;</div><div class="line"><span class="keyword">var</span> a = <span class="number">1000</span>;</div><div class="line">    d = <span class="number">4000</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/SbjCI3s.png" alt=""><br>如图，f1就是f2的上级作用域</p><p>除了全局作用域之外，每个函数都会创建自己的作用域，作用域在函数<strong>定义</strong>时就已经确定了。而不是在函数调用时确定。<br>作用域最大的用处就是隔离变量，不同作用域下同名变量不会有冲突。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</div><div class="line">    b = <span class="number">20</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params">x</span>)</span>&#123;</div><div class="line"><span class="keyword">var</span> a = <span class="number">100</span>;</div><div class="line">c = <span class="number">300</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params">x</span>)</span>&#123;</div><div class="line"><span class="keyword">var</span> a = <span class="number">1000</span>;</div><div class="line">    d = <span class="number">4000</span>;</div><div class="line">&#125;</div><div class="line">f2(<span class="number">111</span>);</div><div class="line">f2(<span class="number">222</span>);</div><div class="line">&#125;</div><div class="line">f1(<span class="number">33</span>);</div></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/PcGbarw.png" alt=""><br>作用域中变量的值是在执行过程中产生的确定的，而作用域却是在函数创建时就确定了。所以，如果要查找一个作用域下某个变量的值，就需要找到这个作用域对应的执行上下文环境，再在其中寻找变量的值。<br>所以，如果要查找一个作用域下某个<strong>变量</strong>的值，就需要找到这个作用域对应的执行上下文环境，再在其中寻找变量的值。</p><hr><p>看到这里的朋友可能把<strong>作用域</strong>和<strong>上下文环境</strong>搞混了，认为它们是同一样东西<br>当然不是的。</p><p><strong>【上下文环境】</strong>可以理解为一个看不见摸不着的对象（有若干个属性），虽然看不见摸不着，但确实实实在在存在的，因为所有的变量都在里面存储着，要不然咱们定义的变量在哪里存？</p><p><strong>【作用域】</strong>首先，它很抽象。第二，记住一句话：除了全局作用域，只有函数才能创建作用域。创建一个函数就创建了一个作用域，无论你调用不调用，函数只要创建了，它就有独立的作用域，就有自己的一个“地盘”。</p><p>区别和联系：一个作用域下可能包含若干个上下文环境。有可能从来没有过上下文环境（函数从来就没有被调用过）；有可能有过，现在函数被调用完毕后，上下文环境被销毁了；有可能同时存在一个或多个（闭包）。</p><p>可以简记为：作用域是静态的组织结构，上下文是动态的计算。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> x = <span class="number">100</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">x</span>)</span>&#123;</div><div class="line"></div><div class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</div><div class="line"><span class="built_in">console</span>.log(x);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> f1 = fn(<span class="number">5</span>);</div><div class="line"><span class="keyword">var</span> f2 = fn(<span class="number">10</span>);</div><div class="line">f1();</div><div class="line">f2();</div></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/AoMaqBi.png" alt=""><br>我们通过具体例子可以发现：执行第13行，再次调用fn函数——fn(10)。产生fn(5)的上下文环境，并压栈，并设置为活动状态。但是此时fn(5)的上下文环境还在内存中———— <strong>一个作用域下同时存在两个上下文环境。</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;先说&lt;strong&gt;作用域&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;光知道“JavaScript没有块级作用域”是完全不够的，你需要知道的是——JavaScript除了全局作用域之外，只有&lt;strong&gt;函数&lt;/strong&gt;可以创建的作用域。&lt;br&gt;所以，我们在声明变量时，全局代码要在代码前端声明，函数中要在函数体一开始就声明好。除了这两个地方，其他地方都不要出现变量声明。而且建议用“单var”形式。&lt;br&gt;
    
    </summary>
    
    
      <category term="闭包" scheme="wangsiyuan233.github.io/tags/%E9%97%AD%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>深入理解JavaScript--闭包系列(1)</title>
    <link href="wangsiyuan233.github.io/2018/03/26/28%E9%97%AD%E5%8C%85%E7%B3%BB%E5%88%97-1/"/>
    <id>wangsiyuan233.github.io/2018/03/26/28闭包系列-1/</id>
    <published>2018-03-26T08:31:31.000Z</published>
    <updated>2018-03-28T01:12:00.299Z</updated>
    
    <content type="html"><![CDATA[<p>其实闭包的核心内容特别的少，但是铺垫非常的长<br>谈到闭包，无论如何都不能绕过去的，就是 作用域 啦</p><p>在代码块开始执行之前，JS先着手一些“准备工作”<br>我们把这种数据的准备情况叫做 ———— 【执行上下文】<br><a id="more"></a><br>他们包括：<br>1、函数表达式（变量）赋值为undefined;<br>2、函数声明 赋值；<br>3、this赋值。<br>执行的代码块也分为3种情况：<br>1、全局代码；（手写文本到<code>&lt;script&gt;</code>标签里面）<br>2、函数体；（new一个函数，里面必须有文本）<br>3、eval代码（不常用，不推荐）</p><p><strong>给执行上下文环境下一个通俗的定义——在执行代码之前，把将要用到的所有的变量都事先拿出来，有的直接赋值了，有的先用undefined占个空。</strong></p><p>在执行js代码时，会有数不清的函数调用次数，会产生许多个上下文环境。这么多上下文环境该如何管理，以及如何销毁而释放内存呢？</p><p>执行全局代码时，会产生一个执行上下文环境，每次调用函数都又会产生执行上下文环境。当函数调用完成时，这个<strong>上下文环境以及其中的数据(变量)都会被消除</strong>，再重新回到全局上下文环境。处于活动状态的执行上下文环境只有一个。（特殊情况就是闭包）<br><img src="https://i.imgur.com/H5dRIKU.png" alt=""><br>上面这种情况其实是一种非常理想的状况，在实际的工作应用中，我们无法做到及时销毁<br>因为我们有伟大的————闭包！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;其实闭包的核心内容特别的少，但是铺垫非常的长&lt;br&gt;谈到闭包，无论如何都不能绕过去的，就是 作用域 啦&lt;/p&gt;
&lt;p&gt;在代码块开始执行之前，JS先着手一些“准备工作”&lt;br&gt;我们把这种数据的准备情况叫做 ———— 【执行上下文】&lt;br&gt;
    
    </summary>
    
    
      <category term="闭包" scheme="wangsiyuan233.github.io/tags/%E9%97%AD%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>聊聊系列(1)--new函数</title>
    <link href="wangsiyuan233.github.io/2018/03/25/26%E8%81%8A%E8%81%8A%E7%B3%BB%E5%88%97-1/"/>
    <id>wangsiyuan233.github.io/2018/03/25/26聊聊系列-1/</id>
    <published>2018-03-25T10:14:52.978Z</published>
    <updated>2018-03-27T07:30:17.665Z</updated>
    
    <content type="html"><![CDATA[<p>原型链+继承告一段落，我们接下来开始闭包的部分。<br>当然不会直接开始闭包呀<br>今天想跟大家聊聊 new函数</p><p><a href="http://wangsiyuan233.cn/JS函数.html" target="_blank" rel="external">声明函数的五种方式</a><br>废话不多说 <strong>当我们在new一个函数的时候我们在干嘛？</strong></p><p>以【为程序员哥哥们批量制造女友】为例<br><a id="more"></a><br>1.1、创造理想型<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> 女孩儿 = &#123;</div><div class="line">  <span class="attr">ID</span>: <span class="number">001</span>, <span class="comment">// 用于区分不同女孩儿</span></div><div class="line">  类型:<span class="string">"甜美可人"</span>,</div><div class="line">  撒娇:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">/*撒娇的代码*/</span>&#125;,</div><div class="line">  攻击:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">/*受死吧直男*/</span>   &#125;,</div><div class="line">  抛弃:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">/**/</span>&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">梦工厂.制造(女孩儿)</div></pre></td></tr></table></figure></p><p>1.2、这样的女孩给我1000个<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> 女孩们 = [];</div><div class="line"><span class="keyword">var</span> 女孩儿</div><div class="line"><span class="keyword">for</span> ( <span class="keyword">var</span> i = <span class="number">0</span>, i&lt;<span class="number">1000</span>, i++)&#123;</div><div class="line"><span class="keyword">var</span> 女孩儿 = &#123;</div><div class="line">  <span class="attr">ID</span>: <span class="number">001</span>, <span class="comment">// 用于区分不同女孩儿</span></div><div class="line">  类型:<span class="string">"甜美可人"</span>,</div><div class="line">  撒娇:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">/*撒娇的代码*/</span>&#125;,</div><div class="line">  攻击:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">/*受死吧直男*/</span>   &#125;,</div><div class="line">  抛弃:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">/*展开新生活*/</span>&#125;</div><div class="line"> &#125;</div><div class="line"> 女孩们.push(女孩儿)</div><div class="line">&#125;</div><div class="line">梦工厂.制造(女孩儿)</div></pre></td></tr></table></figure></p><p>咦，为什么不能这样呢？<br>因为内存浪费了呀！<br>每个女孩的撒娇、攻击和抛弃都是一样的啊（划掉）<br>那我们可以把这些共同的属性写在同一个函数里，调用1000次就行了呀<br>ID和女孩儿的类型这些不同的地方再单独写出来循环<br>根据上一节<a href="http://wangsiyuan233.cn/原型闭包系列-4.html" target="_blank" rel="external">原型链</a>的知识<br>我们可以把 撒娇+攻击+抛弃 放入[女孩原型]中，然后让[女孩儿]通过 <code>__proto__</code>指向[女孩原型]<br>1.3、省空间<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> 女孩儿 = &#123;</div><div class="line">  <span class="attr">ID</span>: <span class="number">001</span>, <span class="comment">// 用于区分不同女孩儿</span></div><div class="line">  类型:<span class="string">"甜美可人"</span>,</div><div class="line">  撒娇:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">/*撒娇的代码*/</span>&#125;,</div><div class="line">  攻击:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">/*受死吧直男*/</span>   &#125;,</div><div class="line">  抛弃:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">/*展开新生活*/</span>&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> 女孩们 = [];</div><div class="line"><span class="keyword">var</span> 女孩儿</div><div class="line"><span class="keyword">for</span> ( <span class="keyword">var</span> i = <span class="number">0</span>, i&lt;<span class="number">1000</span>, i++)&#123;</div><div class="line">女孩儿 = &#123;</div><div class="line">ID：i;</div><div class="line">类型:<span class="string">"甜美可人"</span></div><div class="line">&#125;</div><div class="line"><span class="comment">/*实际工作中不要这样写，因为 __proto__ 不是标准属性*/</span></div><div class="line">女孩儿.__proto__ = 女孩原型</div><div class="line">女孩们.push(女孩儿)</div><div class="line">&#125;</div><div class="line">梦工厂.制造(女孩儿)</div></pre></td></tr></table></figure></p><p>1.4、优化<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> 女孩儿（<span class="title">ID</span>）</span>&#123;</div><div class="line"><span class="keyword">var</span> 临时对象 = &#123;&#125;</div><div class="line">临时对象.__proto__ = 女孩儿.原型</div><div class="line">临时对象.ID = ID</div><div class="line">临时对象.类型 = <span class="string">"甜美可人"</span></div><div class="line"></div><div class="line"><span class="keyword">return</span> 临时对象</div><div class="line">&#125;</div><div class="line">女孩儿.原型 = &#123;</div><div class="line">撒娇:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">/*撒娇的代码*/</span>&#125;,</div><div class="line">攻击:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">/*受死吧直男*/</span>   &#125;,</div><div class="line">抛弃:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">/*展开新生活*/</span>&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//保存为 我的女孩儿.js</span></div><div class="line"></div><div class="line"><span class="comment">//引用的时候</span></div><div class="line"><span class="keyword">var</span> 女孩们 = [];</div><div class="line"><span class="keyword">for</span> ( <span class="keyword">var</span> i = <span class="number">0</span>, i&lt;<span class="number">1000</span>, i++)&#123;</div><div class="line">女孩们.push(女孩儿(i))</div><div class="line">&#125;</div><div class="line">梦工厂.制造(女孩儿)</div></pre></td></tr></table></figure></p><p>2.1、JS之父给了我们new这个’密码’<br>只要你在女孩儿前面使用 new 关键字，那么可以少做四件事情：</p><p>不用创建临时对象，因为 new 会帮你做（你使用「this」就可以访问到临时对象）；<br>不用绑定原型，因为 new 会帮你做（new 为了知道原型在哪，所以指定原型的名字为 prototype）；<br>不用 return 临时对象，因为 new 会帮你做；<br>不要给原型想名字了，因为 new 指定名字为 prototype。<br><img src="https://i.imgur.com/1BjUy3y.png" alt=""><br>2.2、用 new 重写一遍<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> 女孩儿（<span class="title">ID</span>）</span>&#123;</div><div class="line"><span class="keyword">this</span>.ID = ID</div><div class="line"><span class="keyword">this</span>.类型 = <span class="string">'甜蜜可人'</span></div><div class="line">&#125;</div><div class="line">女孩儿.prototype = &#123;</div><div class="line">撒娇:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">/*撒娇的代码*/</span>&#125;,</div><div class="line">攻击:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">/*受死吧直男*/</span>   &#125;,</div><div class="line">抛弃:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">/*展开新生活*/</span>&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//保存为 我的女孩儿.js</span></div><div class="line"></div><div class="line"><span class="comment">//引用的时候</span></div><div class="line"><span class="keyword">var</span> 女孩们 = [];</div><div class="line"><span class="keyword">for</span> ( <span class="keyword">var</span> i = <span class="number">0</span>, i&lt;<span class="number">1000</span>, i++)&#123;</div><div class="line">女孩们.push( <span class="keyword">new</span> 女孩儿(i)) <span class="comment">//新增了一个new</span></div><div class="line">&#125;</div><div class="line">梦工厂.制造(女孩儿)</div></pre></td></tr></table></figure></p><p>这就是所谓的 <strong>语法糖</strong><br>2.3、值得注意的是：new 操作为了记录「临时对象是由哪个函数创建的」，所以预先给「女孩儿.prototype」加了一个 constructor 属性<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">女孩儿.prototype = &#123;</div><div class="line">  <span class="attr">constructor</span>: 女孩儿</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>当然，constructor 是可以删除或修改的<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">女孩儿.prototype = &#123;</div><div class="line">    <span class="attr">constructor</span>: 女孩儿</div><div class="line">    撒娇:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">/*撒娇的代码*/</span>&#125;,</div><div class="line">攻击:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">/*受死吧直男*/</span>   &#125;,</div><div class="line">抛弃:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">/*展开新生活*/</span>&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;原型链+继承告一段落，我们接下来开始闭包的部分。&lt;br&gt;当然不会直接开始闭包呀&lt;br&gt;今天想跟大家聊聊 new函数&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://wangsiyuan233.cn/JS函数.html&quot;&gt;声明函数的五种方式&lt;/a&gt;&lt;br&gt;废话不多说 &lt;strong&gt;当我们在new一个函数的时候我们在干嘛？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;以【为程序员哥哥们批量制造女友】为例&lt;br&gt;
    
    </summary>
    
    
      <category term="聊聊系列" scheme="wangsiyuan233.github.io/tags/%E8%81%8A%E8%81%8A%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>聊聊系列(2)--this</title>
    <link href="wangsiyuan233.github.io/2018/03/25/27%E8%81%8A%E8%81%8A%E7%B3%BB%E5%88%97-2/"/>
    <id>wangsiyuan233.github.io/2018/03/25/27聊聊系列-2/</id>
    <published>2018-03-25T10:14:52.978Z</published>
    <updated>2018-04-03T01:26:42.870Z</updated>
    
    <content type="html"><![CDATA[<p>先从 this 说起吧！<br>（这一天终于来了）</p><p>工作中我们总会面临：这个this指的是代码里的那一块呢?<br><a id="more"></a><br>结论：<strong>「this 就是 call 的第一个参数」</strong><br>1、ES5调用函数的三种方式<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//第一种</span></div><div class="line">func(p1, p2) 等价于</div><div class="line">func.call(<span class="literal">undefined</span>, p1, p2) <span class="comment">//this为window</span></div><div class="line"><span class="comment">//fn() 是 strict mode，this 就是 undefined (记牢！)</span></div><div class="line"></div><div class="line"><span class="comment">//第二种</span></div><div class="line">obj.child.method(p1, p2) 等价于</div><div class="line">obj.child.method.call(obj, p1, p2) <span class="comment">//this为obj</span></div><div class="line"></div><div class="line"><span class="comment">//第三种</span></div><div class="line">func.call(context, p1, p2)  <span class="comment">//this就为context</span></div></pre></td></tr></table></figure></p><p>2、ES6的箭头函数<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//箭头函数没有自己的this，它的this都指向外层</span></div><div class="line"><span class="comment">//箭头函数里面 this 跟外面的 this 的值一模一样</span></div><div class="line"></div><div class="line"><span class="comment">//箭头函数里面没有this，this外面的环境是window,全局又没有定义name属性，则为undefined</span></div><div class="line"><span class="keyword">var</span> person = &#123;</div><div class="line">  <span class="attr">name</span>: <span class="string">"test"</span>,</div><div class="line">  <span class="attr">shout</span>: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="keyword">this</span>.name) <span class="comment">//undefined</span></div><div class="line">&#125;</div><div class="line">person.shout();</div><div class="line"></div><div class="line"><span class="comment">//箭头函数里面没有this，this外面的属性是person，person.name为test</span></div><div class="line"><span class="keyword">var</span> person = &#123;</div><div class="line">  <span class="attr">name</span>: <span class="string">"test"</span>,</div><div class="line">  shout()&#123;</div><div class="line">    <span class="keyword">const</span> shout = <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="keyword">this</span>.name); <span class="comment">//test</span></div><div class="line">    <span class="keyword">return</span> shout;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">person.shout()();</div></pre></td></tr></table></figure></p><p>3、构造函数<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//普通函数</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>)</span>&#123;</div><div class="line"><span class="keyword">this</span>.name = <span class="string">'wangsiyuan'</span>;</div><div class="line"><span class="keyword">this</span>.position = <span class="string">'全栈工程师'</span>;</div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>) <span class="comment">//undefined会转换成window，最终是window</span></div><div class="line">&#125;</div><div class="line">Foo();  <span class="comment">//相当于Foo.call(undefined)</span></div><div class="line"></div><div class="line"><span class="comment">//new函数</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>)</span>&#123;</div><div class="line"><span class="keyword">this</span>.name = <span class="string">'wangsiyuan'</span>;</div><div class="line"><span class="keyword">this</span>.position = <span class="string">'全栈工程师'</span>;</div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>) <span class="comment">//Foo&#123;name:'wangsiyuan',position:'全栈工程师'&#125;</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> f1 = <span class="keyword">new</span> Foo();</div><div class="line"><span class="built_in">console</span>.log(f1.name) <span class="comment">// wangsiyuan</span></div><div class="line"><span class="built_in">console</span>.log(f1.position) <span class="comment">// 全栈工程师</span></div></pre></td></tr></table></figure></p><p>4、构造函数的prototype中this代表什么<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//不仅仅是构造函数的prototype，即便是在整个原型链中，this代表的也都是当前对象的值。</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>)</span>&#123;</div><div class="line"><span class="keyword">this</span>.name = <span class="string">'wangsiyuan'</span>;</div><div class="line"><span class="keyword">this</span>.position = <span class="string">'全栈工程师'</span>;</div><div class="line">&#125;</div><div class="line">Foo.prototype.getName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>) <span class="comment">//Foo&#123;name:'wangsiyuan',position:'全栈工程师'&#125;</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> f1 = <span class="keyword">new</span> Foo();</div><div class="line">f1.getName(); <span class="comment">//wangsiyuan</span></div><div class="line"><span class="comment">//在Fn.prototype.getName函数中，this指向的是f1对象。因此可以通过this.name获取f1.name的值</span></div></pre></td></tr></table></figure></p><p>5、函数作为对象的一个属性<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">  <span class="attr">foo</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> bar = obj.foo</div><div class="line">obj.foo() <span class="comment">// 转换为 obj.foo.call(obj)，this 就是 obj</span></div><div class="line">bar()  <span class="comment">// 转换为 bar.call(undefined),this 就是 undefined</span></div></pre></td></tr></table></figure></p><p>6、数组<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span> (<span class="params"></span>)</span>&#123; <span class="built_in">console</span>.log(<span class="keyword">this</span>) &#125;</div><div class="line"><span class="keyword">var</span> arr = [fn, fn2]</div><div class="line">arr[<span class="number">0</span>]() <span class="comment">// 这里面的 this 又是什么呢？</span></div><div class="line"></div><div class="line"><span class="comment">//转换思路</span></div><div class="line"><span class="comment">//arr[0]() </span></div><div class="line"><span class="comment">//假想为    arr.0()</span></div><div class="line"><span class="comment">//然后转换为 arr.0.call(arr)</span></div><div class="line"><span class="comment">//那么里面的 this 就是 arr 了嘻嘻</span></div></pre></td></tr></table></figure></p><p>7、Event Handler 中的 this<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">btn.addEventListener(<span class="string">'click'</span> ,<span class="function"><span class="keyword">function</span> <span class="title">handler</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>) <span class="comment">// 请问这里的 this 是什么</span></div><div class="line">&#125;)</div><div class="line"><span class="comment">//查文档后发现</span></div><div class="line"><span class="comment">// 当事件被触发时</span></div><div class="line">handler.call(event.currentTarget, event) </div><div class="line"><span class="comment">// 那么 this 是什么不言而喻</span></div></pre></td></tr></table></figure></p><p>8、jQuery Event Handler 中的 this<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ul.on(<span class="string">'click'</span>, <span class="string">'li'</span> , <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>)  <span class="comment">// 请问这里的 this 是什么</span></div><div class="line">&#125;) </div><div class="line"><span class="comment">//查文档后发现</span></div><div class="line"><span class="comment">//对于代理事件而言，this 则代表了与 selector 相匹配的元素。</span></div><div class="line"><span class="comment">//(注意，如果事件是从后代元素冒泡上来的话，那么 this 就有可能不等于 event.target。)若要使用 jQuery 的相关方法，可以根据当前元素创建一个 jQuery 对象，即使用 $(this)。</span></div></pre></td></tr></table></figure></p><p>9、如何强制指定 this 的值<br>自己写apply/bind/call就行了<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//用call或apply</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">handlerWrapper</span>(<span class="params">event</span>)</span>&#123;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">handler</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>) <span class="comment">// 请问这里的 this 是什么</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  handler.call(&#123;<span class="attr">name</span>:<span class="string">'wangsiyuan'</span>&#125;, event)</div><div class="line">&#125;</div><div class="line">btn.addEventListener(<span class="string">'click'</span>, handlerWrapper)</div></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//用bind也差不了多少</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">handler</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>) <span class="comment">// 请问这里的 this 是什么</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> handlerWrapper = handler.bind(&#123;<span class="attr">name</span>:<span class="string">'wangsiyuan'</span>&#125;)</div><div class="line">btn.addEventListener(<span class="string">'click'</span>, handlerWrapper)</div><div class="line"></div><div class="line"><span class="comment">//变身面试套路题</span></div><div class="line">btn.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>) <span class="comment">// 请问这里的 this 是什么</span></div><div class="line">&#125;.bind(&#123;<span class="attr">name</span>:<span class="string">'wangsiyuan'</span>&#125;))</div></pre></td></tr></table></figure><p>10、立即执行函数<br>每个函数只有一个this<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myObject = &#123;</div><div class="line"><span class="attr">foo</span>: <span class="string">"bar"</span>;</div><div class="line">func: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"><span class="keyword">var</span> self = <span class="keyword">this</span>; <span class="comment">//这里的this并不是下面立即执行函数的this，它是中函数的this</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">"outer func: this.foo ="</span> + <span class="keyword">this</span>.foo) <span class="comment">// bar</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">"outer func: self.foo ="</span> + self.foo) <span class="comment">// bar</span></div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"><span class="built_in">console</span>.log(<span class="string">"inner func: this.foo ="</span> + <span class="keyword">this</span>.foo) <span class="comment">// undefined</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">"inner func: self.foo ="</span> + self.foo) <span class="comment">// bar</span></div><div class="line">&#125;());</div><div class="line">&#125;</div><div class="line">&#125;;</div><div class="line">myObject.func();</div></pre></td></tr></table></figure></p><p>结论：<strong>「this 就是 call 的第一个参数」</strong><br>记住了吗？</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;先从 this 说起吧！&lt;br&gt;（这一天终于来了）&lt;/p&gt;
&lt;p&gt;工作中我们总会面临：这个this指的是代码里的那一块呢?&lt;br&gt;
    
    </summary>
    
    
      <category term="聊聊系列" scheme="wangsiyuan233.github.io/tags/%E8%81%8A%E8%81%8A%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>深入理解JavaScript--原型系列(4)</title>
    <link href="wangsiyuan233.github.io/2018/03/25/25%E5%8E%9F%E5%9E%8B%E7%B3%BB%E5%88%97-4/"/>
    <id>wangsiyuan233.github.io/2018/03/25/25原型系列-4/</id>
    <published>2018-03-25T06:37:02.292Z</published>
    <updated>2018-03-27T07:33:57.959Z</updated>
    
    <content type="html"><![CDATA[<p>哈哈被骗啦(…)还没轮到原型链<br>这一小节我们将引出一个中介概念 <code>instanceof</code><br><a id="more"></a></p><p>对于值类型，我们可以通过typeof判断，string/number/boolean都很清楚，但是typeof在判断到引用类型的时候，返回值只有object/function，我们不知道它到底是一个object对象，还是数组，还是new Number等等。这个时候就需要用到instanceof。</p><p>instanceof有一个判断准则是：沿着对象的<code>__proto__</code> 和 函数的<code>prototype</code>的两端同时寻找，如果两条线能找到同一个引用，即同一个对象，那么就返回true。如果找到终点还未重合，则返回false。<br><img src="https://i.imgur.com/r7M68Fc.png" alt=""><br>由上面这张图可以得出以下不着调的结论：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Function</span> Foo()&#123;&#125;</div><div class="line"><span class="keyword">var</span> f1 = <span class="keyword">new</span> Foo();</div><div class="line"><span class="built_in">console</span>.log(f1 <span class="keyword">instanceof</span> Foo); <span class="comment">//true</span></div><div class="line"><span class="built_in">console</span>.log(f1 <span class="keyword">instanceof</span> <span class="built_in">Object</span>); <span class="comment">//true</span></div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span> <span class="keyword">instanceof</span> <span class="built_in">Function</span>); <span class="comment">//true</span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Function</span> <span class="keyword">instanceof</span> <span class="built_in">Object</span>); <span class="comment">//true</span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Function</span> <span class="keyword">instanceof</span> <span class="built_in">Function</span>); <span class="comment">//true</span></div></pre></td></tr></table></figure></p><p>所以这些乱七八糟的关系图是为什么呢？？？<br>原来，instanceof表示的就是一种继承关系，或者原型链的结构。</p><hr><p>访问一个对象的属性时，先在基本属性中查找，如果没有，再沿着<code>__proto__</code>这条链向上找，这就是原型链。</p><p>那么我们在实际应用中如何区分一个属性到底是基本的还是从原型中找到的呢？大家可能都知道答案了——hasOwnProperty，特别是在for…in…循环中，一定要注意。</p><p>由于所有的对象的原型链都会找到Object.prototype，因此所有的对象都会有Object.prototype的方法（hasOwnProperty）。这就是所谓的“继承”。</p><hr><p>沿着<code>__proto__</code>向上找就是<strong>原型链</strong>；<br>最后把Object.prototype里的hasOwnProperty（或者Function.prototype里的call）拿来直接用，就是<strong>继承</strong>。</p><p>这意味着，创建的对象可以增加属性，继承的方法不合适也可以修改。</p><p>可以看看我以前总结的 <a href="wangsiyuan233.cn/2018/03/08/原型链实例/">原型链实例</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;哈哈被骗啦(…)还没轮到原型链&lt;br&gt;这一小节我们将引出一个中介概念 &lt;code&gt;instanceof&lt;/code&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="原型链" scheme="wangsiyuan233.github.io/tags/%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title>深入理解JavaScript--原型系列(3)</title>
    <link href="wangsiyuan233.github.io/2018/03/25/24%E5%8E%9F%E5%9E%8B%E7%B3%BB%E5%88%97-3/"/>
    <id>wangsiyuan233.github.io/2018/03/25/24原型系列-3/</id>
    <published>2018-03-25T05:46:54.685Z</published>
    <updated>2018-03-27T07:33:49.641Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/7BYXesw.png" alt=""><br>由上面这张图可以一层层得出以下的结论1：<br><a id="more"></a><br>1.<code>f1.__proto__ === Foo.prototype</code><br>2.<code>Foo.prototype.__proto__ === Object.prototype</code><br>3.<code>Object.prototype.__proto__ === null</code>（牢记）<br>有了以上的知识储备，我有一个大胆的想法：函数也是对象，那函数有<code>__proto__</code>吗？它的值有等于什么呢？<br>答案是肯定的，函数这个对象(…)是被FFFFFFunction函数创建的。<br>即 ———&gt;&gt;&gt; <code>Object.__proto__ === Function.prototype</code><br><img src="https://i.imgur.com/vAwUmea.png" alt=""><br>由上面这张图可以一层层得出以下的结论2：<br>1.自定义函数<code>Foo.__proto__ === Function.prototype</code><br>2.<code>Object.__proto__ === Function.prototype</code><br>3.<code>Function.__proto__ === Function.prototype</code>(…)<br>竟然形成了一个环！！<br><img src="https://i.imgur.com/E0G47Yo.png" alt=""><br>由上面这张图可以得出以下的结论3：<br><code>Function.prototype.__proto__ === Object.prototype</code><br>（这个式子在结论1里出现过了哦，一样的形式呢）</p><hr><p>是不是有点乱呢？<br>梳理一遍吧~<br>-&gt;&gt;首先我们利用值类型和引用类型，得出了一个结论：一切引用类型都是对象；<br>-&gt;&gt;第二步知道了对象都是由创建他的函数构建的；<br>此时我们有点发晕了，函数和对象傻傻捋不清楚；<br>-&gt;&gt;第三步引入了prototype这个属性，我们知道了一个[对象]的隐性属性指向(创建这个对象的)函数的显性属性；<br>接着我们发现：一个[函数]的隐性属性指向(创建这个函数的)FFFFFFunction函数的显性属性（<code>Foo.__proto__ === Function.prototype</code>）<br>-&gt;&gt;最后，由于Function.prototype指向的对象也是一个普通的被Object创建的对象，我们得到<code>Function.prototype.__proto__ === Object.prototype</code></p><hr><p>对的哦，最后形成了一个环！嘿嘿嘿，老司机肯定知道我接下来要介绍的重要概念————原型链 啦！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.imgur.com/7BYXesw.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;由上面这张图可以一层层得出以下的结论1：&lt;br&gt;
    
    </summary>
    
    
      <category term="原型链" scheme="wangsiyuan233.github.io/tags/%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title>深入理解JavaScript--原型系列(2)</title>
    <link href="wangsiyuan233.github.io/2018/03/25/23%E5%8E%9F%E5%9E%8B%E7%B3%BB%E5%88%97-2/"/>
    <id>wangsiyuan233.github.io/2018/03/25/23原型系列-2/</id>
    <published>2018-03-25T03:10:47.707Z</published>
    <updated>2018-03-27T08:21:03.543Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://wangsiyuan233.cn/2018/03/25/原型系列-1/" target="_blank" rel="external">接上节</a><br>数组、函数和对象这三者的关系非常有趣<br>数组可以看做是对象的一个子集；<br>但是函数和对象却类似于鸡和蛋的关系。<br>一起来看看吧~<br><a id="more"></a><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//粗一看对象好像不需要函数来创建呀</span></div><div class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">a</span>: <span class="number">10</span>, <span class="attr">b</span>: <span class="number">20</span> &#125;;</div><div class="line"><span class="keyword">var</span> arr = [<span class="number">5</span>, <span class="string">'x'</span>, <span class="literal">true</span>];</div><div class="line"></div><div class="line"><span class="comment">//其实这才是上面两个的对象的真面目</span></div><div class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line">obj.a = <span class="number">10</span>;</div><div class="line">obj.b = <span class="number">20</span>;</div><div class="line"></div><div class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>();</div><div class="line">arr[<span class="number">0</span>] = <span class="number">5</span>;</div><div class="line">arr[<span class="number">1</span>] = <span class="string">'x'</span>;</div><div class="line">arr[<span class="number">2</span>] = <span class="literal">true</span>;</div><div class="line"></div><div class="line"><span class="comment">//Object和Array也都是function</span></div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> (<span class="built_in">Object</span>));  <span class="comment">// function</span></div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> (<span class="built_in">Array</span>));  <span class="comment">// function</span></div></pre></td></tr></table></figure></p><h2 id="结论：对象都是通过函数创建的"><a href="#结论：对象都是通过函数创建的" class="headerlink" title="结论：对象都是通过函数创建的"></a>结论：<strong>对象都是通过函数创建的</strong></h2><p>在上一节我们说了：一切（引用类型）都是对象；<br>现在的结论是：对象都是通过函数创建的；<br>有没有被绕晕呢？</p><hr><p>以前我们说过，函数创建了对象，（函数是属性的集合），我们可以给函数定制属于自己的属性，那么函数有哪些属性呢？说到这儿，不得不提我们大名鼎鼎的 prototype 啦！<br>每个函数都有一个属性叫做prototype；<br>prototype的属性值是一个对象（属性的集合）；<br>prototype默认的仅有的属性叫constructor，指向这个函数本身。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//自定义Fn的属性</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fn</span>(<span class="params"></span>) </span>&#123; &#125;</div><div class="line">Fn.prototype.name = <span class="string">'wangsiyuan'</span>;</div><div class="line">Fn.prototype.getPosition = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line"><span class="keyword">return</span> 全栈工程师;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fn</span>(<span class="params"></span>) </span>&#123; &#125;</div><div class="line">Fn.prototype.name = <span class="string">'wangsiyuan'</span>;</div><div class="line">Fn.prototype.getPosition = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line"><span class="keyword">return</span> 全栈工程师;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> fn = <span class="keyword">new</span> Fn();</div><div class="line"><span class="built_in">console</span>.log(fn.name);</div><div class="line"><span class="built_in">console</span>.log(fn.getPosition());</div></pre></td></tr></table></figure><p>fn对象是通过Fn函数new出来的;<br>即 ———&gt;&gt;&gt; 对象都是通过函数创建出来的;<br>即 ———&gt;&gt;&gt; fn对象可以调用Fn.prototype中的属性；<br>因为 ———&gt;&gt;&gt; 每个对象都有一个“隐式原型”<code>__proto__</code>，它指向创建该对象的函数的prototype；<br>即 ———&gt;&gt;&gt; <code>fn.__proto__ === Fn.prototype.</code><br>其实prototype的推导过程并没有那么可怕嘛！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://wangsiyuan233.cn/2018/03/25/原型系列-1/&quot;&gt;接上节&lt;/a&gt;&lt;br&gt;数组、函数和对象这三者的关系非常有趣&lt;br&gt;数组可以看做是对象的一个子集；&lt;br&gt;但是函数和对象却类似于鸡和蛋的关系。&lt;br&gt;一起来看看吧~&lt;br&gt;
    
    </summary>
    
    
      <category term="原型链" scheme="wangsiyuan233.github.io/tags/%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
    
  </entry>
  
</feed>
