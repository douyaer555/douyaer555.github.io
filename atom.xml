<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>wangsiyuan</title>
  
  <subtitle>小马过河</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="wangsiyuan233.github.io/"/>
  <updated>2018-03-27T07:24:39.585Z</updated>
  <id>wangsiyuan233.github.io/</id>
  
  <author>
    <name>wangsiyuan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CSS小结</title>
    <link href="wangsiyuan233.github.io/2018/04/13/9CSS%E5%B0%8F%E7%BB%93/"/>
    <id>wangsiyuan233.github.io/2018/04/13/9CSS小结/</id>
    <published>2018-04-13T10:12:14.299Z</published>
    <updated>2018-03-27T07:24:39.585Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CSS黑魔法"><a href="#CSS黑魔法" class="headerlink" title="CSS黑魔法"></a>CSS黑魔法</h2><p><strong>各属性之间相互影响</strong></p><ul><li>margin 和 border：</li></ul><ol><li>上下两个div之间的margin会选择大的呈现</li><li>用一个0.1px的border隔开，上下还是原来的margin数；</li><li>用display：table，上下还是原来的margin数；</li><li>用display：flex，上下还是原来的margin数；</li><li>用overflow：hidden，上下还是原来的margin数；<a id="more"></a></li></ol><ul><li><p>li的小圆点 和 display:<br>当 display:inline 或者 display:block的时候，li的小圆点会消失；</p></li><li><p>position 和 display：<br>当position为 absolute时，设置好的display:inline会变成display:block;</p></li></ul><p><strong>各元素之间相互影响</strong></p><ul><li><p>position 和 transform：<br>position 为 fixed 时，transform scale（0.9），共同缩小页面，元素并没有停留在原来的位置，相对页面固定，而是一起缩小了！</p></li><li><p>float 和 inline:<br>浮动并不仅仅是“在上面”，更深刻的含义是 —— “图文混排” “文字环绕”；</p></li></ul><hr><h2 id="CSS套路"><a href="#CSS套路" class="headerlink" title="CSS套路"></a>CSS套路</h2><ul><li><strong>布局</strong></li></ul><ol><li>web端：IE8用float；chrome用flex；</li><li>手机端：flex；</li></ol><ul><li><strong>水平居中</strong></li></ul><ol><li>inline元素：.parent{text-align：center;} .child{inline / inline-block}</li><li>block元素：child宽度不确定时用margin-left，margin-right；child宽度确定时用margin：auto</li></ol><ul><li><strong>垂直居中</strong>(要点是不要写死height)</li></ul><ol><li>parent高度确定：不管child高度确不确定，都是.parent{padding-top，padding-button;} </li><li>parent高度不确定且child高度不确定，IE8用table；chrome 和 mobile 用flex；（parent能不写死就不要手欠！）</li></ol><hr>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;CSS黑魔法&quot;&gt;&lt;a href=&quot;#CSS黑魔法&quot; class=&quot;headerlink&quot; title=&quot;CSS黑魔法&quot;&gt;&lt;/a&gt;CSS黑魔法&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;各属性之间相互影响&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;margin 和 border：&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;上下两个div之间的margin会选择大的呈现&lt;/li&gt;
&lt;li&gt;用一个0.1px的border隔开，上下还是原来的margin数；&lt;/li&gt;
&lt;li&gt;用display：table，上下还是原来的margin数；&lt;/li&gt;
&lt;li&gt;用display：flex，上下还是原来的margin数；&lt;/li&gt;
&lt;li&gt;用overflow：hidden，上下还是原来的margin数；
    
    </summary>
    
    
      <category term="CSS" scheme="wangsiyuan233.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>CSS(二)</title>
    <link href="wangsiyuan233.github.io/2018/04/13/7CSS-%E4%BA%8C/"/>
    <id>wangsiyuan233.github.io/2018/04/13/7CSS-二/</id>
    <published>2018-04-13T10:12:14.283Z</published>
    <updated>2018-03-27T07:25:07.759Z</updated>
    
    <content type="html"><![CDATA[<p><strong>这次主要更新userCard部分</strong></p><ol><li>CSS的两大bug：width 和 height;尽量不要写死。规避手段：max-width</li><li>.xxx {text-align: center;} ：让子代的内联元素居中排列，<strong>【内联元素居中要把t-a加在父级元素上】</strong></li><li>width 的默认值是 auto</li><li>display: inline: 设置 宽高 / margin-top/ margin-buttom 都是无效的<a id="more"></a></li><li>文档流是文档内元素流动的方向，内联元素是从左往右，块级元素是从上到下</li><li>line-height可以确定内联元素的高度，line-height = span =font-size</li><li>一个元素的高度是由内容的总和决定的（不是相等哦），浮动出来的元素不算在总高度里</li><li>英文默认是不会自动换行的，所有用英文填充测试的时候，用lorem吧！ 或者设置 word-break：break-all</li><li>非线性流动的时候可以考虑多一层div</li><li>给背景图遮罩：<code>&lt;div class=&quot;banner&quot;&gt;&lt;div class=&quot;mask&quot;&gt;&lt;/div&gt;&lt;/div&gt;</code></li><li>给背景图遮罩：<code>.banner{height: 515px;background-image: url(./picture/rs-cover.jpg);background-position: center center;background-size: cover;}</code> 和 <code>.banner .mask{height: 515px;background-color: rgba(0,0,0,0.8)}</code></li><li>回复出厂设置：*{margin:0; padding:0;}</li><li>看不清div：border：1px solid red;</li><li><strong>绝对定位：动的absolute,不动的relative</strong></li><li>奇形怪状：<code>https://css-tricks.com/examples/ShapesOfCSS/#yin-yang</code></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;这次主要更新userCard部分&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;CSS的两大bug：width 和 height;尽量不要写死。规避手段：max-width&lt;/li&gt;
&lt;li&gt;.xxx {text-align: center;} ：让子代的内联元素居中排列，&lt;strong&gt;【内联元素居中要把t-a加在父级元素上】&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;width 的默认值是 auto&lt;/li&gt;
&lt;li&gt;display: inline: 设置 宽高 / margin-top/ margin-buttom 都是无效的
    
    </summary>
    
    
      <category term="CSS" scheme="wangsiyuan233.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>CSS(一)</title>
    <link href="wangsiyuan233.github.io/2018/04/13/6CSS-%E4%B8%80/"/>
    <id>wangsiyuan233.github.io/2018/04/13/6CSS-一/</id>
    <published>2018-04-13T10:12:14.283Z</published>
    <updated>2018-03-27T07:24:41.995Z</updated>
    
    <content type="html"><![CDATA[<ol><li><code>http://htmlpreview.github.io/?</code> 拼接 <code>https://github.com/wangsiyuan233/MyResume/blob/master/cv.html</code>可以直接预览我的简历进度。重点是前面的：<code>http://htmlpreview.github.io/?</code><a id="more"></a></li><li>前端知识滚雪球，每18个月要学的东西就会翻倍（此处省略两行泪）</li><li>CSS的框架：SASS、LESS 和 PostCSS</li><li>所有的标签都默认的样式（<code>&lt;div&gt;</code> 和 <code>&lt;span&gt;</code> 没有）</li><li>CSS准备工作：body、a、float、clear等等。</li><li>字母的拼接，用两个<code>&lt;span&gt;</code>写在同一行，再用margin-left确定间距，否则中间的间距是默认的一个空格的距离。</li><li>浏览器兼容：IE8是底线，淘宝已经放弃低版本浏览器了</li><li>横条并列导航栏：<strong>子元素float,父元素clearfix。</strong></li><li><code>&lt;a&gt;</code> 和 <code>&lt;li&gt;</code>默认的样式不一样，li没有把a包裹起来，即它们的宽度和高度不一样，解决方法：a{display:block};</li><li>hover一个下划线： <code>a:hover{border-bottom: 3px solid #E8676B;}</code></li><li>但是此时鼠标悬挂时，附近的li就会抖动，因为新生成的下划线挤占了原本的位置，解决方法：<code>a{border-bottom: 3px solid transparent;}</code>（抢先生成一个透明的下划线）</li><li>hover和字体直接的距离靠padding实现</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;&lt;code&gt;http://htmlpreview.github.io/?&lt;/code&gt; 拼接 &lt;code&gt;https://github.com/wangsiyuan233/MyResume/blob/master/cv.html&lt;/code&gt;可以直接预览我的简历进度。重点是前面的：&lt;code&gt;http://htmlpreview.github.io/?&lt;/code&gt;
    
    </summary>
    
    
      <category term="CSS" scheme="wangsiyuan233.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>CSS(三)</title>
    <link href="wangsiyuan233.github.io/2018/04/13/8CSS-%E4%B8%89/"/>
    <id>wangsiyuan233.github.io/2018/04/13/8CSS-三/</id>
    <published>2018-04-13T10:12:14.283Z</published>
    <updated>2018-03-27T07:25:24.234Z</updated>
    
    <content type="html"><![CDATA[<p><strong>遮罩</strong><br><img src="https://i.imgur.com/BLg9f51.png" alt=""><br><img src="https://i.imgur.com/StiPZuO.png" alt=""></p><ol><li>高能：遮罩的插入图片是在CSS中完成的</li><li>background-image/background-position/background-size 保证背景图均匀平铺<a id="more"></a></li></ol><hr><p><strong>进度条</strong><br><img src="https://i.imgur.com/VvyvN34.png" alt=""><br><img src="https://i.imgur.com/qQ3bNlU.png" alt=""></p><ol><li>progress的height为100%时把progressbar撑起来，width为80%表示进度。</li><li>CSS里统一设置的进度可以靠在HTML里的sytle标签来调节</li></ol><hr><p><strong>任意朝向三角形</strong><br><img src="https://i.imgur.com/mvYDsxp.png" alt=""></p><p>先构造矩形，再transition<br><a href="http://https://css-tricks.com/examples/ShapesOfCSS" target="_blank" rel="external">CSS Tricks</a></p><hr><p><strong><code>&lt;li&gt;</code>元素横向排列有间距</strong></p><ol><li><code>&lt;nav&gt;&lt;ol&gt;&lt;li&gt;A&lt;/li&gt;&lt;li&gt;B&lt;/li&gt;&lt;li&gt;C&lt;/li&gt;&lt;/ol&gt;&lt;/nav&gt;</code></li><li>li元素左浮动，ol元素清除浮动；</li><li>去除li元素的默认样式（list-style:none）,给li元素添加marginig撑开；</li><li>实现li元素有高度排列(就要去爸爸那儿找)：<code>.ol{display: inline-block;vertical-align: top;}</code></li><li>实现ol元素居中（也要去ol的爸爸找）：<code>.nav{text-align: center;}</code></li></ol><hr><p><strong>多个<code>&lt;li&gt;</code>元素处理</strong><br>统一用margin撑开后，第一个li的左边和最后一个li的右边都有我们不需要的margin,这个时候就需要我们用耍赖皮大法了！！<br><code>.portfolia nav ol li:nth-child(3) {margin-right: 0;}</code><br>牛不牛逼！震不震撼！li:nth-child() 括号里面可以填 even(偶数)、odd（奇数）、数字等</p><hr><p><strong>Tips</strong></p><ul><li>圆角：border-shadow:3px;</li><li>温柔变：transition: box-shadow 0.4s;</li><li>box shadow generator</li><li>box-sizing: border-box;//区别于 content-box</li><li>cursor:pointer 手型</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;遮罩&lt;/strong&gt;&lt;br&gt;&lt;img src=&quot;https://i.imgur.com/BLg9f51.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://i.imgur.com/StiPZuO.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;高能：遮罩的插入图片是在CSS中完成的&lt;/li&gt;
&lt;li&gt;background-image/background-position/background-size 保证背景图均匀平铺
    
    </summary>
    
    
      <category term="CSS" scheme="wangsiyuan233.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>HTML(三)</title>
    <link href="wangsiyuan233.github.io/2018/04/13/5HTML-%E4%B8%89/"/>
    <id>wangsiyuan233.github.io/2018/04/13/5HTML-三/</id>
    <published>2018-04-13T10:12:14.268Z</published>
    <updated>2018-03-27T07:12:27.642Z</updated>
    
    <content type="html"><![CDATA[<h2 id="lt-iframe-gt-标签"><a href="#lt-iframe-gt-标签" class="headerlink" title="&lt;iframe&gt; 标签"></a><code>&lt;iframe&gt;</code> 标签</h2><p>用于嵌套页面，是一个可替换标签，默认值是50px X 100px（可以用CSS更改）（CSS的宽度和高度不是一个思路设置的，两个都写100%可能并不都是100%)</p><blockquote><p><code>&lt;iframe src=&quot;#&quot; name=&quot;xxx&quot;&gt;&lt;/iframe&gt;</code><br><code>&lt;a href=&quot;#&quot; target=&quot;xxx&quot;&gt;QQ&lt;/a&gt;</code><br><code>&lt;a href=&quot;#&quot; target=&quot;xxx&quot;&gt;百度&lt;/a&gt;</code></p></blockquote><a id="more"></a><ul><li>iframe的name属性（重点）：令第二个第三个的target等于xxx，就会在iframe里面打开QQ或百度。</li><li>iframe的src属性：写相对路径，跳转至制定页面</li></ul><h2 id="lt-a-gt-标签"><a href="#lt-a-gt-标签" class="headerlink" title="&lt;a&gt; 标签"></a><code>&lt;a&gt;</code> 标签</h2><ul><li><p>target有四个默认属性：<code>_blank</code>是大窗口新标签、<code>_top</code>是顶级、<code>_self</code>是在自己（iframe的小窗）、<code>_parent</code>是在自己（iframe的全窗）。</p><blockquote><p><code>&lt;a href=&quot;https://qq.com&quot; target=&quot;_blank&quot;&gt;blankQQ&lt;/a&gt;</code><br><code>&lt;a href=&quot;https://qq.com&quot; target=&quot;_top&quot;&gt;topQQ&lt;/a&gt;</code><br><code>&lt;a href=&quot;https://qq.com&quot; target=&quot;_self&quot;&gt;selfQQ&lt;/a&gt;</code><br><code>&lt;a href=&quot;https://qq.com&quot; target=&quot;_parent&quot;&gt;parentQQ&lt;/a&gt;</code></p></blockquote></li><li><p>download属性：<br><code>&lt;a href=&quot;https://qq.com&quot; download&gt;下载&lt;/a&gt;</code><br>此时不管是安装包还是网页，都会被下载。</p></li></ul><p>另一个办法是修改http响应层面：令content-type为application/octet-stream时，就会下载。（a标签跳转页面的时候是GET请求）</p><ul><li>href属性:</li></ul><ol><li>href=”qq.com” 时,会分析为一个文件然后报错，应该为<code>https://qq.com</code>.</li><li>href=”” 时，当前页面刷新</li><li>href=”#” 时，页面锚点变成#(只有锚点是不发请求的，锚点是页面内的跳转)</li><li>href=”/xx” 时，浏览器发起GET/HTTP/1.1请求,变成xx.html</li><li>href=”?name.wangsiyuan” 时，浏览器发起GET/HTTP/1.1请求，变成index.html?name.wangsiyuan</li><li>href=”javascript: alert(1);”,JS伪协议，点击链接的时候执行一段代码；在地址栏输入javascript: alert(1)可以执行这段代码；伪协议可以实现[点击之后没有任何动作的超链接标签]，满足特殊要求（可以简写为”javascript:;”）</li><li>href=”//qq.com”无协议链接时，浏览器会根据当前协议，补全无协议的协议；如果用file://浏览页面，就会访问到file://qq.com（这是一个不存在的路径）；尽量不这样使用，避免出错.</li></ol><h2 id="lt-form-gt-标签"><a href="#lt-form-gt-标签" class="headerlink" title="&lt;form&gt; 标签"></a><code>&lt;form&gt;</code> 标签</h2><ul><li>form标签跳转页面发起GET（会把参数直接放到查询框里面所以一般不用）（获取）和POST(主要)（上传）请求</li><li>form表单里一定要有提交按钮搭配使用</li><li>action属性指定请求路径</li><li>method属性指定请求动词（GET或POST）</li><li>请求的第四部分的实现可以靠form标签实现</li><li>target属性和a标签一模一样</li><li>form只有button时，type为button时，不能提交；button的type为空时，button自动升级为submit，就可以提交了；</li><li>form里面的input的type为button时，不能提交；input的type为submit时，可以提交</li><li>submit是唯一一个能确定form表单能不能提交的按钮</li></ul><h2 id="lt-input-gt-和-lt-button-gt-标签"><a href="#lt-input-gt-和-lt-button-gt-标签" class="headerlink" title="&lt;input&gt;和 &lt;button&gt;标签"></a><code>&lt;input&gt;</code>和 <code>&lt;button&gt;</code>标签</h2><ul><li><code>&lt;input type=&quot;submit&quot;&gt;</code>和<code>&lt;button type=&quot;&quot; name=&quot;button&quot; value=&quot;按钮上的字&quot;&gt;&lt;/button&gt;</code> 时， form标签可以被用户提交</li><li>如果input不加name,那么在表单提交时，input的值就不会出现在请求里</li><li>input没有子元素，button有子元素</li><li>input的type属性：</li></ul><ol><li>checkbox:小勾勾，一般会在<code>&lt;input type=&quot;checkbox&quot;&gt;</code>右边加个文字；怎样实现点击文字就能直接勾选框框呢？初级兄弟版（for和id必须成对出现）：<code>&lt;input type=&quot;checkbox&quot; id=&quot;xxx&quot;&gt;&lt;label for=&quot;xxx&quot;&gt;点我&lt;/label&gt;</code>；高级父子版（不需要for和id,name是必须的）：<code>&lt;label&gt;点我&lt;input type=&quot;text&quot; name=&quot;xxx&quot;&gt;&lt;/label&gt;</code>；name相同的时候仍然可以是多选框</li><li>radio：小圆点，<code>&lt;label for=&quot;&quot;&gt;&lt;input name=&quot;pickme&quot; type=&quot;radio&quot; value=&quot;我是对的&quot;&gt;对的&lt;/label&gt;</code> 和 <code>&lt;label for=&quot;&quot;&gt;&lt;input name=&quot;pickme&quot; type=&quot;radio&quot; value=&quot;我是错的&quot;&gt;错的&lt;/label&gt;</code>相同一个name时就成为了单选框</li><li>select: multiple时按着ctrl可以多选，-是空，3号不可选，4号是默认选项<blockquote><p><code>&lt;select name=&quot;group&quot; multiple&gt; &lt;option value=&quot;&quot;&gt;-&lt;/option&gt; &lt;option value=&quot;1&quot;&gt;一&lt;/option&gt; &lt;option value=&quot;2&quot;&gt;二&lt;/option&gt; &lt;option value=&quot;3&quot; disable&gt;三&lt;/option&gt; &lt;option value=&quot;4&quot; selected&gt;四&lt;/option&gt;&lt;/select&gt;</code></p></blockquote></li></ol><h2 id="lt-table-gt-标签"><a href="#lt-table-gt-标签" class="headerlink" title="&lt;table&gt; 标签"></a><code>&lt;table&gt;</code> 标签</h2><ul><li>用户选择多行文本就用textarea,默认的是可以改变大小的，我们需要固定防止bug，可以用CSS或者rows/cols来控制行列。<code>&lt;textarea name=&quot;name&quot; rows=&quot;8&quot; cols=&quot;80&quot;&gt;&lt;/textarea&gt;</code>一定要有name哦！</li><li>table里面的结构：（thead/tbody/tfoot三者的顺序变化会被浏览器自动纠正）</li></ul><p><img src="https://i.imgur.com/3B5SHXq.png" alt=""></p><ul><li>colgroup里的结构：</li></ul><p><img src="https://i.imgur.com/SGaUJ8c.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;lt-iframe-gt-标签&quot;&gt;&lt;a href=&quot;#lt-iframe-gt-标签&quot; class=&quot;headerlink&quot; title=&quot;&amp;lt;iframe&amp;gt; 标签&quot;&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt; 标签&lt;/h2&gt;&lt;p&gt;用于嵌套页面，是一个可替换标签，默认值是50px X 100px（可以用CSS更改）（CSS的宽度和高度不是一个思路设置的，两个都写100%可能并不都是100%)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;iframe src=&amp;quot;#&amp;quot; name=&amp;quot;xxx&amp;quot;&amp;gt;&amp;lt;/iframe&amp;gt;&lt;/code&gt;&lt;br&gt;&lt;code&gt;&amp;lt;a href=&amp;quot;#&amp;quot; target=&amp;quot;xxx&amp;quot;&amp;gt;QQ&amp;lt;/a&amp;gt;&lt;/code&gt;&lt;br&gt;&lt;code&gt;&amp;lt;a href=&amp;quot;#&amp;quot; target=&amp;quot;xxx&amp;quot;&amp;gt;百度&amp;lt;/a&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="HTML" scheme="wangsiyuan233.github.io/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>深入理解JavaScript--异步系列(2)</title>
    <link href="wangsiyuan233.github.io/2018/04/13/36%E5%BC%82%E6%AD%A5%E7%B3%BB%E5%88%97-2/"/>
    <id>wangsiyuan233.github.io/2018/04/13/36异步系列-2/</id>
    <published>2018-04-13T10:12:14.205Z</published>
    <updated>2018-04-01T09:25:36.928Z</updated>
    
    <content type="html"><![CDATA[<p>这一小节主讲ajax，可以看我之前的<a href="http://wangsiyuan233.cn/2018/02/28/AJAX%EF%BC%88一%EF%BC%89/" target="_blank" rel="external">封装一个ajax</a><br><a id="more"></a><br>实在是不想写Promise。。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这一小节主讲ajax，可以看我之前的&lt;a href=&quot;http://wangsiyuan233.cn/2018/02/28/AJAX%EF%BC%88一%EF%BC%89/&quot;&gt;封装一个ajax&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="异步" scheme="wangsiyuan233.github.io/tags/%E5%BC%82%E6%AD%A5/"/>
    
  </entry>
  
  <entry>
    <title>深入理解JavaScript--闭包系列(4)</title>
    <link href="wangsiyuan233.github.io/2018/04/13/31%E9%97%AD%E5%8C%85%E7%B3%BB%E5%88%97-4/"/>
    <id>wangsiyuan233.github.io/2018/04/13/31闭包系列-4/</id>
    <published>2018-04-13T10:12:14.158Z</published>
    <updated>2018-03-28T01:04:06.069Z</updated>
    
    <content type="html"><![CDATA[<p>终于讲到了正题，也是我们的最后一部分了！<br>大家打起精神耶耶耶！~<br>（图书馆关门之前我一定要整理完）</p><p>如果你看到这里还对闭包的知识有任何的疑问<br>请跟我默念这两种应用场景：<strong>函数作为返回值，函数作为参数传递</strong><br><a id="more"></a><br>1、<strong>【函数作为返回值】</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</div><div class="line"><span class="keyword">var</span> max = <span class="number">10</span>;</div><div class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params">x</span>)</span>&#123;</div><div class="line"><span class="keyword">if</span> ( x &gt; max) &#123;<span class="built_in">console</span>.log(x);&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> f1 = fn;</div><div class="line">f1(<span class="number">15</span>); <span class="comment">// 15</span></div></pre></td></tr></table></figure></p><p>2、<strong>【函数作为参数传递】</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> max = <span class="number">10</span>;</div><div class="line">fn = <span class="function"><span class="keyword">function</span> (<span class="params">x</span>)</span>&#123;</div><div class="line"><span class="keyword">if</span> ( x &gt; max) &#123;<span class="built_in">console</span>.log(x);&#125;</div><div class="line">&#125;</div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">f1</span>)</span>&#123;<span class="keyword">var</span> max = <span class="number">100</span>; f1(<span class="number">15</span>)&#125; )(fn); <span class="comment">// 15</span></div></pre></td></tr></table></figure></p><hr><p>在<a href="http://wangsiyuan233.cn/2018/03/26/闭包系列-1/" target="_blank" rel="external">闭包系列1</a>中我们提到当一个函数被调用完成之后，其执行上下文环境将被销毁，其中的变量也会被同时销毁。<br>但是在当时那篇文章中留了一个问号——有些情况下，函数调用完成之后，其执行上下文环境不会接着被销毁。这就是<strong>【闭包】</strong><br>（还是被赶出来了…）<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</div><div class="line"><span class="keyword">var</span> max = <span class="number">10</span>;</div><div class="line"></div><div class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params">x</span>)</span>&#123;</div><div class="line"><span class="keyword">if</span> ( x &gt; max) &#123;<span class="built_in">console</span>.log(x);&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> f2 = fn();</div><div class="line">max = <span class="number">100</span>;</div><div class="line">f2(<span class="number">15</span>);</div></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/ApNdBSw.png" alt=""><br>第一步：全局上下文环境时，max为undefined;<br>第二步：执行到第9行 <code>var f2 = fn()</code>，产生fn()执行上下文环境；<br>第三步：按理说第9行执行完了，fn()的执行上下文环境应该被销毁，【但是】，重点来了：因为执行fn()时，返回的是一个函数。函数的特别之处在于可以创建一个独立的作用域。而正巧合的是，返回的这个函数体中，还有一个自由变量max要引用fn作用域下的fn()上下文环境中的max;<br>因此，这个max不能被销毁，销毁了之后f1函数中的max就找不到值了;<br>因此，这里的fn()上下文环境不能被销毁，还依然存在与执行上下文栈中;<br>因此，执行到第10行时，全局上下文环境将变为活动状态，但是fn()上下文环境依然会在执行上下文栈中。另外，执行完第10行，全局上下文环境中的max被赋值为100。<br>第四步：第11行，执行f2(15)，即执行f1(15)，创建f1(15)上下文环境;<br>执行f1(15)时，max是自由变量，需要向创建f1函数的作用域中查找，找到了max的值为10;<br>这里的重点就在于，创建f1函数是在执行fn()时创建的。fn()早就执行结束了，但是fn()执行上下文环境还存在与栈中，因此f1(15)时，max可以查找到。如果fn()上下文环境销毁了，那么max就找不到了。<br>使用闭包会消耗更多的内存哦！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;终于讲到了正题，也是我们的最后一部分了！&lt;br&gt;大家打起精神耶耶耶！~&lt;br&gt;（图书馆关门之前我一定要整理完）&lt;/p&gt;
&lt;p&gt;如果你看到这里还对闭包的知识有任何的疑问&lt;br&gt;请跟我默念这两种应用场景：&lt;strong&gt;函数作为返回值，函数作为参数传递&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="闭包" scheme="wangsiyuan233.github.io/tags/%E9%97%AD%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>聊聊系列(2)--this</title>
    <link href="wangsiyuan233.github.io/2018/04/13/27%E8%81%8A%E8%81%8A%E7%B3%BB%E5%88%97-2/"/>
    <id>wangsiyuan233.github.io/2018/04/13/27聊聊系列-2/</id>
    <published>2018-04-13T10:12:14.111Z</published>
    <updated>2018-04-03T01:26:42.870Z</updated>
    
    <content type="html"><![CDATA[<p>先从 this 说起吧！<br>（这一天终于来了）</p><p>工作中我们总会面临：这个this指的是代码里的那一块呢?<br><a id="more"></a><br>结论：<strong>「this 就是 call 的第一个参数」</strong><br>1、ES5调用函数的三种方式<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//第一种</span></div><div class="line">func(p1, p2) 等价于</div><div class="line">func.call(<span class="literal">undefined</span>, p1, p2) <span class="comment">//this为window</span></div><div class="line"><span class="comment">//fn() 是 strict mode，this 就是 undefined (记牢！)</span></div><div class="line"></div><div class="line"><span class="comment">//第二种</span></div><div class="line">obj.child.method(p1, p2) 等价于</div><div class="line">obj.child.method.call(obj, p1, p2) <span class="comment">//this为obj</span></div><div class="line"></div><div class="line"><span class="comment">//第三种</span></div><div class="line">func.call(context, p1, p2)  <span class="comment">//this就为context</span></div></pre></td></tr></table></figure></p><p>2、ES6的箭头函数<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//箭头函数没有自己的this，它的this都指向外层</span></div><div class="line"><span class="comment">//箭头函数里面 this 跟外面的 this 的值一模一样</span></div><div class="line"></div><div class="line"><span class="comment">//箭头函数里面没有this，this外面的环境是window,全局又没有定义name属性，则为undefined</span></div><div class="line"><span class="keyword">var</span> person = &#123;</div><div class="line">  <span class="attr">name</span>: <span class="string">"test"</span>,</div><div class="line">  <span class="attr">shout</span>: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="keyword">this</span>.name) <span class="comment">//undefined</span></div><div class="line">&#125;</div><div class="line">person.shout();</div><div class="line"></div><div class="line"><span class="comment">//箭头函数里面没有this，this外面的属性是person，person.name为test</span></div><div class="line"><span class="keyword">var</span> person = &#123;</div><div class="line">  <span class="attr">name</span>: <span class="string">"test"</span>,</div><div class="line">  shout()&#123;</div><div class="line">    <span class="keyword">const</span> shout = <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="keyword">this</span>.name); <span class="comment">//test</span></div><div class="line">    <span class="keyword">return</span> shout;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">person.shout()();</div></pre></td></tr></table></figure></p><p>3、构造函数<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//普通函数</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>)</span>&#123;</div><div class="line"><span class="keyword">this</span>.name = <span class="string">'wangsiyuan'</span>;</div><div class="line"><span class="keyword">this</span>.position = <span class="string">'全栈工程师'</span>;</div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>) <span class="comment">//undefined会转换成window，最终是window</span></div><div class="line">&#125;</div><div class="line">Foo();  <span class="comment">//相当于Foo.call(undefined)</span></div><div class="line"></div><div class="line"><span class="comment">//new函数</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>)</span>&#123;</div><div class="line"><span class="keyword">this</span>.name = <span class="string">'wangsiyuan'</span>;</div><div class="line"><span class="keyword">this</span>.position = <span class="string">'全栈工程师'</span>;</div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>) <span class="comment">//Foo&#123;name:'wangsiyuan',position:'全栈工程师'&#125;</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> f1 = <span class="keyword">new</span> Foo();</div><div class="line"><span class="built_in">console</span>.log(f1.name) <span class="comment">// wangsiyuan</span></div><div class="line"><span class="built_in">console</span>.log(f1.position) <span class="comment">// 全栈工程师</span></div></pre></td></tr></table></figure></p><p>4、构造函数的prototype中this代表什么<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//不仅仅是构造函数的prototype，即便是在整个原型链中，this代表的也都是当前对象的值。</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>)</span>&#123;</div><div class="line"><span class="keyword">this</span>.name = <span class="string">'wangsiyuan'</span>;</div><div class="line"><span class="keyword">this</span>.position = <span class="string">'全栈工程师'</span>;</div><div class="line">&#125;</div><div class="line">Foo.prototype.getName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>) <span class="comment">//Foo&#123;name:'wangsiyuan',position:'全栈工程师'&#125;</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> f1 = <span class="keyword">new</span> Foo();</div><div class="line">f1.getName(); <span class="comment">//wangsiyuan</span></div><div class="line"><span class="comment">//在Fn.prototype.getName函数中，this指向的是f1对象。因此可以通过this.name获取f1.name的值</span></div></pre></td></tr></table></figure></p><p>5、函数作为对象的一个属性<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">  <span class="attr">foo</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> bar = obj.foo</div><div class="line">obj.foo() <span class="comment">// 转换为 obj.foo.call(obj)，this 就是 obj</span></div><div class="line">bar()  <span class="comment">// 转换为 bar.call(undefined),this 就是 undefined</span></div></pre></td></tr></table></figure></p><p>6、数组<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span> (<span class="params"></span>)</span>&#123; <span class="built_in">console</span>.log(<span class="keyword">this</span>) &#125;</div><div class="line"><span class="keyword">var</span> arr = [fn, fn2]</div><div class="line">arr[<span class="number">0</span>]() <span class="comment">// 这里面的 this 又是什么呢？</span></div><div class="line"></div><div class="line"><span class="comment">//转换思路</span></div><div class="line"><span class="comment">//arr[0]() </span></div><div class="line"><span class="comment">//假想为    arr.0()</span></div><div class="line"><span class="comment">//然后转换为 arr.0.call(arr)</span></div><div class="line"><span class="comment">//那么里面的 this 就是 arr 了嘻嘻</span></div></pre></td></tr></table></figure></p><p>7、Event Handler 中的 this<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">btn.addEventListener(<span class="string">'click'</span> ,<span class="function"><span class="keyword">function</span> <span class="title">handler</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>) <span class="comment">// 请问这里的 this 是什么</span></div><div class="line">&#125;)</div><div class="line"><span class="comment">//查文档后发现</span></div><div class="line"><span class="comment">// 当事件被触发时</span></div><div class="line">handler.call(event.currentTarget, event) </div><div class="line"><span class="comment">// 那么 this 是什么不言而喻</span></div></pre></td></tr></table></figure></p><p>8、jQuery Event Handler 中的 this<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ul.on(<span class="string">'click'</span>, <span class="string">'li'</span> , <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>)  <span class="comment">// 请问这里的 this 是什么</span></div><div class="line">&#125;) </div><div class="line"><span class="comment">//查文档后发现</span></div><div class="line"><span class="comment">//对于代理事件而言，this 则代表了与 selector 相匹配的元素。</span></div><div class="line"><span class="comment">//(注意，如果事件是从后代元素冒泡上来的话，那么 this 就有可能不等于 event.target。)若要使用 jQuery 的相关方法，可以根据当前元素创建一个 jQuery 对象，即使用 $(this)。</span></div></pre></td></tr></table></figure></p><p>9、如何强制指定 this 的值<br>自己写apply/bind/call就行了<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//用call或apply</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">handlerWrapper</span>(<span class="params">event</span>)</span>&#123;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">handler</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>) <span class="comment">// 请问这里的 this 是什么</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  handler.call(&#123;<span class="attr">name</span>:<span class="string">'wangsiyuan'</span>&#125;, event)</div><div class="line">&#125;</div><div class="line">btn.addEventListener(<span class="string">'click'</span>, handlerWrapper)</div></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//用bind也差不了多少</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">handler</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>) <span class="comment">// 请问这里的 this 是什么</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> handlerWrapper = handler.bind(&#123;<span class="attr">name</span>:<span class="string">'wangsiyuan'</span>&#125;)</div><div class="line">btn.addEventListener(<span class="string">'click'</span>, handlerWrapper)</div><div class="line"></div><div class="line"><span class="comment">//变身面试套路题</span></div><div class="line">btn.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>) <span class="comment">// 请问这里的 this 是什么</span></div><div class="line">&#125;.bind(&#123;<span class="attr">name</span>:<span class="string">'wangsiyuan'</span>&#125;))</div></pre></td></tr></table></figure><p>10、立即执行函数<br>每个函数只有一个this<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myObject = &#123;</div><div class="line"><span class="attr">foo</span>: <span class="string">"bar"</span>;</div><div class="line">func: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"><span class="keyword">var</span> self = <span class="keyword">this</span>; <span class="comment">//这里的this并不是下面立即执行函数的this，它是中函数的this</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">"outer func: this.foo ="</span> + <span class="keyword">this</span>.foo) <span class="comment">// bar</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">"outer func: self.foo ="</span> + self.foo) <span class="comment">// bar</span></div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"><span class="built_in">console</span>.log(<span class="string">"inner func: this.foo ="</span> + <span class="keyword">this</span>.foo) <span class="comment">// undefined</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">"inner func: self.foo ="</span> + self.foo) <span class="comment">// bar</span></div><div class="line">&#125;());</div><div class="line">&#125;</div><div class="line">&#125;;</div><div class="line">myObject.func();</div></pre></td></tr></table></figure></p><p>结论：<strong>「this 就是 call 的第一个参数」</strong><br>记住了吗？</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;先从 this 说起吧！&lt;br&gt;（这一天终于来了）&lt;/p&gt;
&lt;p&gt;工作中我们总会面临：这个this指的是代码里的那一块呢?&lt;br&gt;
    
    </summary>
    
    
      <category term="聊聊系列" scheme="wangsiyuan233.github.io/tags/%E8%81%8A%E8%81%8A%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>聊聊系列(1)--new函数</title>
    <link href="wangsiyuan233.github.io/2018/04/13/26%E8%81%8A%E8%81%8A%E7%B3%BB%E5%88%97-1/"/>
    <id>wangsiyuan233.github.io/2018/04/13/26聊聊系列-1/</id>
    <published>2018-04-13T10:12:14.111Z</published>
    <updated>2018-03-27T07:30:17.664Z</updated>
    
    <content type="html"><![CDATA[<p>原型链+继承告一段落，我们接下来开始闭包的部分。<br>当然不会直接开始闭包呀<br>今天想跟大家聊聊 new函数</p><p><a href="http://wangsiyuan233.cn/JS函数.html" target="_blank" rel="external">声明函数的五种方式</a><br>废话不多说 <strong>当我们在new一个函数的时候我们在干嘛？</strong></p><p>以【为程序员哥哥们批量制造女友】为例<br><a id="more"></a><br>1.1、创造理想型<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> 女孩儿 = &#123;</div><div class="line">  <span class="attr">ID</span>: <span class="number">001</span>, <span class="comment">// 用于区分不同女孩儿</span></div><div class="line">  类型:<span class="string">"甜美可人"</span>,</div><div class="line">  撒娇:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">/*撒娇的代码*/</span>&#125;,</div><div class="line">  攻击:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">/*受死吧直男*/</span>   &#125;,</div><div class="line">  抛弃:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">/**/</span>&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">梦工厂.制造(女孩儿)</div></pre></td></tr></table></figure></p><p>1.2、这样的女孩给我1000个<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> 女孩们 = [];</div><div class="line"><span class="keyword">var</span> 女孩儿</div><div class="line"><span class="keyword">for</span> ( <span class="keyword">var</span> i = <span class="number">0</span>, i&lt;<span class="number">1000</span>, i++)&#123;</div><div class="line"><span class="keyword">var</span> 女孩儿 = &#123;</div><div class="line">  <span class="attr">ID</span>: <span class="number">001</span>, <span class="comment">// 用于区分不同女孩儿</span></div><div class="line">  类型:<span class="string">"甜美可人"</span>,</div><div class="line">  撒娇:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">/*撒娇的代码*/</span>&#125;,</div><div class="line">  攻击:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">/*受死吧直男*/</span>   &#125;,</div><div class="line">  抛弃:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">/*展开新生活*/</span>&#125;</div><div class="line"> &#125;</div><div class="line"> 女孩们.push(女孩儿)</div><div class="line">&#125;</div><div class="line">梦工厂.制造(女孩儿)</div></pre></td></tr></table></figure></p><p>咦，为什么不能这样呢？<br>因为内存浪费了呀！<br>每个女孩的撒娇、攻击和抛弃都是一样的啊（划掉）<br>那我们可以把这些共同的属性写在同一个函数里，调用1000次就行了呀<br>ID和女孩儿的类型这些不同的地方再单独写出来循环<br>根据上一节<a href="http://wangsiyuan233.cn/原型闭包系列-4.html" target="_blank" rel="external">原型链</a>的知识<br>我们可以把 撒娇+攻击+抛弃 放入[女孩原型]中，然后让[女孩儿]通过 <code>__proto__</code>指向[女孩原型]<br>1.3、省空间<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> 女孩儿 = &#123;</div><div class="line">  <span class="attr">ID</span>: <span class="number">001</span>, <span class="comment">// 用于区分不同女孩儿</span></div><div class="line">  类型:<span class="string">"甜美可人"</span>,</div><div class="line">  撒娇:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">/*撒娇的代码*/</span>&#125;,</div><div class="line">  攻击:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">/*受死吧直男*/</span>   &#125;,</div><div class="line">  抛弃:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">/*展开新生活*/</span>&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> 女孩们 = [];</div><div class="line"><span class="keyword">var</span> 女孩儿</div><div class="line"><span class="keyword">for</span> ( <span class="keyword">var</span> i = <span class="number">0</span>, i&lt;<span class="number">1000</span>, i++)&#123;</div><div class="line">女孩儿 = &#123;</div><div class="line">ID：i;</div><div class="line">类型:<span class="string">"甜美可人"</span></div><div class="line">&#125;</div><div class="line"><span class="comment">/*实际工作中不要这样写，因为 __proto__ 不是标准属性*/</span></div><div class="line">女孩儿.__proto__ = 女孩原型</div><div class="line">女孩们.push(女孩儿)</div><div class="line">&#125;</div><div class="line">梦工厂.制造(女孩儿)</div></pre></td></tr></table></figure></p><p>1.4、优化<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> 女孩儿（<span class="title">ID</span>）</span>&#123;</div><div class="line"><span class="keyword">var</span> 临时对象 = &#123;&#125;</div><div class="line">临时对象.__proto__ = 女孩儿.原型</div><div class="line">临时对象.ID = ID</div><div class="line">临时对象.类型 = <span class="string">"甜美可人"</span></div><div class="line"></div><div class="line"><span class="keyword">return</span> 临时对象</div><div class="line">&#125;</div><div class="line">女孩儿.原型 = &#123;</div><div class="line">撒娇:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">/*撒娇的代码*/</span>&#125;,</div><div class="line">攻击:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">/*受死吧直男*/</span>   &#125;,</div><div class="line">抛弃:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">/*展开新生活*/</span>&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//保存为 我的女孩儿.js</span></div><div class="line"></div><div class="line"><span class="comment">//引用的时候</span></div><div class="line"><span class="keyword">var</span> 女孩们 = [];</div><div class="line"><span class="keyword">for</span> ( <span class="keyword">var</span> i = <span class="number">0</span>, i&lt;<span class="number">1000</span>, i++)&#123;</div><div class="line">女孩们.push(女孩儿(i))</div><div class="line">&#125;</div><div class="line">梦工厂.制造(女孩儿)</div></pre></td></tr></table></figure></p><p>2.1、JS之父给了我们new这个’密码’<br>只要你在女孩儿前面使用 new 关键字，那么可以少做四件事情：</p><p>不用创建临时对象，因为 new 会帮你做（你使用「this」就可以访问到临时对象）；<br>不用绑定原型，因为 new 会帮你做（new 为了知道原型在哪，所以指定原型的名字为 prototype）；<br>不用 return 临时对象，因为 new 会帮你做；<br>不要给原型想名字了，因为 new 指定名字为 prototype。<br><img src="https://i.imgur.com/1BjUy3y.png" alt=""><br>2.2、用 new 重写一遍<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> 女孩儿（<span class="title">ID</span>）</span>&#123;</div><div class="line"><span class="keyword">this</span>.ID = ID</div><div class="line"><span class="keyword">this</span>.类型 = <span class="string">'甜蜜可人'</span></div><div class="line">&#125;</div><div class="line">女孩儿.prototype = &#123;</div><div class="line">撒娇:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">/*撒娇的代码*/</span>&#125;,</div><div class="line">攻击:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">/*受死吧直男*/</span>   &#125;,</div><div class="line">抛弃:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">/*展开新生活*/</span>&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//保存为 我的女孩儿.js</span></div><div class="line"></div><div class="line"><span class="comment">//引用的时候</span></div><div class="line"><span class="keyword">var</span> 女孩们 = [];</div><div class="line"><span class="keyword">for</span> ( <span class="keyword">var</span> i = <span class="number">0</span>, i&lt;<span class="number">1000</span>, i++)&#123;</div><div class="line">女孩们.push( <span class="keyword">new</span> 女孩儿(i)) <span class="comment">//新增了一个new</span></div><div class="line">&#125;</div><div class="line">梦工厂.制造(女孩儿)</div></pre></td></tr></table></figure></p><p>这就是所谓的 <strong>语法糖</strong><br>2.3、值得注意的是：new 操作为了记录「临时对象是由哪个函数创建的」，所以预先给「女孩儿.prototype」加了一个 constructor 属性<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">女孩儿.prototype = &#123;</div><div class="line">  <span class="attr">constructor</span>: 女孩儿</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>当然，constructor 是可以删除或修改的<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">女孩儿.prototype = &#123;</div><div class="line">    <span class="attr">constructor</span>: 女孩儿</div><div class="line">    撒娇:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">/*撒娇的代码*/</span>&#125;,</div><div class="line">攻击:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">/*受死吧直男*/</span>   &#125;,</div><div class="line">抛弃:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">/*展开新生活*/</span>&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;原型链+继承告一段落，我们接下来开始闭包的部分。&lt;br&gt;当然不会直接开始闭包呀&lt;br&gt;今天想跟大家聊聊 new函数&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://wangsiyuan233.cn/JS函数.html&quot;&gt;声明函数的五种方式&lt;/a&gt;&lt;br&gt;废话不多说 &lt;strong&gt;当我们在new一个函数的时候我们在干嘛？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;以【为程序员哥哥们批量制造女友】为例&lt;br&gt;
    
    </summary>
    
    
      <category term="聊聊系列" scheme="wangsiyuan233.github.io/tags/%E8%81%8A%E8%81%8A%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>深入理解JavaScript--原型系列(4)</title>
    <link href="wangsiyuan233.github.io/2018/04/13/25%E5%8E%9F%E5%9E%8B%E7%B3%BB%E5%88%97-4/"/>
    <id>wangsiyuan233.github.io/2018/04/13/25原型系列-4/</id>
    <published>2018-04-13T10:12:14.096Z</published>
    <updated>2018-03-27T07:33:57.959Z</updated>
    
    <content type="html"><![CDATA[<p>哈哈被骗啦(…)还没轮到原型链<br>这一小节我们将引出一个中介概念 <code>instanceof</code><br><a id="more"></a></p><p>对于值类型，我们可以通过typeof判断，string/number/boolean都很清楚，但是typeof在判断到引用类型的时候，返回值只有object/function，我们不知道它到底是一个object对象，还是数组，还是new Number等等。这个时候就需要用到instanceof。</p><p>instanceof有一个判断准则是：沿着对象的<code>__proto__</code> 和 函数的<code>prototype</code>的两端同时寻找，如果两条线能找到同一个引用，即同一个对象，那么就返回true。如果找到终点还未重合，则返回false。<br><img src="https://i.imgur.com/r7M68Fc.png" alt=""><br>由上面这张图可以得出以下不着调的结论：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Function</span> Foo()&#123;&#125;</div><div class="line"><span class="keyword">var</span> f1 = <span class="keyword">new</span> Foo();</div><div class="line"><span class="built_in">console</span>.log(f1 <span class="keyword">instanceof</span> Foo); <span class="comment">//true</span></div><div class="line"><span class="built_in">console</span>.log(f1 <span class="keyword">instanceof</span> <span class="built_in">Object</span>); <span class="comment">//true</span></div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span> <span class="keyword">instanceof</span> <span class="built_in">Function</span>); <span class="comment">//true</span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Function</span> <span class="keyword">instanceof</span> <span class="built_in">Object</span>); <span class="comment">//true</span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Function</span> <span class="keyword">instanceof</span> <span class="built_in">Function</span>); <span class="comment">//true</span></div></pre></td></tr></table></figure></p><p>所以这些乱七八糟的关系图是为什么呢？？？<br>原来，instanceof表示的就是一种继承关系，或者原型链的结构。</p><hr><p>访问一个对象的属性时，先在基本属性中查找，如果没有，再沿着<code>__proto__</code>这条链向上找，这就是原型链。</p><p>那么我们在实际应用中如何区分一个属性到底是基本的还是从原型中找到的呢？大家可能都知道答案了——hasOwnProperty，特别是在for…in…循环中，一定要注意。</p><p>由于所有的对象的原型链都会找到Object.prototype，因此所有的对象都会有Object.prototype的方法（hasOwnProperty）。这就是所谓的“继承”。</p><hr><p>沿着<code>__proto__</code>向上找就是<strong>原型链</strong>；<br>最后把Object.prototype里的hasOwnProperty（或者Function.prototype里的call）拿来直接用，就是<strong>继承</strong>。</p><p>这意味着，创建的对象可以增加属性，继承的方法不合适也可以修改。</p><p>可以看看我以前总结的 <a href="wangsiyuan233.cn/2018/03/08/原型链实例/">原型链实例</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;哈哈被骗啦(…)还没轮到原型链&lt;br&gt;这一小节我们将引出一个中介概念 &lt;code&gt;instanceof&lt;/code&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="原型链" scheme="wangsiyuan233.github.io/tags/%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title>深入理解JavaScript--原型系列(3)</title>
    <link href="wangsiyuan233.github.io/2018/04/13/24%E5%8E%9F%E5%9E%8B%E7%B3%BB%E5%88%97-3/"/>
    <id>wangsiyuan233.github.io/2018/04/13/24原型系列-3/</id>
    <published>2018-04-13T10:12:14.080Z</published>
    <updated>2018-03-27T07:33:49.641Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/7BYXesw.png" alt=""><br>由上面这张图可以一层层得出以下的结论1：<br><a id="more"></a><br>1.<code>f1.__proto__ === Foo.prototype</code><br>2.<code>Foo.prototype.__proto__ === Object.prototype</code><br>3.<code>Object.prototype.__proto__ === null</code>（牢记）<br>有了以上的知识储备，我有一个大胆的想法：函数也是对象，那函数有<code>__proto__</code>吗？它的值有等于什么呢？<br>答案是肯定的，函数这个对象(…)是被FFFFFFunction函数创建的。<br>即 ———&gt;&gt;&gt; <code>Object.__proto__ === Function.prototype</code><br><img src="https://i.imgur.com/vAwUmea.png" alt=""><br>由上面这张图可以一层层得出以下的结论2：<br>1.自定义函数<code>Foo.__proto__ === Function.prototype</code><br>2.<code>Object.__proto__ === Function.prototype</code><br>3.<code>Function.__proto__ === Function.prototype</code>(…)<br>竟然形成了一个环！！<br><img src="https://i.imgur.com/E0G47Yo.png" alt=""><br>由上面这张图可以得出以下的结论3：<br><code>Function.prototype.__proto__ === Object.prototype</code><br>（这个式子在结论1里出现过了哦，一样的形式呢）</p><hr><p>是不是有点乱呢？<br>梳理一遍吧~<br>-&gt;&gt;首先我们利用值类型和引用类型，得出了一个结论：一切引用类型都是对象；<br>-&gt;&gt;第二步知道了对象都是由创建他的函数构建的；<br>此时我们有点发晕了，函数和对象傻傻捋不清楚；<br>-&gt;&gt;第三步引入了prototype这个属性，我们知道了一个[对象]的隐性属性指向(创建这个对象的)函数的显性属性；<br>接着我们发现：一个[函数]的隐性属性指向(创建这个函数的)FFFFFFunction函数的显性属性（<code>Foo.__proto__ === Function.prototype</code>）<br>-&gt;&gt;最后，由于Function.prototype指向的对象也是一个普通的被Object创建的对象，我们得到<code>Function.prototype.__proto__ === Object.prototype</code></p><hr><p>对的哦，最后形成了一个环！嘿嘿嘿，老司机肯定知道我接下来要介绍的重要概念————原型链 啦！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.imgur.com/7BYXesw.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;由上面这张图可以一层层得出以下的结论1：&lt;br&gt;
    
    </summary>
    
    
      <category term="原型链" scheme="wangsiyuan233.github.io/tags/%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title>深入理解JavaScript--原型系列(2)</title>
    <link href="wangsiyuan233.github.io/2018/04/13/23%E5%8E%9F%E5%9E%8B%E7%B3%BB%E5%88%97-2/"/>
    <id>wangsiyuan233.github.io/2018/04/13/23原型系列-2/</id>
    <published>2018-04-13T10:12:14.080Z</published>
    <updated>2018-03-27T08:21:03.543Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://wangsiyuan233.cn/2018/03/25/原型系列-1/" target="_blank" rel="external">接上节</a><br>数组、函数和对象这三者的关系非常有趣<br>数组可以看做是对象的一个子集；<br>但是函数和对象却类似于鸡和蛋的关系。<br>一起来看看吧~<br><a id="more"></a><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//粗一看对象好像不需要函数来创建呀</span></div><div class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">a</span>: <span class="number">10</span>, <span class="attr">b</span>: <span class="number">20</span> &#125;;</div><div class="line"><span class="keyword">var</span> arr = [<span class="number">5</span>, <span class="string">'x'</span>, <span class="literal">true</span>];</div><div class="line"></div><div class="line"><span class="comment">//其实这才是上面两个的对象的真面目</span></div><div class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line">obj.a = <span class="number">10</span>;</div><div class="line">obj.b = <span class="number">20</span>;</div><div class="line"></div><div class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>();</div><div class="line">arr[<span class="number">0</span>] = <span class="number">5</span>;</div><div class="line">arr[<span class="number">1</span>] = <span class="string">'x'</span>;</div><div class="line">arr[<span class="number">2</span>] = <span class="literal">true</span>;</div><div class="line"></div><div class="line"><span class="comment">//Object和Array也都是function</span></div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> (<span class="built_in">Object</span>));  <span class="comment">// function</span></div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> (<span class="built_in">Array</span>));  <span class="comment">// function</span></div></pre></td></tr></table></figure></p><h2 id="结论：对象都是通过函数创建的"><a href="#结论：对象都是通过函数创建的" class="headerlink" title="结论：对象都是通过函数创建的"></a>结论：<strong>对象都是通过函数创建的</strong></h2><p>在上一节我们说了：一切（引用类型）都是对象；<br>现在的结论是：对象都是通过函数创建的；<br>有没有被绕晕呢？</p><hr><p>以前我们说过，函数创建了对象，（函数是属性的集合），我们可以给函数定制属于自己的属性，那么函数有哪些属性呢？说到这儿，不得不提我们大名鼎鼎的 prototype 啦！<br>每个函数都有一个属性叫做prototype；<br>prototype的属性值是一个对象（属性的集合）；<br>prototype默认的仅有的属性叫constructor，指向这个函数本身。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//自定义Fn的属性</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fn</span>(<span class="params"></span>) </span>&#123; &#125;</div><div class="line">Fn.prototype.name = <span class="string">'wangsiyuan'</span>;</div><div class="line">Fn.prototype.getPosition = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line"><span class="keyword">return</span> 全栈工程师;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fn</span>(<span class="params"></span>) </span>&#123; &#125;</div><div class="line">Fn.prototype.name = <span class="string">'wangsiyuan'</span>;</div><div class="line">Fn.prototype.getPosition = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line"><span class="keyword">return</span> 全栈工程师;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> fn = <span class="keyword">new</span> Fn();</div><div class="line"><span class="built_in">console</span>.log(fn.name);</div><div class="line"><span class="built_in">console</span>.log(fn.getPosition());</div></pre></td></tr></table></figure><p>fn对象是通过Fn函数new出来的;<br>即 ———&gt;&gt;&gt; 对象都是通过函数创建出来的;<br>即 ———&gt;&gt;&gt; fn对象可以调用Fn.prototype中的属性；<br>因为 ———&gt;&gt;&gt; 每个对象都有一个“隐式原型”<code>__proto__</code>，它指向创建该对象的函数的prototype；<br>即 ———&gt;&gt;&gt; <code>fn.__proto__ === Fn.prototype.</code><br>其实prototype的推导过程并没有那么可怕嘛！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://wangsiyuan233.cn/2018/03/25/原型系列-1/&quot;&gt;接上节&lt;/a&gt;&lt;br&gt;数组、函数和对象这三者的关系非常有趣&lt;br&gt;数组可以看做是对象的一个子集；&lt;br&gt;但是函数和对象却类似于鸡和蛋的关系。&lt;br&gt;一起来看看吧~&lt;br&gt;
    
    </summary>
    
    
      <category term="原型链" scheme="wangsiyuan233.github.io/tags/%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title>深入理解JavaScript--原型系列(1)</title>
    <link href="wangsiyuan233.github.io/2018/04/13/22%E5%8E%9F%E5%9E%8B%E7%B3%BB%E5%88%97-1/"/>
    <id>wangsiyuan233.github.io/2018/04/13/22原型系列-1/</id>
    <published>2018-04-13T10:12:14.065Z</published>
    <updated>2018-03-27T07:33:24.606Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>写在前面：对学习前端70天的一个总结，说是“深入”其实有点不好意思，有什么问题一起探讨呀</p></blockquote><p>JavaScript中有一句“一切皆是对象”，这句话当然是不严谨的啦，让我们一起来看看怎么回事吧！<br><a id="more"></a><br><strong>一、判断对象</strong><br>从最开始学习JS，我们就学会了判断值类型和引用类型：<br>值类型：number、string、null、undefined、boolean<br>引用类型：函数、数组、对象这些都是对象<br>（值得注意的是，当我们用typeof判断null时，浏览器会返回object，这是因为在js中，底层是用二进制编码的，如果前三位是000的话,用typeof就会返回object,而null的编码是全部都是0，当然会被返回object ,这是js的一个bug而已。）</p><blockquote><p>1.1值类型：变量的交换等于在一个新的地方按照连锁店的规范标准（统一店面理解为相同的变量内容）新开一个分店，这样新开的店与其它旧店互不相关、各自运营。<br>1.2引用类型：变量的交换等同于把现有一间店的钥匙（变量引用地址）复制一把给了另外一个老板，此时两个老板同时管理一间店，两个老板的行为都有可能对一间店的运营造成影响。<br>2.1值类型的值是一经确定就不可变的；基本类型的比较是值的比较；基本类型的变量存放在栈。<br>2.2引用类型的值是可变的；引用类型的比较是引用的比较；引用类型的值是同时保存在栈和堆中的对象。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//值类型的比较</span></div><div class="line"><span class="keyword">var</span> person1 = <span class="string">'&#123;&#125;'</span>;</div><div class="line"><span class="keyword">var</span> person2 = <span class="string">'&#123;&#125;'</span>;</div><div class="line"><span class="built_in">console</span>.log(person1 == person2); <span class="comment">// true</span></div></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//引用类型的比较</span></div><div class="line"><span class="keyword">var</span> person1 = &#123;&#125;;</div><div class="line"><span class="keyword">var</span> person2 = &#123;&#125;;</div><div class="line"><span class="built_in">console</span>.log(person1 == person2); <span class="comment">// false</span></div></pre></td></tr></table></figure><p><strong>二、定义对象</strong><br>粗粗的将这些变量划分为非对象和对象，我们不难发现，（和JAVA与C#对比），JS中的“对象”非常的随意：<br>函数是对象，数组是对象，对象也是对象；<br>对象里只有属性，没有方法（方法也是一种属性，以键值对的形式出现）；<br>对象可以扩展任意属性。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//举例说明 对象中自定义属性</span></div><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line"><span class="attr">a</span> : <span class="number">10</span>,</div><div class="line"><span class="attr">b</span> : <span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;alert (x+<span class="keyword">this</span>.a);&#125;,</div><div class="line"><span class="attr">c</span> : &#123;<span class="attr">name</span>: <span class="string">'wangsiyuan'</span>，position: <span class="string">'全栈工程师'</span>&#125;</div><div class="line">&#125;；</div><div class="line"><span class="comment">//a、b、c都是obj的属性，同时c还是一个对象，它有着name和position两个属性</span></div></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//举例说明 函数中自定义属性</span></div><div class="line"><span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    alert(<span class="number">100</span>);</div><div class="line">&#125;;</div><div class="line">fn.a = <span class="number">10</span>;</div><div class="line">fn.b = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    alert(<span class="number">123</span>);</div><div class="line">&#125;;</div><div class="line">fn.c = &#123;</div><div class="line"><span class="attr">name</span>: <span class="string">'wangsiyuan'</span>，</div><div class="line">position: <span class="string">'全栈工程师'</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">//$变量也是一个函数（JQ）</span></div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> $) <span class="comment">//function</span></div></pre></td></tr></table></figure><p>至此，我们可以回答开头的问题了：<br><strong>一切（引用类型）都是对象，对象是属性的集合。</strong></p><hr><p>我们在第一小节里确定了[对象]的范围，请问：函数、数组和对象，这三者的关系是怎样的呢？</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;写在前面：对学习前端70天的一个总结，说是“深入”其实有点不好意思，有什么问题一起探讨呀&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;JavaScript中有一句“一切皆是对象”，这句话当然是不严谨的啦，让我们一起来看看怎么回事吧！&lt;br&gt;
    
    </summary>
    
    
      <category term="原型链" scheme="wangsiyuan233.github.io/tags/%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title>HTML知识梳理</title>
    <link href="wangsiyuan233.github.io/2018/04/13/21HTML%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/"/>
    <id>wangsiyuan233.github.io/2018/04/13/21HTML知识梳理/</id>
    <published>2018-04-13T10:12:14.049Z</published>
    <updated>2018-03-27T07:14:49.146Z</updated>
    
    <content type="html"><![CDATA[<p>一、☆☆☆如何理解 HTML 语义化。<br>语义化，指对文本内容的结构化（内容语义化），选择合乎语义的标签（代码语义化），便于开发者阅读，维护和写出更优雅的代码的同时，让浏览器的爬虫和辅助技术更好的解析。<br><a id="more"></a><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">//错误示范</div><div class="line">1、blockquote：一些人通过使用<span class="tag">&lt;<span class="name">blockquote</span>&gt;</span>标签使文本达到缩进的目的，因为引用默认会进行文本缩进。如果你仅仅是想使文本达到缩进目的，而文本自身并非引用，那么就用CSS margin来代替；</div><div class="line">2、p：一些开发者用<span class="tag">&lt;<span class="name">p</span>&gt;</span>&amp;nbsp;<span class="tag">&lt;/<span class="name">p</span>&gt;</span>来为标签自检增加额外的空白段落，这里应该使用CSS margin/padding来实现；</div><div class="line">3、ul：一些开发者往<span class="tag">&lt;<span class="name">ul</span>&gt;</span>中添加文本来达到文本缩进的目的，这种做法即不符合语义化要求，同样也是非法的HTML实践。<span class="tag">&lt;<span class="name">ul</span>&gt;</span>标签中只能有<span class="tag">&lt;<span class="name">li</span>&gt;</span>标签；</div><div class="line">4、<span class="tag">&lt;<span class="name">h1</span>&gt;</span>~<span class="tag">&lt;<span class="name">h6</span>&gt;</span>：该标签可以使文本字体变大，变粗，但如果文本并非是标题，应该使用CSS font-weight font-size。</div><div class="line"></div><div class="line">//注意下面这些标签，不要变成<span class="tag">&lt;<span class="name">div</span>&gt;</span>狂魔了哦</div><div class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span>、<span class="tag">&lt;<span class="name">nav</span>&gt;</span>、<span class="tag">&lt;<span class="name">main</span>&gt;</span>、<span class="tag">&lt;<span class="name">aside</span>&gt;</span>、<span class="tag">&lt;<span class="name">article</span>&gt;</span>、<span class="tag">&lt;<span class="name">section</span>&gt;</span></div></pre></td></tr></table></figure></p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">//最开始是 PHP 后端写 HTML，不会 CSS，于是就用 table 来布局。table 使用展示表格的。严重违反了 HTML 语义化。</div><div class="line"> 后来有了专门的写 CSS 的前端，他们会使用 DIV + CSS 布局，主要是用 float 和绝对定位布局。稍微符合了 HTML 语义化。</div><div class="line"> 再后来，前端专业化，知道 HTML 的各个标签的用法，于是会使用恰当的标签来展示内容，而不是傻傻的全用 div，会尽量使用 h1、ul、p、main、header 等标签</div><div class="line"> 语义化的好处是已读、有利于SEO等。</div></pre></td></tr></table></figure><p>二、meta viewport 是什么，有什么用？<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0"</span>&gt;</span></div><div class="line">//控制页面在移动端不要缩小显示。</div><div class="line">//一开始，所有页面都是给PC准备的，乔布斯推出 iPhone 3GS，页面是不适应手机屏幕的，所以乔布斯的工程师想了一个办法，默认把手机模拟成 980px，页面缩小。</div><div class="line">后来，智能手机普及，这个功能在部分网站不需要了，所以我们就用 meta:vp 让手机不要缩小我的网页。</div></pre></td></tr></table></figure></p><p>三、canvas 元素是什么<br><code>&lt;canvas&gt;</code> 是 HTML5 新增的元素，可用于通过使用JavaScript中的脚本来绘制图形。例如，它可以用于绘制图形，制作照片，创建动画，甚至可以进行实时视频处理或渲染。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"canvas"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></div></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">'canvas'</span>);</div><div class="line"><span class="keyword">var</span> ctx = canvas.getContext(<span class="string">'2d'</span>);</div><div class="line"></div><div class="line">ctx.fillStyle = <span class="string">'green'</span>;</div><div class="line">ctx.fillRect(<span class="number">10</span>, <span class="number">10</span>, <span class="number">100</span>, <span class="number">100</span>);</div><div class="line"><span class="comment">//顶点在（10,10）边长为100的绿色正方形</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一、☆☆☆如何理解 HTML 语义化。&lt;br&gt;语义化，指对文本内容的结构化（内容语义化），选择合乎语义的标签（代码语义化），便于开发者阅读，维护和写出更优雅的代码的同时，让浏览器的爬虫和辅助技术更好的解析。&lt;br&gt;
    
    </summary>
    
    
      <category term="HTML" scheme="wangsiyuan233.github.io/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>初识Node.js</title>
    <link href="wangsiyuan233.github.io/2018/04/13/20%E5%88%9D%E8%AF%86Node-js/"/>
    <id>wangsiyuan233.github.io/2018/04/13/20初识Node-js/</id>
    <published>2018-04-13T10:12:14.033Z</published>
    <updated>2018-03-27T07:17:55.696Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Node.js 久仰久仰<br>自己动手搭建一个服务器 server.js</p></blockquote><h2 id="一、server-js-1-0"><a href="#一、server-js-1-0" class="headerlink" title="一、server.js 1.0"></a>一、server.js 1.0</h2><p>根据我的指示在逐步输入：<br>1、桌面打开gitbash，输入 <code>mkdir server</code>,创建一个名为 server 的文件夹<br>2、gitbash输入: <code>cd server</code> ，进入文件夹<br>3、gitbash输入：<code>touch server.js</code> ，新建一个 <code>server.js</code><br>4.1 去我的github找到<a href="https://github.com/wangsiyuan233/jirengu--fangfang/blob/master/server.js" target="_blank" rel="external">源码</a>链接，在gitbash输入：<code>curl http://... &gt;server.js</code> （注意源码是否一致）<br>4.2 直接复制下面的代码到 <code>server.js</code><br>5、gitbash输入：<code>node server.js 8080</code> , 返回语句为：恭喜你小源！监听8080成功 请用在空中转体720度然后用电饭煲打开 <code>http://localhost:8080</code><br>6、【保持第一个gitbash不关闭的情况下在第二个gitbash并输入】：<br>6.1 <code>curl &quot;http://localhost:8080&quot;</code>时返回：  //打字太麻烦了自己打开试试就知道了<br>6.2 <code>curl &quot;http://localhost:8080/xxx&quot;</code>时返回：  //打字太麻烦了自己打开试试就知道了<br>6.3 <code>curl &quot;http://localhost:8080?name=yuan&quot;</code>时返回：   //打字太麻烦了自己打开试试就知道了<br>7、总结：当我们发送一个请求的时候，服务器是会返回给我们想要的东西<br><a id="more"></a><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</div><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</div><div class="line"><span class="keyword">var</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>)</div><div class="line"><span class="keyword">var</span> port = process.argv[<span class="number">2</span>]</div><div class="line"></div><div class="line"><span class="keyword">if</span>(!port)&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'请指定端口号好不啦？--&gt; \nnode server.js 8888 '</span>)</div><div class="line">  process.exit(<span class="number">1</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> server = http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">request, response</span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> parsedUrl = url.parse(request.url, <span class="literal">true</span>)</div><div class="line">  <span class="keyword">var</span> path = request.url</div><div class="line">  <span class="keyword">var</span> query = <span class="string">''</span></div><div class="line">  <span class="keyword">if</span>(path.indexOf(<span class="string">'?'</span>) &gt;= <span class="number">0</span>)&#123; query = path.substring(path.indexOf(<span class="string">'?'</span>)) &#125;</div><div class="line">  <span class="keyword">var</span> pathNoQuery = parsedUrl.pathname</div><div class="line">  <span class="keyword">var</span> queryObject = parsedUrl.query</div><div class="line">  <span class="keyword">var</span> method = request.method</div><div class="line"></div><div class="line">  <span class="comment">/******** 从这里开始看，上面不要看 ************/</span></div><div class="line"></div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'小源说：得到 HTTP 路径\n'</span> + path) </div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'小源说：查询字符串为\n'</span> + query)</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'小源说：不含查询字符串的路径为\n'</span> + pathNoQuery)</div><div class="line">  <span class="comment">//均出现在bash上</span></div><div class="line"></div><div class="line">  <span class="comment">/******** 代码结束，下面不要看 ************/</span></div><div class="line">&#125;) <span class="comment">// var server = 的反括号  不要删！！</span></div><div class="line"></div><div class="line">server.listen(port)</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'恭喜你小源！监听 '</span> + port + <span class="string">' 成功\n请用在空中转体720度然后用电饭煲打开 http://localhost:'</span> + port)</div></pre></td></tr></table></figure></p><h2 id="二、server-js-1-1"><a href="#二、server-js-1-1" class="headerlink" title="二、server.js 1.1"></a>二、server.js 1.1</h2><p>1、发送不同的请求，通过代码来筛选符合条件的内容，否则就404你。<br>2、response.setHeader(‘Content-Type’,’text/html;charset=utf-8’) 需要理解+熟记<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</div><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</div><div class="line"><span class="keyword">var</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>)</div><div class="line"><span class="keyword">var</span> port = process.argv[<span class="number">2</span>]</div><div class="line"></div><div class="line"><span class="keyword">if</span>(!port)&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'请指定端口号好不啦？--&gt; \nnode server.js 8888 '</span>)</div><div class="line">  process.exit(<span class="number">1</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> server = http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">request, response</span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> parsedUrl = url.parse(request.url, <span class="literal">true</span>)</div><div class="line">  <span class="keyword">var</span> path = request.url</div><div class="line">  <span class="keyword">var</span> query = <span class="string">''</span></div><div class="line">  <span class="keyword">if</span>(path.indexOf(<span class="string">'?'</span>) &gt;= <span class="number">0</span>)&#123; query = path.substring(path.indexOf(<span class="string">'?'</span>)) &#125;</div><div class="line">  <span class="keyword">var</span> pathNoQuery = parsedUrl.pathname</div><div class="line">  <span class="keyword">var</span> queryObject = parsedUrl.query</div><div class="line">  <span class="keyword">var</span> method = request.method</div><div class="line"></div><div class="line">  <span class="comment">/******** 从这里开始看，上面不要看 ************/</span></div><div class="line"></div><div class="line"><span class="keyword">if</span>(path == <span class="string">'/'</span>)&#123;  <span class="comment">//只是路径，和文件的格式对应的没有关系</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'小源说：得到 HTTP 路径\n'</span> + path) <span class="comment">//出现在bash上</span></div><div class="line">    response.end()</div><div class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (path == <span class="string">'/index'</span>)&#123;</div><div class="line">    response.setHeader(<span class="string">'Content-Type'</span>,<span class="string">'text/html;charset=utf-8'</span>)</div><div class="line">    response.write(<span class="string">'我pang回来了小源！'</span>) <span class="comment">//出现在浏览器上</span></div><div class="line">    response.end()</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line">    response.statusCode == <span class="number">404</span></div><div class="line">    response.end()</div><div class="line">&#125;</div><div class="line"></div><div class="line">  <span class="comment">/******** 代码结束，下面不要看 ************/</span></div><div class="line">&#125;) <span class="comment">// var server = 的反括号  不要删！！</span></div><div class="line"></div><div class="line">server.listen(port)</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'恭喜你小源！监听 '</span> + port + <span class="string">' 成功\n请用在空中转体720度然后用电饭煲打开 http://localhost:'</span> + port)</div></pre></td></tr></table></figure></p><h2 id="三、server-js-1-2"><a href="#三、server-js-1-2" class="headerlink" title="三、server.js 1.2"></a>三、server.js 1.2</h2><p>write里的内容由setHeader里的Content-Type决定，和路径是什么无关<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</div><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</div><div class="line"><span class="keyword">var</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>)</div><div class="line"><span class="keyword">var</span> port = process.argv[<span class="number">2</span>]</div><div class="line"></div><div class="line"><span class="keyword">if</span>(!port)&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'请指定端口号好不啦？--&gt; \nnode server.js 8888 '</span>)</div><div class="line">  process.exit(<span class="number">1</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> server = http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">request, response</span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> parsedUrl = url.parse(request.url, <span class="literal">true</span>)</div><div class="line">  <span class="keyword">var</span> path = request.url</div><div class="line">  <span class="keyword">var</span> query = <span class="string">''</span></div><div class="line">  <span class="keyword">if</span>(path.indexOf(<span class="string">'?'</span>) &gt;= <span class="number">0</span>)&#123; query = path.substring(path.indexOf(<span class="string">'?'</span>)) &#125;</div><div class="line">  <span class="keyword">var</span> pathNoQuery = parsedUrl.pathname</div><div class="line">  <span class="keyword">var</span> queryObject = parsedUrl.query</div><div class="line">  <span class="keyword">var</span> method = request.method</div><div class="line"></div><div class="line">  <span class="comment">/******** 从这里开始看，上面不要看 ************/</span></div><div class="line"></div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'HTTP 路径为\n'</span> + path)</div><div class="line">  <span class="keyword">if</span>(path == <span class="string">'/style.js'</span>)&#123; <span class="comment">//只是路径，和文件的格式对应的没有关系</span></div><div class="line">    response.setHeader(<span class="string">'Content-Type'</span>, <span class="string">'text/css; charset=utf-8'</span>)</div><div class="line">    response.write(<span class="string">'body&#123;background-color: #ddd;&#125;h1&#123;color: red;&#125;'</span>)</div><div class="line">    response.end()</div><div class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span>(path == <span class="string">'/script.html'</span>)&#123;</div><div class="line">    response.setHeader(<span class="string">'Content-Type'</span>, <span class="string">'text/javascript; charset=utf-8'</span>)</div><div class="line">    response.write(<span class="string">'alert("这是JS执行的")'</span>)</div><div class="line">    response.end()</div><div class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span>(path == <span class="string">'/index.css'</span>)&#123;</div><div class="line">    response.setHeader(<span class="string">'Content-Type'</span>, <span class="string">'text/html; charset=utf-8'</span>)</div><div class="line">    response.write(<span class="string">'&lt;!DOCTYPE&gt;\n&lt;html&gt;'</span>  + </div><div class="line">      <span class="string">'&lt;head&gt;&lt;link rel="stylesheet" href="/style.js"&gt;'</span> +</div><div class="line">      <span class="string">'&lt;/head&gt;&lt;body&gt;'</span>  +</div><div class="line">      <span class="string">'&lt;h1&gt;你好&lt;/h1&gt;'</span> +</div><div class="line">      <span class="string">'&lt;script src="/script.html"&gt;&lt;/script&gt;'</span> +</div><div class="line">      <span class="string">'&lt;/body&gt;&lt;/html&gt;'</span>)</div><div class="line">    response.end()</div><div class="line">  &#125;<span class="keyword">else</span>&#123;</div><div class="line">    response.statusCode = <span class="number">404</span></div><div class="line">    response.end()</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">/******** 代码结束，下面不要看 ************/</span></div><div class="line">&#125;) <span class="comment">// var server = 的反括号  不要删！！</span></div><div class="line"></div><div class="line">server.listen(port)</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'恭喜你小源！监听 '</span> + port + <span class="string">' 成功\n请用在空中转体720度然后用电饭煲打开 http://localhost:'</span> + port)</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Node.js 久仰久仰&lt;br&gt;自己动手搭建一个服务器 server.js&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;一、server-js-1-0&quot;&gt;&lt;a href=&quot;#一、server-js-1-0&quot; class=&quot;headerlink&quot; title=&quot;一、server.js 1.0&quot;&gt;&lt;/a&gt;一、server.js 1.0&lt;/h2&gt;&lt;p&gt;根据我的指示在逐步输入：&lt;br&gt;1、桌面打开gitbash，输入 &lt;code&gt;mkdir server&lt;/code&gt;,创建一个名为 server 的文件夹&lt;br&gt;2、gitbash输入: &lt;code&gt;cd server&lt;/code&gt; ，进入文件夹&lt;br&gt;3、gitbash输入：&lt;code&gt;touch server.js&lt;/code&gt; ，新建一个 &lt;code&gt;server.js&lt;/code&gt;&lt;br&gt;4.1 去我的github找到&lt;a href=&quot;https://github.com/wangsiyuan233/jirengu--fangfang/blob/master/server.js&quot;&gt;源码&lt;/a&gt;链接，在gitbash输入：&lt;code&gt;curl http://... &amp;gt;server.js&lt;/code&gt; （注意源码是否一致）&lt;br&gt;4.2 直接复制下面的代码到 &lt;code&gt;server.js&lt;/code&gt;&lt;br&gt;5、gitbash输入：&lt;code&gt;node server.js 8080&lt;/code&gt; , 返回语句为：恭喜你小源！监听8080成功 请用在空中转体720度然后用电饭煲打开 &lt;code&gt;http://localhost:8080&lt;/code&gt;&lt;br&gt;6、【保持第一个gitbash不关闭的情况下在第二个gitbash并输入】：&lt;br&gt;6.1 &lt;code&gt;curl &amp;quot;http://localhost:8080&amp;quot;&lt;/code&gt;时返回：  //打字太麻烦了自己打开试试就知道了&lt;br&gt;6.2 &lt;code&gt;curl &amp;quot;http://localhost:8080/xxx&amp;quot;&lt;/code&gt;时返回：  //打字太麻烦了自己打开试试就知道了&lt;br&gt;6.3 &lt;code&gt;curl &amp;quot;http://localhost:8080?name=yuan&amp;quot;&lt;/code&gt;时返回：   //打字太麻烦了自己打开试试就知道了&lt;br&gt;7、总结：当我们发送一个请求的时候，服务器是会返回给我们想要的东西&lt;br&gt;
    
    </summary>
    
    
      <category term="基础知识" scheme="wangsiyuan233.github.io/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>Cookie</title>
    <link href="wangsiyuan233.github.io/2018/04/13/18Cookie/"/>
    <id>wangsiyuan233.github.io/2018/04/13/18Cookie/</id>
    <published>2018-04-13T10:12:14.018Z</published>
    <updated>2018-03-27T07:22:45.934Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/wangsiyuan233/cookie" target="_blank" rel="external">源码展示前后端分离+cookie</a></p><h2 id="实现的功能有："><a href="#实现的功能有：" class="headerlink" title="实现的功能有："></a>实现的功能有：</h2><p>1、邮箱+姓名+密码+再次确认密码：邮箱验证、密码长度等等（应该有个我不知道的模板）<br>2、展示所得到的cookie：早上好！XXX之类的。<br><a id="more"></a></p><h2 id="前后端的交互流程"><a href="#前后端的交互流程" class="headerlink" title="前后端的交互流程"></a>前后端的交互流程</h2><ol><li>Cookie 是浏览器访问服务器后，服务器传给浏览器的一段数据。</li><li>浏览器需要保存这段数据，不得轻易删除。</li><li>此后每次浏览器访问该服务器，都必须带上这段数据<br><img src="https://i.imgur.com/sFtGx1F.png" alt=""></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://github.com/wangsiyuan233/cookie&quot;&gt;源码展示前后端分离+cookie&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;实现的功能有：&quot;&gt;&lt;a href=&quot;#实现的功能有：&quot; class=&quot;headerlink&quot; title=&quot;实现的功能有：&quot;&gt;&lt;/a&gt;实现的功能有：&lt;/h2&gt;&lt;p&gt;1、邮箱+姓名+密码+再次确认密码：邮箱验证、密码长度等等（应该有个我不知道的模板）&lt;br&gt;2、展示所得到的cookie：早上好！XXX之类的。&lt;br&gt;
    
    </summary>
    
    
      <category term="基础知识" scheme="wangsiyuan233.github.io/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>缓存</title>
    <link href="wangsiyuan233.github.io/2018/04/13/19%E7%BC%93%E5%AD%98/"/>
    <id>wangsiyuan233.github.io/2018/04/13/19缓存/</id>
    <published>2018-04-13T10:12:14.018Z</published>
    <updated>2018-03-27T07:17:13.796Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、Cookie-和-Session-的区别"><a href="#一、Cookie-和-Session-的区别" class="headerlink" title="一、Cookie 和 Session 的区别"></a>一、Cookie 和 Session 的区别</h2><p>【Cookie】<br>Cookie 有几个特点,<br>1、服务端通过Set-Cookie来设置Cookie,Cookie的本质就是一串字符串。<br>2、客户端得到这个字符串后，每次登陆这个网页，都会携带上这串字符串。<br>3、服务端再通过这串字符串去找到对应的隐私信息。<br>4、Cookie大小一般为4kb。<br>5、Cookie默认有失效时间，但是后台可以设置过期时间。</p><p>因为Cookie可以篡改，而且是明文传输的，所以存在漏洞，Session就解决了这个问题。<br><a id="more"></a><br>【Session】<br>Session的特点：<br>1、一般来说，Session是基于Cookie来设置的一个哈希表。<br>2、将SessionId(随机数)通过Cookie发给服务端。<br>3、客户端访问服务器时，服务器读取SessionID。<br>4、服务器有一块内存(哈希表),存储了所有的Session。<br>5、通过SessionID，我们可以得到用户的隐私信息。<br>6、这块内存(哈希表)就是服务器上所有的Session。 </p><h2 id="二、Cookie-和-LocalStorage-的区别"><a href="#二、Cookie-和-LocalStorage-的区别" class="headerlink" title="二、Cookie 和 LocalStorage 的区别"></a>二、Cookie 和 LocalStorage 的区别</h2><p>【Cookie】<br>Cookie 有几个特点：<br>1、服务端通过Set-Cookie来设置Cookie,Cookie的本质就是一串字符串。<br>2、客户端得到这个字符串后，每次登陆这个网页，都会携带上这串字符串。<br>3、服务端再通过这串字符串去找到对应的隐私信息。<br>4、Cookie大小一般为4kb。<br>5、Cookie默认有失效时间，但是后台可以设置过期时间。</p><p>【LocalStorage】<br>LocalStorage的实质也是一个hash，它是html5标准提供的一个API，用来持久化存储一些不是那么重要的信息。<br>它的特点：<br>1、LocalStorage与HTTP无关。<br>2、HTTP不会带上LocalStorage。<br>3、只有相同的页面才能互相读取LocalStorage。<br>4、浏览器对每个域名分配的LocalStorage最大的存储量为5Mb左右。<br>5、记录一些无关紧要的信息，不记录用户敏感信息。<br>6、LocalStorage永久有效，除非用户清理缓存。 </p><p>它与Cookie的区别就是，一个通过Set-Cookie设置，一个是HTML5提供的APi，<br>一个是通过HTTP设置，一个与HTTP无关。</p><h2 id="三、LocalStorage-和-SessionStorage-的区别"><a href="#三、LocalStorage-和-SessionStorage-的区别" class="headerlink" title="三、LocalStorage 和 SessionStorage 的区别"></a>三、LocalStorage 和 SessionStorage 的区别</h2><p>SessionStorage与Session无关，同样，它也是浏览器提供的一个API。<br>它与LocalStorage一样,只有一点不一样，就是它的存储时间在用户关闭页面之后就会失效。</p><h2 id="四、Cookie-如何设置过期时间？如何删除-Cookie？"><a href="#四、Cookie-如何设置过期时间？如何删除-Cookie？" class="headerlink" title="四、Cookie 如何设置过期时间？如何删除 Cookie？"></a>四、Cookie 如何设置过期时间？如何删除 Cookie？</h2><p>【过期】：<br>cookie.setMaxAge(0);//不记录cookie<br>cookie.setMaxAge(-1);//会话级cookie，关闭浏览器失效<br>cookie.setMaxAge(60*60);//过期时间为1小时</p><p>【删除】<br>1、Internet Explorer<br>通过“其他”菜单打开“Internet 属性”。在“常规”选项卡上，单击“Internet 属性”对话框“浏览历史记录”下的“删除”。在“删除浏览历史记录”对话框中，单击以便清除“Cookies”复选框以外的所有复选框，然后单击“删除”。<br>2、Google Chrome<br>单击浏览器工具栏上的扳手图标。选择“选项”，单击“高级选项”选项卡并单击“隐私”部分中的“内容”设置。在出现的“内容”设置对话框中单击 cookies 选项卡。单击“显示” cookies 和其他站点数据。要删除所有 cookies，单击“删除所有”；要删除特定 cookie，选择发布 cookie 的站点然后选择该 cookie，并单击删除。</p><h2 id="五、Cache-Control-max-age-1000-缓存-与-ETag-的「缓存」有什么区别？"><a href="#五、Cache-Control-max-age-1000-缓存-与-ETag-的「缓存」有什么区别？" class="headerlink" title="五、Cache-Control: max-age=1000 缓存 与 ETag 的「缓存」有什么区别？"></a>五、Cache-Control: max-age=1000 缓存 与 ETag 的「缓存」有什么区别？</h2><p>【Cache-Control】<br>Cache-Control 在 HTTP 响应头中，当Cache-Control为可缓存时，同时可指定缓存时间（比如public, max-age:1000）。 这意味着在 1000秒内，浏览器都可以直接使用该缓存（此时服务器收不到任何请求）。</p><p>如果资源本身确实会随时发生改动，还用 Cache-Control 就会使用户看到的页面得不到更新。 但如果还希望利用 HTTP 缓存（万一资源没变呢），这就需要有条件的（conditional）HTTP 请求。</p><p>【ETag】<br>Etag 响应头字段表示资源的版本，浏览器在发送请求时会带 If-None-Match 头字段， 来询问服务器该版本是否仍然可用。如果服务器发现该版本仍然是最新的， 就可以返回 304 状态码指示 UA 继续使用缓存。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、Cookie-和-Session-的区别&quot;&gt;&lt;a href=&quot;#一、Cookie-和-Session-的区别&quot; class=&quot;headerlink&quot; title=&quot;一、Cookie 和 Session 的区别&quot;&gt;&lt;/a&gt;一、Cookie 和 Session 的区别&lt;/h2&gt;&lt;p&gt;【Cookie】&lt;br&gt;Cookie 有几个特点,&lt;br&gt;1、服务端通过Set-Cookie来设置Cookie,Cookie的本质就是一串字符串。&lt;br&gt;2、客户端得到这个字符串后，每次登陆这个网页，都会携带上这串字符串。&lt;br&gt;3、服务端再通过这串字符串去找到对应的隐私信息。&lt;br&gt;4、Cookie大小一般为4kb。&lt;br&gt;5、Cookie默认有失效时间，但是后台可以设置过期时间。&lt;/p&gt;
&lt;p&gt;因为Cookie可以篡改，而且是明文传输的，所以存在漏洞，Session就解决了这个问题。&lt;br&gt;
    
    </summary>
    
    
      <category term="基础知识" scheme="wangsiyuan233.github.io/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>原型链实例</title>
    <link href="wangsiyuan233.github.io/2018/04/13/17%E5%8E%9F%E5%9E%8B%E9%93%BE%E5%AE%9E%E4%BE%8B/"/>
    <id>wangsiyuan233.github.io/2018/04/13/17原型链实例/</id>
    <published>2018-04-13T10:12:14.002Z</published>
    <updated>2018-03-27T06:52:54.191Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>1、所有构造器/函数（包括自定义的）的 <code>__proto__</code> 都指向<code>Function.prototype</code>(它是一个空函数)<br>2、<code>Function.prototype.__proto__ === Object.prototype</code><br>3、<code>Object.prototype.__proto__ === null</code><br><a id="more"></a><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> object = &#123;&#125;</div><div class="line">object.__proto__  === <span class="built_in">Object</span>.prototype</div><div class="line"></div><div class="line"><span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line">fn.__proto__ === <span class="built_in">Function</span>.prototype </div><div class="line">fn.__proto__.__proto__ ==== <span class="built_in">Object</span>.prototype</div><div class="line"></div><div class="line"><span class="keyword">var</span> array = []</div><div class="line">array.__proto__ === <span class="built_in">Array</span>.prototype</div><div class="line">array.__proto__.__proto__ === <span class="built_in">Object</span>.prototype</div><div class="line"></div><div class="line"><span class="built_in">Function</span>.__proto__ === <span class="built_in">Function</span>.prototype</div><div class="line"><span class="built_in">Array</span>.__proto__ === <span class="built_in">Function</span>.prototype</div><div class="line"><span class="built_in">Object</span>.__proto__ === <span class="built_in">Function</span>.prototype</div><div class="line"></div><div class="line"><span class="literal">true</span>.__proto__ === <span class="built_in">Function</span>.prototype</div><div class="line"></div><div class="line"><span class="built_in">Function</span>.prototype.__proto__ ===  <span class="built_in">Object</span>.prototype</div><div class="line"><span class="built_in">Object</span>.prototype.__proto__ === <span class="literal">null</span></div></pre></td></tr></table></figure></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;1、所有构造器/函数（包括自定义的）的 &lt;code&gt;__proto__&lt;/code&gt; 都指向&lt;code&gt;Function.prototype&lt;/code&gt;(它是一个空函数)&lt;br&gt;2、&lt;code&gt;Function.prototype.__proto__ === Object.prototype&lt;/code&gt;&lt;br&gt;3、&lt;code&gt;Object.prototype.__proto__ === null&lt;/code&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="原型链" scheme="wangsiyuan233.github.io/tags/%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title>封装一个ajax</title>
    <link href="wangsiyuan233.github.io/2018/04/13/16AJAX%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>wangsiyuan233.github.io/2018/04/13/16AJAX（一）/</id>
    <published>2018-04-13T10:12:14.002Z</published>
    <updated>2018-03-27T07:23:18.289Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>   AJAX是一种实现在不刷新网页的情况下通过XmlHttpRequest()来访问服务器并根据数据的处理结果按照预期的方式对页面进行修改的技术。<br>   AJAX即Async JavaScript And Xml 是异步的JS和Xml的技术。</p></blockquote><a id="more"></a><p><strong>一、核心用法</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</div><div class="line">xhr.open()     </div><div class="line"><span class="comment">// open有3个参数 xhr.open('method','path',true)</span></div><div class="line"><span class="comment">// method 可以是GET POST DELETE PUT 等等 具体参考mdn</span></div><div class="line"><span class="comment">// path 就是获取网址的地址</span></div><div class="line"><span class="comment">// 第三个参数为boolean 可以选择同步 和 异步 默认为true 为异步</span></div><div class="line">xhr.onreadystatechange = <span class="function"><span class="params">()</span>=&gt;</span>&#123;</div><div class="line">  <span class="keyword">if</span>(xhr.readyState === <span class="number">4</span>)&#123;</div><div class="line">    <span class="keyword">if</span>(xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status &lt; <span class="number">300</span>)&#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">'请求成功'</span>)</div><div class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(xhr.status &gt;= <span class="number">400</span>)&#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">'请求失败'</span>)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">xhr.send()</div><div class="line"><span class="comment">// send 可以设置请求体 即请求的第四部分</span></div></pre></td></tr></table></figure></p><p><strong>二、JS设置请求头</strong><br>2.1 通过setRequestHeader()的方法可以设置请求头。<br>    设置响应头有2个注意事项：<br>2.1.1 设置响应头需要在open()和send()之间。<br>2.1.2 如设置多行,浏览器会合并成一行。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</div><div class="line">xhr.open(<span class="string">'post'</span>,<span class="string">'/xxx'</span>,<span class="literal">true</span>) <span class="comment">//第一部分</span></div><div class="line">xhr.setRequestHeader(<span class="string">'Content-Type'</span>,<span class="string">'application/x-www-from-encoded'</span>) <span class="comment">//第二部分</span></div><div class="line">xhr.send(<span class="string">'a=1&amp;b=2'</span>)<span class="comment">//第四部分</span></div></pre></td></tr></table></figure></p><p>2.2 通过send()可以设置请求的第四部分即请求体。<br>一般如果是GET请求，浏览器会屏蔽第四部分，如果是POST请求，浏览器会展示出来。<br>  具体查看方法:<br>    2.2.1 打开浏览器控制台<br>    2.2.2 点到Network,点到文件,点击View Source,就可以看到请求头,请求体了。<br><strong>二、JS读取响应的任意一个部分</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</div><div class="line">xhr.status      <span class="comment">// 获取状态码,第一部分</span></div><div class="line">xhr.statusText  <span class="comment">// 获取状态码描述，第一部分</span></div><div class="line">xhr.getResponseHeader()     <span class="comment">// 获取响应头，第二部分</span></div><div class="line">xhr.getAllResponseHeaders() <span class="comment">// 获取所有响应头，第二部分</span></div><div class="line">xhr.responseText <span class="comment">// 获取响应描述即后台的 response.write()中的内容，第四部分</span></div></pre></td></tr></table></figure></p><p><strong>三、封装一个AJAX</strong><br>3.1.1第一次封装<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">window</span>.jquery = <span class="function"><span class="keyword">function</span>(<span class="params">nodeOrSelector</span>)</span>&#123;</div><div class="line">  <span class="keyword">let</span> nodes = &#123;</div><div class="line">    <span class="number">0</span>:nodeOrSelector,</div><div class="line">    <span class="attr">length</span>:<span class="number">1</span></div><div class="line">  &#125;</div><div class="line">  nodes.addClass = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line">  ndoes.text = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line">  <span class="keyword">return</span> nodes</div><div class="line">&#125;</div><div class="line"><span class="built_in">window</span>.$ = <span class="built_in">window</span>.jquery</div><div class="line"><span class="built_in">window</span>.jquery.ajax = <span class="function"><span class="keyword">function</span>(<span class="params">url,method,requestBody,successFn,failFn,headers</span>)</span>&#123;</div><div class="line">  <span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</div><div class="line">  xhr.open(method,url)</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> headers)&#123;</div><div class="line">    <span class="keyword">let</span> value = headers[key]</div><div class="line">    xhr.setRequestHeader(key,value)</div><div class="line">  &#125;</div><div class="line">  xhr.onreadystatechange = <span class="function"><span class="params">()</span>=&gt;</span>&#123;</div><div class="line">    <span class="keyword">if</span>(xhr.readyState === <span class="number">4</span>)&#123;</div><div class="line">      <span class="keyword">if</span>(xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status &lt; <span class="number">300</span>)&#123;</div><div class="line">        successfn.call(<span class="literal">undefined</span>,xhr.responseText)</div><div class="line">      &#125;<span class="keyword">else</span> <span class="keyword">if</span>(xhr.status &gt;= <span class="number">400</span>)&#123;</div><div class="line">        failFn.call(<span class="literal">undefined</span>,xhr.status)</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  xhr.send(requestBody)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 调用方法 假设有一个按钮id为button</span></div><div class="line"><span class="keyword">let</span> button = <span class="built_in">document</span>.querySector(<span class="string">'button'</span>)</div><div class="line">button.addEventListener(click,(e)=&gt;&#123;</div><div class="line">  <span class="keyword">let</span> f1 = <span class="function">(<span class="params">x</span>)=&gt;</span>successFn.call(<span class="literal">undefined</span>,x)</div><div class="line">  <span class="keyword">let</span> f2 = <span class="function">(<span class="params">x</span>)=&gt;</span>&#123;<span class="built_in">console</span>.log(x.status)&#125;</div><div class="line">  <span class="built_in">window</span>.jquery.ajax(<span class="string">'/xxx'</span>, <span class="string">'post'</span>, <span class="string">'a=1&amp;&amp;b=2'</span>,f1,f2,<span class="literal">null</span>)</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p><p>这个方法设置有一个缺点,传参很乱容易写出别人无法理解的函数比如没有请求体和设置请求头的<br><code>window.jquery.ajax(&#39;get&#39;,&#39;/xxx&#39;,null,null,successFn,failFn)</code>这样不好,容易忘,所以来优化一下代码。 </p><p>3.1.2第一次优化<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 上面全一样</span></div><div class="line"><span class="built_in">window</span>.jquery.ajax = <span class="function"><span class="keyword">function</span>(<span class="params">options</span>)</span>&#123;</div><div class="line">  <span class="keyword">let</span> url = options.url</div><div class="line">  <span class="keyword">let</span> method = options.method</div><div class="line">  <span class="keyword">let</span> requestBody = options.requestBody</div><div class="line">  <span class="keyword">let</span> successFn = options.successFn</div><div class="line">  <span class="keyword">let</span> failFn = options.failFn</div><div class="line">  <span class="keyword">let</span> headers = options.headers</div><div class="line">  </div><div class="line">  <span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</div><div class="line">  xhr.open(method,url)</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> headers)&#123;</div><div class="line">    <span class="keyword">let</span> value = headers[key]</div><div class="line">    xhr.setRequestHeader(key,value)</div><div class="line">  &#125;</div><div class="line">  xhr.onreadystatechange = <span class="function"><span class="params">()</span>=&gt;</span>&#123;</div><div class="line">    <span class="keyword">if</span>(xhr.readyState === <span class="number">4</span>)&#123;</div><div class="line">      <span class="keyword">if</span>(xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status &lt; <span class="number">300</span>)&#123;</div><div class="line">        successfn.call(<span class="literal">undefined</span>,xhr.responseText)</div><div class="line">      &#125;<span class="keyword">else</span> <span class="keyword">if</span>(xhr.status &gt;= <span class="number">400</span>)&#123;</div><div class="line">        failFn.call(<span class="literal">undefined</span>,xhr.status)</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  xhr.send(requestBody)</div><div class="line">&#125;</div><div class="line"></div><div class="line"> <span class="comment">// 把变量以对象的形式调用 就不会出现上面那种尴尬的形式了</span></div><div class="line"><span class="built_in">window</span>.jquery.ajax(&#123;</div><div class="line">  <span class="string">'url'</span>:<span class="string">'/xxx'</span>,</div><div class="line">  <span class="string">'method'</span>:<span class="string">'post'</span>,</div><div class="line">  <span class="string">'requestBody'</span>:<span class="string">'a=1&amp;&amp;b=2'</span>,</div><div class="line">  <span class="string">'headers'</span>:&#123;</div><div class="line">    <span class="string">'lee'</span>:<span class="number">18</span>  <span class="comment">// 可以设置任何请求头</span></div><div class="line">    &#125;,</div><div class="line">    <span class="comment">// 两个回调函数</span></div><div class="line">  <span class="string">'successFn'</span>:<span class="function">(<span class="params">x</span>)=&gt;</span>&#123;</div><div class="line">      f1.call(<span class="literal">undefined</span>,x)</div><div class="line">      f2.call(<span class="literal">undefined</span>,x)</div><div class="line">    &#125;,</div><div class="line">  <span class="string">'failFn'</span>:<span class="function">(<span class="params">x</span>)=&gt;</span>&#123;</div><div class="line">          <span class="built_in">console</span>.log(x)</div><div class="line">          <span class="built_in">console</span>.log(x.status)</div><div class="line">          <span class="built_in">console</span>.log(x.responseText)</div><div class="line">    &#125;  </div><div class="line">  &#125;)</div></pre></td></tr></table></figure></p><p>3.1.3第二次优化<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 解构赋值</span></div><div class="line"><span class="comment">// 把上面6个let 以下面形式 声明</span></div><div class="line"><span class="keyword">let</span> &#123;url,method,headers,successFn,failFn,requestBody&#125; = options</div><div class="line"></div><div class="line"><span class="comment">// 再次优化</span></div><div class="line"><span class="comment">// 这样就可以了</span></div><div class="line"><span class="built_in">window</span>.jquery.ajax = <span class="function"><span class="keyword">function</span>(<span class="params">&#123;url,method,headers,successFn,failFn,requestBody&#125;</span>)</span>&#123;&#125;</div></pre></td></tr></table></figure></p><p>3.2Promise形式的封装<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">window</span>.jquery.ajax = <span class="function"><span class="keyword">function</span>(<span class="params">&#123;url,method,requestBody,headers&#125;</span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</div><div class="line">    <span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</div><div class="line">      xhr.open(method,url)</div><div class="line">      <span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> headers)&#123;</div><div class="line">        <span class="keyword">let</span> value = headers[key]</div><div class="line">        xhr.setRequestHeader(key,value)</div><div class="line">      &#125;</div><div class="line">      xhr.onreadystatechange = <span class="function"><span class="params">()</span>=&gt;</span>&#123;</div><div class="line">        <span class="keyword">if</span>(xhr.readyState === <span class="number">4</span>)&#123;</div><div class="line">          <span class="keyword">if</span>(xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status &lt; <span class="number">300</span>)&#123;</div><div class="line">            resolve.call(<span class="literal">undefined</span>,xhr.responseText)</div><div class="line">          &#125;<span class="keyword">else</span> <span class="keyword">if</span>(xhr.status &gt;= <span class="number">400</span>)&#123;</div><div class="line">            reject.call(<span class="literal">undefined</span>,xhr.status)</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">      xhr.send(requestBody)    </div><div class="line">  &#125;)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 调用</span></div><div class="line"><span class="built_in">window</span>.jquery.ajax(&#123;</div><div class="line">  <span class="string">'url'</span>:<span class="string">'/xxx'</span>,</div><div class="line">  <span class="string">'method'</span>:<span class="string">'post'</span>,</div><div class="line">  <span class="string">'requestBody'</span>:<span class="string">'a=1&amp;&amp;b=2'</span>,</div><div class="line">  <span class="string">'headers'</span>:&#123;</div><div class="line">    <span class="string">'lee'</span>:<span class="number">18</span>  <span class="comment">// 可以设置任何请求头</span></div><div class="line">    &#125;</div><div class="line">  &#125;).then(</div><div class="line">    <span class="function">(<span class="params">text</span>)=&gt;</span>&#123;<span class="built_in">console</span>.log(text)&#125;, <span class="comment">// resolve</span></div><div class="line">    (xhr)=&gt;&#123;<span class="built_in">console</span>.log(xhr)&#125;    <span class="comment">// reject</span></div><div class="line">    )</div></pre></td></tr></table></figure></p><p><strong>四、总结</strong></p><blockquote><p>同时我们还可以通过JSONP、img、iframe、link、的方法来与后台沟通刷新页面数据。 </p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;   AJAX是一种实现在不刷新网页的情况下通过XmlHttpRequest()来访问服务器并根据数据的处理结果按照预期的方式对页面进行修改的技术。&lt;br&gt;   AJAX即Async JavaScript And Xml 是异步的JS和Xml的技术。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="基础知识" scheme="wangsiyuan233.github.io/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
      <category term="异步" scheme="wangsiyuan233.github.io/tags/%E5%BC%82%E6%AD%A5/"/>
    
  </entry>
  
  <entry>
    <title>移动端配适</title>
    <link href="wangsiyuan233.github.io/2018/04/13/15%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%85%8D%E9%80%82/"/>
    <id>wangsiyuan233.github.io/2018/04/13/15移动端配适/</id>
    <published>2018-04-13T10:12:13.986Z</published>
    <updated>2018-03-27T07:16:43.451Z</updated>
    
    <content type="html"><![CDATA[<p><strong>一、meta viewport</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">//html head</div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0"</span>&gt;</span></div><div class="line"> // width=device-width: 让当前viewport宽度等于设备的宽度</div><div class="line"> // user-scalable=no: 禁止用户缩放</div><div class="line"> // initial-scale=1.0: 设置页面的初始缩放值为不缩放</div><div class="line"> // maximum-scale=1.0: 允许用户的最大缩放值为1.0</div><div class="line"> // minimum-scale=1.0: 允许用户的最小缩放值为1.0</div></pre></td></tr></table></figure></p><a id="more"></a><p><strong>二、媒体查询</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//html head</div><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"> @media(max-width:375px)&#123; body&#123;background: blue;&#125; &#125; </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure></p><p>这里的max-width:375px指手机分辨率，如果媒体满足max-width:375px，就生效这个css样式。</p><p><strong>三、动态 rem 方案</strong></p><p>方法一：使用 JS 动态调整 REM<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//html head</div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0"</span>&gt;</span></div></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">    <span class="keyword">var</span> pageWidth = <span class="built_in">window</span>.innerWidth</div><div class="line">    <span class="built_in">document</span>.write(<span class="string">'&lt;style&gt;html&#123;font-size:'</span>+pageWidth/<span class="number">10</span>+<span class="string">'px;&#125;&lt;/style&gt;'</span>)</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure><p>方法二： 在 scss 文件里添加，这个方法可实现 px 自动变 rem<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">@function px( <span class="variable">$px</span> )&#123;</div><div class="line">  @return <span class="variable">$px</span>/<span class="variable">$designWidth</span>*<span class="number">10</span> + rem;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="variable">$designWidth</span> : <span class="number">750</span>;  </div><div class="line"></div><div class="line"><span class="selector-class">.child</span>&#123;</div><div class="line">  <span class="attribute">width</span>: px(<span class="number">375</span>);</div><div class="line">  <span class="attribute">height</span>: px(<span class="number">160</span>);</div><div class="line">  <span class="attribute">margin</span>: px(<span class="number">40</span>) px(<span class="number">40</span>);</div><div class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid red;</div><div class="line">  <span class="attribute">float</span>: left;</div><div class="line">  <span class="attribute">font-size</span>: <span class="number">1.2em</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><meta name="viewport" content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;一、meta viewport&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;//html head&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;viewport&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; // width=device-width: 让当前viewport宽度等于设备的宽度&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; // user-scalable=no: 禁止用户缩放&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; // initial-scale=1.0: 设置页面的初始缩放值为不缩放&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; // maximum-scale=1.0: 允许用户的最大缩放值为1.0&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; // minimum-scale=1.0: 允许用户的最小缩放值为1.0&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="基础知识" scheme="wangsiyuan233.github.io/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
</feed>
