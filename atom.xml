<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>wangsiyuan</title>
  
  <subtitle>小马过河</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="wangsiyuan233.github.io/"/>
  <updated>2018-06-07T13:18:47.281Z</updated>
  <id>wangsiyuan233.github.io/</id>
  
  <author>
    <name>wangsiyuan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JavaScript 中的几种循环</title>
    <link href="wangsiyuan233.github.io/2018/06/07/51%E5%87%A0%E7%A7%8D%E5%BE%AA%E7%8E%AF/"/>
    <id>wangsiyuan233.github.io/2018/06/07/51几种循环/</id>
    <published>2018-06-07T13:05:44.000Z</published>
    <updated>2018-06-07T13:18:47.281Z</updated>
    
    <content type="html"><![CDATA[<p>如下是 数组 和 <code>JSON</code>对象:<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">var Arr</span> = [<span class="string">'Javascript'</span>, <span class="string">'Gulp'</span>, <span class="string">'CSS3'</span>, <span class="string">'Grunt'</span>, <span class="string">'jQuery'</span>, <span class="string">'angular'</span>];</div><div class="line"><span class="attribute">var Obj</span> = &#123;</div><div class="line">    aaa: <span class="string">'Javascript'</span>,</div><div class="line">    bbb: <span class="string">'Gulp'</span>,</div><div class="line">    ccc: <span class="string">'CSS3'</span>,</div><div class="line">    ddd: <span class="string">'Grunt'</span>,</div><div class="line">    eee: <span class="string">'jQuery'</span>,</div><div class="line">    fff: <span class="string">'angular'</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure></p><blockquote><p>For 循环</p></blockquote><a id="more"></a><figure class="highlight clojure"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">(<span class="name">function</span>() &#123;</div><div class="line">    for(<span class="name"><span class="builtin-name">var</span></span> i=0, len=Arr.length; i&lt;len; i++) &#123;</div><div class="line">        if (<span class="name">i</span> == <span class="number">2</span>) &#123;</div><div class="line">            // return;   // 函数执行被终止</div><div class="line">            // break;    // 循环被终止</div><div class="line">            continue; // 循环被跳过</div><div class="line">        &#125;<span class="comment">;</span></div><div class="line">        console.log(<span class="name">'Arr</span>['+ i +']<span class="symbol">:'</span> + Arr[i])<span class="comment">;</span></div><div class="line">    &#125;</div><div class="line">&#125;)()<span class="comment">;</span></div></pre></td></tr></table></figure><p><strong>需要注意的是：</strong><br>1、<code>for</code>循环中的 <code>i</code> 在循环结束之后任然存在与作用域中，为了避免影响作用域中的其他变量，使用函数自执行的方式将其隔离起来<code>()()</code>;<br>2、避免使用 <code>for(var i=0; i&lt;demo1Arr.length; i++){}</code> 的方式，这样的数组长度每次都被计算，效率低于上面的方式。也可以将变量声明放在 <code>for</code> 的前面来执行，提高阅读性<br>3、跳出循环的方式有如下几种：<br><code>return</code> 函数执行被终止<br><code>break</code> 循环被终止<br><code>continue</code> 循环被跳过</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如下是 数组 和 &lt;code&gt;JSON&lt;/code&gt;对象:&lt;br&gt;&lt;figure class=&quot;highlight ebnf&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;var Arr&lt;/span&gt; = [&lt;span class=&quot;string&quot;&gt;&#39;Javascript&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Gulp&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;CSS3&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Grunt&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;jQuery&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;angular&#39;&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;var Obj&lt;/span&gt; = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    aaa: &lt;span class=&quot;string&quot;&gt;&#39;Javascript&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    bbb: &lt;span class=&quot;string&quot;&gt;&#39;Gulp&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ccc: &lt;span class=&quot;string&quot;&gt;&#39;CSS3&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ddd: &lt;span class=&quot;string&quot;&gt;&#39;Grunt&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    eee: &lt;span class=&quot;string&quot;&gt;&#39;jQuery&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    fff: &lt;span class=&quot;string&quot;&gt;&#39;angular&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;For 循环&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>配置 React</title>
    <link href="wangsiyuan233.github.io/2018/05/30/50%E9%85%8D%E7%BD%AEReact/"/>
    <id>wangsiyuan233.github.io/2018/05/30/50配置React/</id>
    <published>2018-05-30T02:11:41.000Z</published>
    <updated>2018-05-31T15:14:35.607Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>第一步： 安装 React</p></blockquote><p>1、 <a href="https://pan.baidu.com/s/1kU4K9iJ" target="_blank" rel="external">下载</a><code>yarn</code></p><p>2、临时文件夹实验：<br><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="string">mkdir </span>~/<span class="string">temp;</span> <span class="string">cd </span>~/<span class="string">temp</span></div><div class="line"></div><div class="line"><span class="string">npm </span><span class="string">install </span>-g <span class="built_in">create-react-app</span></div><div class="line"></div><div class="line"><span class="built_in">create-react-app</span> <span class="string">hello-world</span></div><div class="line"></div><div class="line"><span class="string">cd </span><span class="string">hello-world</span></div><div class="line"></div><div class="line"><span class="string">npm </span><span class="string">start </span>或者 <span class="string">yarn </span><span class="string">start</span></div></pre></td></tr></table></figure></p><p> <code>create-react-app</code> 内置了 <code>webpack</code> 的所有功能。</p><p>3、初始化 <code>React</code><br>清空 <code>temp</code> 文件夹，同时清空项目文件夹<br>（因为 <code>create-react-app</code> 会自己创建 <code>src</code> 和 <code>index.html</code> ）<br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">cd 到你在上次任务中新建的项目目录！</div><div class="line"></div><div class="line"><span class="comment"># 删除所有非隐藏文件，这一步千万不要手抖，后果自负</span></div><div class="line"></div><div class="line">rm -rf * </div><div class="line">git <span class="keyword">add</span><span class="bash"> .</span></div><div class="line">git commit -m <span class="string">"remove all files"</span></div><div class="line">git push</div></pre></td></tr></table></figure></p><p>正式开始初始化：<br><a id="more"></a><br><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">create-react-app</span> .</div><div class="line"><span class="string">yarn </span><span class="string">start</span></div></pre></td></tr></table></figure></p><p><code>yarn start</code> 就相当于 <code>webpack</code> 的 <code>watch</code> 功能。</p><p>注意：改 <code>JS</code> 会自动刷新页面，改 <code>HTML</code> 要手动刷新页面。</p><blockquote><p>第二步：部署</p></blockquote><p>1、 在 <code>package.json</code> 里添加  <code>&quot;homepage&quot;: &quot;https://wangsiyuan233.github.io/react-todolist /build &quot;,</code></p><p>2、 <code>yarn start</code></p><blockquote><p>第三步： React 的生命周期</p></blockquote><p>组件不能改变得到的 <code>props</code>，可变的东西要放在 <code>state</code></p><p>直接在 <code>render</code> 或 <code>constructor</code> 里面改 <code>state</code> ，都失败了</p><p>必须使用 <code>this.setState()</code> 方法来改变 <code>state</code>，直接对 <code>state</code> 赋值毫无用处。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">     setInterval(<span class="function"><span class="params">()</span>=&gt;</span>&#123; <span class="comment">// 搜索「JS 箭头函数 MDN」</span></div><div class="line">-      <span class="keyword">this</span>.state = &#123;</div><div class="line">+      <span class="keyword">this</span>.setState(&#123;</div><div class="line">         <span class="attr">date</span>: <span class="keyword">new</span> <span class="built_in">Date</span>() <span class="comment">// 更新 date</span></div><div class="line">-      &#125;</div><div class="line">+      &#125;)</div><div class="line">     &#125;)</div></pre></td></tr></table></figure></p><p>OK,那我们把 <code>setState</code> 放在那儿呢？</p><p><code>React</code> 的生命周期包括三个阶段：<code>mount</code>（挂载）、<code>update</code>（更新）和 <code>unmount</code>（移除）</p><h2 id="mount（挂载）"><a href="#mount（挂载）" class="headerlink" title="mount（挂载）"></a><code>mount</code>（挂载）</h2><p><img src="https://i.imgur.com/RMpH2WV.jpg" alt=""></p><h2 id="update（更新）"><a href="#update（更新）" class="headerlink" title="update（更新）"></a><code>update</code>（更新）</h2><p>mount 之后，如果数据有任何变动，就会来到 update 过程，这个过程有 5 个钩子：</p><p>1、<code>componentWillReceiveProps(nextProps)</code> - 我要读取 <code>props</code> 啦！<br>2、<code>shouldComponentUpdate(nextProps, nextState)</code> - 请问要不要更新组件？<code>true / false</code><br>3、<code>componentWillUpdate()</code> - 我要更新组件啦！<br>4、<code>render()</code> - 更新！<br>5、<code>componentDidUpdate()</code> - 更新完毕啦！</p><h2 id="unmount（移除）"><a href="#unmount（移除）" class="headerlink" title="unmount（移除）"></a><code>unmount</code>（移除）</h2><p>当一个组件将要从页面中移除时，会进入 <code>unmount</code> 过程，这个过程就一个钩子：</p><p><code>componentWillUnmount()</code> - 我要死啦！</p><p>你可以在这个组件死之前做一些清理工作。</p><p><strong>废话那么多，所以 <code>setState</code> 到底放哪儿？</strong></p><p>一般，我们只在这几个钩子里 <code>setState</code>：</p><p>1、<code>componentWillMount</code><br>2、<code>componentDidMount</code><br>3、<code>componentWillReceiveProps</code></p><p>反正 <code>this.state</code> 就是不会在 <code>this.setState</code> 调用之后立刻更新</p><p>总结一下，<code>setState</code> 最招骂的就是不会立即修改 <code>this.state</code>。</p><p>原来 <code>this.setState</code> 可以接受一个函数作为参数啊！</p><p>传统式 <code>setState</code> 的存在，会把函数式 <code>setState</code> 拖下水</p><p>只要有一个传统式的 <code>setState</code> 调用，就把其他函数式 <code>setState</code> 调用给害了。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;第一步： 安装 React&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;1、 &lt;a href=&quot;https://pan.baidu.com/s/1kU4K9iJ&quot;&gt;下载&lt;/a&gt;&lt;code&gt;yarn&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;2、临时文件夹实验：&lt;br&gt;&lt;figure class=&quot;highlight dsconfig&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;mkdir &lt;/span&gt;~/&lt;span class=&quot;string&quot;&gt;temp;&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;cd &lt;/span&gt;~/&lt;span class=&quot;string&quot;&gt;temp&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;npm &lt;/span&gt;&lt;span class=&quot;string&quot;&gt;install &lt;/span&gt;-g &lt;span class=&quot;built_in&quot;&gt;create-react-app&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;create-react-app&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;hello-world&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;cd &lt;/span&gt;&lt;span class=&quot;string&quot;&gt;hello-world&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;npm &lt;/span&gt;&lt;span class=&quot;string&quot;&gt;start &lt;/span&gt;或者 &lt;span class=&quot;string&quot;&gt;yarn &lt;/span&gt;&lt;span class=&quot;string&quot;&gt;start&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt; &lt;code&gt;create-react-app&lt;/code&gt; 内置了 &lt;code&gt;webpack&lt;/code&gt; 的所有功能。&lt;/p&gt;
&lt;p&gt;3、初始化 &lt;code&gt;React&lt;/code&gt;&lt;br&gt;清空 &lt;code&gt;temp&lt;/code&gt; 文件夹，同时清空项目文件夹&lt;br&gt;（因为 &lt;code&gt;create-react-app&lt;/code&gt; 会自己创建 &lt;code&gt;src&lt;/code&gt; 和 &lt;code&gt;index.html&lt;/code&gt; ）&lt;br&gt;&lt;figure class=&quot;highlight dockerfile&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;cd 到你在上次任务中新建的项目目录！&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 删除所有非隐藏文件，这一步千万不要手抖，后果自负&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;rm -rf * &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;git &lt;span class=&quot;keyword&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; .&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/span&gt;git commit -m &lt;span class=&quot;string&quot;&gt;&quot;remove all files&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;git push&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;正式开始初始化：&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Webpack配置</title>
    <link href="wangsiyuan233.github.io/2018/05/29/49Webpack%E9%85%8D%E7%BD%AE/"/>
    <id>wangsiyuan233.github.io/2018/05/29/49Webpack配置/</id>
    <published>2018-05-29T08:48:37.000Z</published>
    <updated>2018-05-30T02:08:52.285Z</updated>
    
    <content type="html"><![CDATA[<h3 id="webpack-的作用-使用各种-loader-加载不同的资源-把所有资源打包起来"><a href="#webpack-的作用-使用各种-loader-加载不同的资源-把所有资源打包起来" class="headerlink" title="webpack 的作用:使用各种 loader 加载不同的资源,把所有资源打包起来"></a>webpack 的作用:使用各种 loader 加载不同的资源,把所有资源打包起来</h3><blockquote><p>第一步：设置一个 <code>npm</code>，让 <code>npm</code> 下载得更快一些</p></blockquote><p>1、运行 <code>npm config set loglevel http</code> 让你知道 <code>npm</code> 发的每一个请求<br>2、运行 <code>npm config set progress false</code>，关闭那个无聊的进度条<br>3、运行 <code>npm config set registry https://registry.npm.taobao.org/</code> ， 从淘宝的服务器下载各种包。不过这会让你在运行 <code>npm adduser</code> 的时候出问题，想要恢复成原样，只需要运行 <code>npm config delete registry</code> 即可。<br>4、运行 <code>touch ~/.bashrc; echo &#39;export PHANTOMJS_CDNURL=&quot;http://npm.taobao.org/mirrors/phantomjs&quot;&#39; &gt;&gt; ~/.bashrc</code> 让 <code>npm</code> 从淘宝下载 <code>phantomjs</code><br>5、运行 <code>touch ~/.bashrc; echo &#39;export SASS_BINARY_SITE=&quot;https://npm.taobao.org/mirrors/node-sass&quot;&#39; &gt;&gt; ~/.bashrc</code> 让 npm 从淘宝下载 SASS<br>6、运行 <code>source ~/.bashrc</code></p><blockquote><p>第二步：复制 <code>webpack</code> 的<a href="https://webpack.js.org/guides/getting-started/" target="_blank" rel="external">指引</a></p></blockquote><a id="more"></a><p>1、<code>cd</code> 到你喜欢的一个地方，比如 <code>~/code/</code> 目录  <code>mkdir webpack-demo &amp;&amp; cd webpack-demo</code><br>2、好了，现在我身处 <code>webpack-demo</code> 目录 <code>npm init -y</code><br>3、上面命令创建了一个 <code>package.json</code> 文件 <code>npm install --save-dev webpack</code><br>非 Windows 用户复制这一行：<code>./node_modules/.bin/webpack --help</code> </p><p>看到刷刷刷的英文，就是安装成功，试着运行一下吧</p><blockquote><p>第三步：现在创建一个子目录（<code>app.js</code>)</p></blockquote><p>1、<code>mkdir app &amp;&amp; cd app</code><br>2、<code>touch index.js</code><br>3、编辑 <code>app/index.js</code>：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">component</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> element = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</div><div class="line"></div><div class="line">  <span class="comment">/* lodash is required for the next line to work */</span></div><div class="line">  element.innerHTML = _.join([<span class="string">'Hello'</span>,<span class="string">'webpack'</span>], <span class="string">' '</span>);</div><div class="line"></div><div class="line">  <span class="keyword">return</span> element;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">document</span>.body.appendChild(component());</div></pre></td></tr></table></figure></p><p>4、在 <code>app</code> 文件夹外面创建 <code>touch index.html</code>：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>webpack 2 demo<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/lodash@4.16.6"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"app/index.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p><p>5、引入 <code>lodash</code> : <code>npm install --save lodash</code><br>6、然后在 <code>app/index.js</code> 的第一行添加 ： <code>import _ from &#39;lodash&#39;;</code><br>7、把 <code>app/index.html</code> 改动一下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">title</span>&gt;</span>webpack 2 demo<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">-    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/lodash@4.16.6"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">-    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"app/index.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">+    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"dist/bundle.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"> <span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p><p>浏览器打开 <code>index.html</code>，看到 <code>hello webpack</code>，就证明 <code>webpack</code> 安装成功了~</p><blockquote><p>第四步： 快速启动</p></blockquote><p>1、<code>webpack-demo</code> 目录下新建并编辑 <code>webpack.config.js</code>, (连接<code>app/index.js</code> 、<code>dist</code> 和 <code>bundle.js</code> 这三个关键词)<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  <span class="attr">entry</span>: <span class="string">'./app/index.js'</span>,</div><div class="line">  <span class="attr">output</span>: &#123;</div><div class="line">    <span class="attr">filename</span>: <span class="string">'bundle.js'</span>,</div><div class="line">    <span class="attr">path</span>: path.resolve(__dirname, <span class="string">'dist'</span>)</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p><p>2、修改 <code>package.json</code><br><figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">   <span class="string">"scripts"</span>: &#123;</div><div class="line">-    <span class="string">"test"</span>: <span class="string">"echo \"</span><span class="keyword">Error</span>: <span class="keyword">no</span> <span class="keyword">test</span> specified\<span class="string">" &amp;&amp; exit 1"</span></div><div class="line">+    <span class="string">"test"</span>: <span class="string">"echo \"</span><span class="keyword">Error</span>: <span class="keyword">no</span> <span class="keyword">test</span> specified\<span class="string">" &amp;&amp; exit 1"</span>,</div><div class="line">+    <span class="string">"build"</span>: <span class="string">"webpack"</span></div><div class="line">   &#125;,</div><div class="line">   <span class="string">"keywords"</span>: [],</div></pre></td></tr></table></figure></p><p>3、然后运行 <code>npm run build</code> 那么说明运行 <code>npm run build</code> 就等于运行 <code>node_modules</code> 里的 <code>webpack</code> 可执行文件，这个可执行文件会自己去 <code>webpack.config.js</code> 里找 <code>app/index.js</code>、<code>dist</code> 和 <code>bundle.js</code> 三个关键词。</p><p>所以现在不用运行 <code>./node_modules/.bin/webpack app/index.js dist/bundle.js</code><br>而是运行 <code>npm run build</code> 就可以了</p><p><strong><code>npm run build</code> 特别重要，把 <code>src</code> 里面的代码打包好提交到 <code>build</code> 里面， 就是这么来的啊！</strong></p><blockquote><p>第五步：监听文件变动</p></blockquote><p>我们需要 <code>watch</code> 来 <code>webpack</code> 监听文件变动，一旦我们保存了文件，它就重新 <code>build</code> 代码。</p><p>1、在 <code>package.jason</code> 中添加一个 <code>npm script</code>：<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">   <span class="string">"scripts"</span>: &#123;</div><div class="line">     <span class="string">"test"</span>: <span class="string">"echo \"</span><span class="keyword">Error</span>: <span class="keyword">no</span> <span class="keyword">test</span> specified\<span class="string">" &amp;&amp; exit 1"</span>,</div><div class="line">-    <span class="string">"build"</span>: <span class="string">"webpack -p"</span></div><div class="line">+    <span class="string">"build"</span>: <span class="string">"webpack -p"</span>,</div><div class="line">+    <span class="string">"dev"</span>: <span class="string">"webpack --progress --watch"</span></div><div class="line">   &#125;,</div><div class="line">   <span class="string">"keywords"</span>: [],</div></pre></td></tr></table></figure></p><p>此时打开 <code>index.html</code>， 编辑 <code>app/index.js</code>，<strong>保存</strong>，你会发现 <code>webpack</code> 自动 <code>build</code> 了，这是刷新 <code>index.html</code></p><blockquote><p>第六步： 浏览器自动刷新</p></blockquote><p>如果能边写边改多好啊！（不是保存后再自动刷新）<br>1、 <code>index.html</code> 里 改为 <code>&lt;script src=&quot;/bundle.js&quot;&gt;&lt;/script&gt;</code><br>2、 <code>package.json</code>：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">-    <span class="string">"dev"</span>: <span class="string">"webpack --progress --watch"</span></div><div class="line">+    <span class="string">"dev"</span>: <span class="string">"webpack-dev-server --open"</span></div><div class="line"></div><div class="line"></div><div class="line">-    <span class="string">"webpack"</span>: <span class="string">"^2.3.2"</span></div><div class="line">+    <span class="string">"webpack"</span>: <span class="string">"^2.3.2"</span>,</div><div class="line">+    <span class="string">"webpack-dev-server"</span>: <span class="string">"^2.4.2"</span></div></pre></td></tr></table></figure></p><p>3、运行 <code>npm run dev</code>，然后浏览器就会自动打开 <code>http://localhost:8080/</code> ，你会看到 <code>index.html</code> 页面</p><p>当我们修改 <code>index.js</code> 时：bundle.js 自动打包； <code>http://localhost:8080/</code> 自动刷新</p><p>注意，期间 <code>dist/bundle.js</code> 不会自动变化，你在<strong>部署代码之前</strong>，依然要运行 <code>npm run build</code> 才行。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;webpack-的作用-使用各种-loader-加载不同的资源-把所有资源打包起来&quot;&gt;&lt;a href=&quot;#webpack-的作用-使用各种-loader-加载不同的资源-把所有资源打包起来&quot; class=&quot;headerlink&quot; title=&quot;webpack 的作用:使用各种 loader 加载不同的资源,把所有资源打包起来&quot;&gt;&lt;/a&gt;webpack 的作用:使用各种 loader 加载不同的资源,把所有资源打包起来&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;第一步：设置一个 &lt;code&gt;npm&lt;/code&gt;，让 &lt;code&gt;npm&lt;/code&gt; 下载得更快一些&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;1、运行 &lt;code&gt;npm config set loglevel http&lt;/code&gt; 让你知道 &lt;code&gt;npm&lt;/code&gt; 发的每一个请求&lt;br&gt;2、运行 &lt;code&gt;npm config set progress false&lt;/code&gt;，关闭那个无聊的进度条&lt;br&gt;3、运行 &lt;code&gt;npm config set registry https://registry.npm.taobao.org/&lt;/code&gt; ， 从淘宝的服务器下载各种包。不过这会让你在运行 &lt;code&gt;npm adduser&lt;/code&gt; 的时候出问题，想要恢复成原样，只需要运行 &lt;code&gt;npm config delete registry&lt;/code&gt; 即可。&lt;br&gt;4、运行 &lt;code&gt;touch ~/.bashrc; echo &amp;#39;export PHANTOMJS_CDNURL=&amp;quot;http://npm.taobao.org/mirrors/phantomjs&amp;quot;&amp;#39; &amp;gt;&amp;gt; ~/.bashrc&lt;/code&gt; 让 &lt;code&gt;npm&lt;/code&gt; 从淘宝下载 &lt;code&gt;phantomjs&lt;/code&gt;&lt;br&gt;5、运行 &lt;code&gt;touch ~/.bashrc; echo &amp;#39;export SASS_BINARY_SITE=&amp;quot;https://npm.taobao.org/mirrors/node-sass&amp;quot;&amp;#39; &amp;gt;&amp;gt; ~/.bashrc&lt;/code&gt; 让 npm 从淘宝下载 SASS&lt;br&gt;6、运行 &lt;code&gt;source ~/.bashrc&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;第二步：复制 &lt;code&gt;webpack&lt;/code&gt; 的&lt;a href=&quot;https://webpack.js.org/guides/getting-started/&quot;&gt;指引&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>MVC与模块化</title>
    <link href="wangsiyuan233.github.io/2018/05/15/48MVC%E4%B8%8E%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
    <id>wangsiyuan233.github.io/2018/05/15/48MVC与模块化/</id>
    <published>2018-05-15T02:16:16.000Z</published>
    <updated>2018-05-15T02:42:40.743Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>一、模块化</p></blockquote><p><strong>目的：通过对文件的命名和代码的简化，可以更加方便的辨别代码的功能与作用。</strong></p><p>以js代码为例，我们把admin.js，按照功能拆分成module-1.js等三个文件，形成模块。这样每个文件的代码都会小而清晰，这也就是模块化的一种体现。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--index.html--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    module-1 of html</div><div class="line">    module-2 of html</div><div class="line">    module-3 of html</div><div class="line">    <span class="tag">&lt;<span class="name">scirpt</span> <span class="attr">src</span>=<span class="string">"module-1.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>   </div><div class="line">    <span class="tag">&lt;<span class="name">scirpt</span> <span class="attr">src</span>=<span class="string">"module-2.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>   </div><div class="line">    <span class="tag">&lt;<span class="name">scirpt</span> <span class="attr">src</span>=<span class="string">"module-3.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure></p><a id="more"></a><blockquote><p>二、立即执行函数</p></blockquote><p>1、不同模块代码里，相同的全局变量会造成代码冲突，所以我们需要把全局变量变成局部变量——立即执行函数的使用。<br><figure class="highlight delphi"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">!<span class="function"><span class="keyword">function</span><span class="params">()</span><span class="comment">&#123;</span></span></div><div class="line">    your code</div><div class="line">&#125;.<span class="title">call</span><span class="params">()</span></div></pre></td></tr></table></figure></p><p>2、代码模块隔离之后如何进行通信呢？利用<strong>闭包</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// module-1</span></div><div class="line">!<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;.call()</div><div class="line">!<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="comment">//  code of module-1</span></div><div class="line">    <span class="keyword">var</span> person = &#123;</div><div class="line">        <span class="attr">name</span>: <span class="string">'frank'</span>,</div><div class="line">        <span class="attr">age</span>: <span class="number">18</span></div><div class="line">    &#125;</div><div class="line">    <span class="built_in">window</span>.frankGrowUp = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        person.age += <span class="number">1</span>    <span class="comment">// 函数用了它以外的变量 person，所以fn和person就是闭包 ，闭包用来对数据隐藏细节，还可以进行访问控制</span></div><div class="line">        <span class="keyword">return</span> person.age</div><div class="line">    &#125;</div><div class="line">&#125;.call()</div><div class="line"></div><div class="line"><span class="comment">// module-2</span></div><div class="line">!<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="comment">// code of module-2</span></div><div class="line">    <span class="keyword">var</span> newAge = <span class="built_in">window</span>.frankGrowUp()</div><div class="line">    <span class="built_in">console</span>.log(newAge)  <span class="comment">// 19</span></div><div class="line">&#125;.call()</div></pre></td></tr></table></figure></p><ul><li>立即执行函数使得 <code>person</code> 无法被外部访问</li><li>闭包使得匿名函数可以操作 <code>person</code></li><li><code>window.frankGrowUp</code> 保存了匿名函数的地址</li><li>任何地方都可以使用<code>window.frankGrowUp</code>操作 <code>person</code> =&gt; 任何地方都可以使用 <code>window.frankGrowUp</code>操作 <code>person</code>，但是不能直接访问 <code>person</code></li></ul><blockquote><p>三、Model(模型) View(视图) Controller(控制)</p></blockquote><p><strong>html就放在view部分，js操作就放在controller部分</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--index.html--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"view-1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"view-2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"view-3"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">scirpt</span> <span class="attr">src</span>=<span class="string">"module-1.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>   </div><div class="line">    <span class="tag">&lt;<span class="name">scirpt</span> <span class="attr">src</span>=<span class="string">"module-2.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>   </div><div class="line">    <span class="tag">&lt;<span class="name">scirpt</span> <span class="attr">src</span>=<span class="string">"module-3.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// module-1.js 模块 1</span></div><div class="line">!<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> view = 找到对应的模块<span class="number">1</span>元素 </div><div class="line">    <span class="keyword">var</span> controller = &#123;</div><div class="line">        <span class="attr">view</span>: <span class="literal">null</span>,</div><div class="line">        <span class="attr">init</span>: <span class="function"><span class="keyword">function</span>(<span class="params">view</span>) </span>&#123;</div><div class="line">            <span class="keyword">this</span>.view = view <span class="comment">// 给controller.view 赋值</span></div><div class="line">            <span class="keyword">this</span>.操作<span class="number">1</span>()    <span class="comment">// 这里的 this是通过 controller 对象调用决定的（最下面）</span></div><div class="line">            <span class="keyword">this</span>.操作<span class="number">2</span>()</div><div class="line">        &#125;,</div><div class="line">        操作<span class="number">1</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,</div><div class="line">        操作<span class="number">2</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,</div><div class="line">    &#125;</div><div class="line">    controller.init(view)    <span class="comment">// 执行操作</span></div><div class="line">&#125;.call()</div></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// module-2.js 模块 2</span></div><div class="line">!<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> view = <span class="built_in">document</span>.querySelector(<span class="string">'#view-2'</span>)  </div><div class="line">    <span class="keyword">var</span> controller = &#123;</div><div class="line">        <span class="attr">view</span>: <span class="literal">null</span>,</div><div class="line">        <span class="attr">init</span>: <span class="function"><span class="keyword">function</span>(<span class="params">view</span>) </span>&#123;</div><div class="line">            <span class="keyword">this</span>.view = view </div><div class="line">            <span class="keyword">this</span>.bindEvents()           <span class="comment">// this.bindEvents.call(this)</span></div><div class="line">        &#125;,</div><div class="line">        <span class="attr">bindEvents</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="keyword">var</span> view = <span class="keyword">this</span>.view</div><div class="line">            <span class="built_in">window</span>.addEventListener(<span class="string">'scroll'</span>,(x) =&gt; &#123;</div><div class="line">                <span class="keyword">this</span>           <span class="comment">// 通过箭头函数让函数内外this不变, this相当于一个变量</span></div><div class="line">                                 <span class="comment">// 如果是f()&#123;&#125;则this是用户触发的元素,可通过bind()绑定this</span></div><div class="line">            &#125;</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">active</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="keyword">this</span>.view.classList.add(<span class="string">'xxx'</span>)</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">deactive</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="keyword">this</span>.view.classList.remove(<span class="string">'yyy'</span>)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    controller.init(view)         <span class="comment">// controller.init.call(controller, view)</span></div><div class="line">&#125;.call()</div></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// module-3.js 模块 3</span></div><div class="line">!<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> view = 找到对应的模块<span class="number">3</span>元素 </div><div class="line">    <span class="keyword">var</span> controller = &#123;</div><div class="line">        <span class="attr">view</span>: <span class="literal">null</span>,</div><div class="line">        <span class="attr">swiper</span>: <span class="literal">null</span>,</div><div class="line">        <span class="attr">swiperOptions</span>: &#123;</div><div class="line">            选项<span class="number">1</span>：xxx,</div><div class="line">            选项<span class="number">2</span>： xxx,</div><div class="line">            ……</div><div class="line">        &#125;</div><div class="line">        init: <span class="function"><span class="keyword">function</span>(<span class="params">view</span>) </span>&#123;</div><div class="line">            <span class="keyword">this</span>.view = view </div><div class="line">            <span class="keyword">this</span>.initSwiper()</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">initSwiper</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="keyword">this</span>.swiper = <span class="keyword">new</span> Swiper(</div><div class="line">                <span class="keyword">this</span>.view.querySelector(<span class="string">'选择器'</span>),</div><div class="line">                <span class="keyword">this</span>.swiperOptions</div><div class="line">            )</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    controller.init(view)    </div><div class="line">&#125;.call()</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;一、模块化&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;目的：通过对文件的命名和代码的简化，可以更加方便的辨别代码的功能与作用。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;以js代码为例，我们把admin.js，按照功能拆分成module-1.js等三个文件，形成模块。这样每个文件的代码都会小而清晰，这也就是模块化的一种体现。&lt;br&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!--index.html--&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    module-1 of html&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    module-2 of html&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    module-3 of html&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;scirpt&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;module-1.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;   &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;scirpt&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;module-2.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;   &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;scirpt&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;module-3.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="wangsiyuan233.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>窗口高度与obj的高度</title>
    <link href="wangsiyuan233.github.io/2018/05/08/47%E5%90%84%E7%A7%8D%E9%AB%98%E5%BA%A6/"/>
    <id>wangsiyuan233.github.io/2018/05/08/47各种高度/</id>
    <published>2018-05-08T02:55:28.000Z</published>
    <updated>2018-05-08T02:56:04.084Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/nVbZzPn.gif" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://i.imgur.com/nVbZzPn.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="javascript" scheme="wangsiyuan233.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>捕获/阻止捕获、冒泡/阻止冒泡</title>
    <link href="wangsiyuan233.github.io/2018/05/06/46%E5%86%92%E6%B3%A1%E4%B8%8E%E6%8D%95%E8%8E%B7/"/>
    <id>wangsiyuan233.github.io/2018/05/06/46冒泡与捕获/</id>
    <published>2018-05-06T11:31:26.000Z</published>
    <updated>2018-05-06T11:56:30.074Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><blockquote><p>一、冒泡事件</p></blockquote><p>1、虽然我们只点击了button元素，但是，button外的事件<strong>由内向外</strong>以此被触发，触发的顺序是由DOM树的下层到DOM树的最上面，故称为冒泡。<br>2、如果我们不希望事件冒泡呢？那么如何阻止事件冒泡？<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">"button"</span>).addEventListener(<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</div><div class="line">        alert(<span class="string">"button"</span>);</div><div class="line">        event.stopPropagation();    </div><div class="line">&#125;,<span class="literal">false</span>);</div></pre></td></tr></table></figure></p><p>这样，点击button后，只会弹出一个弹窗，显示button。<br>3、冒泡的终点是 window</p><blockquote><p>二、捕获事件</p></blockquote><p>1、把<code>addEventListener()</code>方法的第三个参数由前面例子的<code>false</code>修改为了<code>true</code>,也就是使用捕获方式获得<code>button</code>，<br>2、最外层的事件先被触发，最后才是我们点击的button事件被触发，这便是事件捕获；<br>3、<code>stopPropagation()</code> 和 <code>stopImmediatePropagation()</code> 都可以阻止事件冒泡和事件捕获；<br>4、<code>stopImmediatePropagation()</code> 不仅阻止捕获和冒泡，还阻止该元素的其他事件发生。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;blockquote&gt;
&lt;p&gt;一、冒泡事件&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;1、虽然我们只点击了button元素，但是，button外的事件&lt;strong&gt;由内向外&lt;/strong&gt;以此被触发，触发的顺序是由DOM树的下层到DOM树
      
    
    </summary>
    
    
      <category term="javascript" scheme="wangsiyuan233.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>EventUtil--js事件封装</title>
    <link href="wangsiyuan233.github.io/2018/05/05/45EventUtil/"/>
    <id>wangsiyuan233.github.io/2018/05/05/45EventUtil/</id>
    <published>2018-05-05T12:13:36.000Z</published>
    <updated>2018-05-05T12:21:55.975Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>跨浏览器的事件对象EventUtil</p></blockquote><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> EventUtil = &#123;</div><div class="line"></div><div class="line"><span class="comment">//事件监听</span></div><div class="line">    addHandler: <span class="function"><span class="keyword">function</span>(<span class="params">element,type,handler</span>) </span>&#123; </div><div class="line">        <span class="keyword">if</span>(element.addEventListener) &#123;</div><div class="line">            element.addEventListener(type,handler,<span class="literal">false</span>);</div><div class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(element.attachEvent) &#123;</div><div class="line">            element.attachEvent(<span class="string">"on"</span>+type,handler);</div><div class="line">        &#125;<span class="keyword">else</span> &#123;</div><div class="line">            element[<span class="string">"on"</span> +type] = handler;</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line"></div><div class="line"><span class="comment">//移除事件监听</span></div><div class="line">    removeHandler: <span class="function"><span class="keyword">function</span>(<span class="params">element,type,handler</span>)</span>&#123; </div><div class="line">        <span class="keyword">if</span>(element.removeEventListener) &#123;</div><div class="line">            element.removeEventListener(type,handler,<span class="literal">false</span>);</div><div class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(element.detachEvent) &#123;</div><div class="line">            element.detachEvent(<span class="string">"on"</span>+type,handler);</div><div class="line">        &#125;<span class="keyword">else</span> &#123;</div><div class="line">            element[<span class="string">"on"</span> +type] = <span class="literal">null</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line"></div><div class="line"><span class="comment">//获取event对象，返回event对象的引用</span></div><div class="line">    getEvent: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> event ? event : <span class="built_in">window</span>.event;</div><div class="line">    &#125;,</div><div class="line"></div><div class="line"><span class="comment">//返回事件目标。</span></div><div class="line">    getTarget: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> event.target || event.srcElement;</div><div class="line">    &#125;,</div><div class="line"></div><div class="line"><span class="comment">//取消或者阻止事件默认行为</span></div><div class="line">    preventDefault: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</div><div class="line">        <span class="keyword">if</span>(event.preventDefault) &#123;</div><div class="line">            event.preventDefault();</div><div class="line">        &#125;<span class="keyword">else</span> &#123;</div><div class="line">            event.returnValue = <span class="literal">false</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line"></div><div class="line"><span class="comment">//阻止事件流，阻止事件冒泡</span></div><div class="line">    stopPropagation: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span>(event.stopPropagation) &#123;</div><div class="line">            event.stopPropagation();</div><div class="line">        &#125;<span class="keyword">else</span> &#123;</div><div class="line">            event.cancelBubble = <span class="literal">true</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line"></div><div class="line"><span class="comment">//返回相关元素信息（仅对于mouseover和mouseout事件）</span></div><div class="line">    getRelatedTarget: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</div><div class="line">        <span class="keyword">if</span> (event.relatedTarget)&#123;</div><div class="line">            <span class="keyword">return</span> event.relatedTarget;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (event.toElement)&#123;</div><div class="line">            <span class="keyword">return</span> event.toElement;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (event.fromElement)&#123;</div><div class="line">            <span class="keyword">return</span> event.fromElement;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line"></div><div class="line"><span class="comment">//获取鼠标滚轮增量值，检测是否包含WheelDelta</span></div><div class="line">    getWheelDelta: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span>(event.wheelDelta) &#123;</div><div class="line">            <span class="keyword">return</span> event.wheelDelta;</div><div class="line">        &#125;<span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> -event.detail * <span class="number">40</span></div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line"></div><div class="line"><span class="comment">//获取键盘按键键码。</span></div><div class="line">    getCharCode: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span>(<span class="keyword">typeof</span> event.charCode == <span class="string">'number'</span>) &#123;</div><div class="line">            <span class="keyword">return</span> event.charCode;</div><div class="line">        &#125;<span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> event.keyCode;</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line"></div><div class="line"><span class="comment">//在mouseup或者mousedown的时候，event存在一个button属性，用于判断是按了鼠标左键，右键，还是中键，0鼠标主键按钮，1是中间，2是次键（右键）</span></div><div class="line">    getButton:<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</div><div class="line">        <span class="keyword">if</span>(<span class="built_in">document</span>.implementation.hasFeature(<span class="string">"MouseEvents"</span>,<span class="string">"2.0"</span>))&#123;</div><div class="line">            <span class="keyword">return</span> event.button;</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">switch</span>(event.button)&#123;</div><div class="line">                <span class="keyword">case</span> <span class="number">0</span>:</div><div class="line">                <span class="keyword">case</span> <span class="number">1</span>:</div><div class="line">                <span class="keyword">case</span> <span class="number">3</span>:</div><div class="line">                <span class="keyword">case</span> <span class="number">5</span>:</div><div class="line">                <span class="keyword">case</span> <span class="number">7</span>:</div><div class="line">                  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">                <span class="keyword">case</span> <span class="number">2</span>:</div><div class="line">                <span class="keyword">case</span> <span class="number">6</span>:</div><div class="line">                   <span class="keyword">return</span> <span class="number">2</span>;</div><div class="line">                <span class="keyword">case</span> <span class="number">4</span>:</div><div class="line">                  <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><p>上面就是我们封装的事件对象。</p><p>用法超级简单，例如click事件:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> btn1 = <span class="built_in">document</span>.getElementById(<span class="string">"myBtn1"</span>);</div><div class="line"><span class="keyword">var</span> handler = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">alert(<span class="string">"hello haorooms"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">EventUtil.addHandler(btn1, <span class="string">"click"</span>, handler);</div><div class="line"><span class="comment">//EventUtil.removeHandler(btn1, "click", handler);</span></div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;跨浏览器的事件对象EventUtil&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="wangsiyuan233.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Flex布局</title>
    <link href="wangsiyuan233.github.io/2018/04/21/44Flex%E5%B8%83%E5%B1%80/"/>
    <id>wangsiyuan233.github.io/2018/04/21/44Flex布局/</id>
    <published>2018-04-21T10:47:26.000Z</published>
    <updated>2018-04-21T11:05:39.525Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Flex出现前</p></blockquote><p>我们是这样布局的：<br>1、正常文档流<br>2、<code>float</code> + <code>clear</code> 清除浮动<br>3、<code>relative</code> + <code>absolute</code><br>4、负<code>margin</code><br><a id="more"></a></p><blockquote><p>拥有Flex时</p></blockquote><p>上面的问题<br>迎刃而解！！<br>咯咯哒</p><p><strong>–&gt; flex-content</strong><br>1、<code>flex-direction</code>: 默认是 横向<code>row</code>;<br>2、<code>flex-wrap</code>: 默认是 换行<code>wrap</code>;<br>3、<code>flex-flow</code>: 默认是 <code>row</code> + <code>wrap</code>;<br>4、<code>justify-content</code>: 主轴对齐方式；<br>    <code>space-between</code>: 空余位置在中间；<br>    <code>space-around</code>： 空余位置均匀分布；<br>    <code>flex-start</code>: 向起点靠；<br>5、<code>align-items</code>: 侧轴对齐；</p><p><strong>–&gt; flex-items</strong><br>1、<code>flex</code>: 默认是 <code>flex-grow</code> + <code>flex-shrink</code><br>2、<code>order</code>: 改变元素的顺序</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Flex出现前&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们是这样布局的：&lt;br&gt;1、正常文档流&lt;br&gt;2、&lt;code&gt;float&lt;/code&gt; + &lt;code&gt;clear&lt;/code&gt; 清除浮动&lt;br&gt;3、&lt;code&gt;relative&lt;/code&gt; + &lt;code&gt;absolute&lt;/code&gt;&lt;br&gt;4、负&lt;code&gt;margin&lt;/code&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="CSS" scheme="wangsiyuan233.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>&lt;Algorithms&gt;-1.2数据抽象</title>
    <link href="wangsiyuan233.github.io/2018/04/15/43Algorithms1-2/"/>
    <id>wangsiyuan233.github.io/2018/04/15/43Algorithms1-2/</id>
    <published>2018-04-15T13:08:59.793Z</published>
    <updated>2018-04-22T13:39:27.090Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://book.douban.com/subject/10432347/" target="_blank" rel="external">《算法 （第四版）》</a>梳理框架</p><p>不建议阅读，反正你也读不下去<br><a id="more"></a></p><blockquote><p>1.2 数据抽象</p></blockquote><p>从这一个小节开始，我们讨论一种更加抽象的表达类型<br>/<em> 2018/4/21 p63-p72 </em>/<br>在使用抽象数据时，我们的注意力在API的操作</p><p><strong>1.2.1使用抽象数据类型</strong><br>Counter的值是一个名称和非负整数，初始化0 + 当前值加一 +获取当前值<br>1.2.1.1 抽象数据类型的API<br>抽象数据类型和静态方法库有很多相同之处：<br>1、均为Java类<br>2、可以有0 或 多个参数<br>3、可以返回一个指定数据类型，也有可能不会<br>抽象数据类型和静态方法库的不同之处：<br>1、构造函数会出现若干个名称和类名相同且没有返回值的函数<br>2、实例方法不需要 static 关键字<br>3、继承方法<br>1.2.1.2 继承方法<br>任意数据类型都可以通过API获得<br>1.2.1.3 用例代码<br>API可以让我们写出用例代码而不用知道它是怎样具体实现的<br>1.2.1.4 对象<br>对象是能够承载数据类型的值的实体<br>1.2.1.5 创建对象<br>每一个数据类型的值都存在对象里<br>当我们new一个函数的时候<br>1、分配一个内存空间<br>2、初始化一个值<br>3、返回引用对象<br>1.2.1.6 调用实例方法<br>实例方法和静态方法的调用方式完全相同<br>静态方法的主要作用是实现函数<br>实例方法的主要作用是实现数据类型的操作<br>1.2.1.7 使用对象<br>声明变量，使用new触发函数，调用实例方法<br>1.2.1.8 赋值语句<br>使用引用类型的赋值语句会创建该引用类型的一个副本<br>赋值语句不会创建新的对象<br>两个变量同时指向同一个对象<br>1.2.1.9 将对象作为参数<br>将对象作为参数传给方法，一般能简化用例代码<br>1.2.1.10 将对象作为返回值<br>Java中的方法只有一个返回值，而有了对象我们就能返回多个值了<br>1.2.1.11 数组也是对象<br>Java中，非原始数据类型的值都是对象<br>当我们将数组传递给一个方法或是将一个数组变量放在赋值语句的右侧时<br>我们是在创建该数组引用的一个副本，而不是这个数组的副本<br>1.2.1.12 对象的数组<br>/<em> 2018/4/22 p72-p84 </em>/<br>当我们创建了一个数组对象，意味着我们：<br>1、用括号语法创建了一个数组构造器<br>2、运用一个标准的构造器创建了数组里的每一个对象</p><p><strong>1.2.2 抽象数据类型举例</strong><br>这一小节会介绍一些ADT，你不用知道它的原理就可以用它<br>1.2.2.1 几何对象<br>面向对象编程的一个典型例子是为几何对象设计数据类型<br>1.2.2.2 信息处理<br>为了简化用例的代码，我们为每个类型都提供了两个构造函数<br>一个接受数据，一个解析数据<br>用例还是不需要知道数据的表示方法<br>1.2.2.3 字符串<br>string值和字符数组是不同的<br>数组可以访问每个字符<br>string为操作准备了实例方法<br>1.2.2.4 再谈输入和输出<br>面向对象编程要求我们同时输入和输出</p><p>1.2.3 抽象数据类型的实现<br>第一部分 定义数据类型的值的实例变量<br>第二部分 构造函数和实例方法</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://book.douban.com/subject/10432347/&quot;&gt;《算法 （第四版）》&lt;/a&gt;梳理框架&lt;/p&gt;
&lt;p&gt;不建议阅读，反正你也读不下去&lt;br&gt;
    
    </summary>
    
    
      <category term="算法" scheme="wangsiyuan233.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>初探ES6(5)--Class的继承</title>
    <link href="wangsiyuan233.github.io/2018/04/13/42%E5%88%9D%E6%8E%A2ES6-5/"/>
    <id>wangsiyuan233.github.io/2018/04/13/42初探ES6-5/</id>
    <published>2018-04-13T01:22:09.000Z</published>
    <updated>2018-04-14T00:59:19.198Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><p><strong>1、</strong>Class 可以通过<code>extends</code>关键字实现继承，这比 ES5 的通过修改原型链实现继承，要清晰和方便很多。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ColorPoint</span> <span class="keyword">extends</span> <span class="title">Point</span> </span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>（上面代码定义了一个<code>ColorPoint</code>类，该类通过<code>extends</code>关键字，继承了<code>Point</code>类的所有属性和方法。但是由于没有部署任何代码，所以这两个类完全一样，等于复制了一个<code>Point</code>类。下面，我们在<code>ColorPoint</code>内部加上代码。）<br><a id="more"></a><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ColorPoint</span> <span class="keyword">extends</span> <span class="title">Point</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(x, y, color) &#123;</div><div class="line">    <span class="keyword">super</span>(x, y); <span class="comment">// 调用父类的constructor(x, y)</span></div><div class="line">    <span class="keyword">this</span>.color = color;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  toString() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.color + <span class="string">' '</span> + <span class="keyword">super</span>.toString(); <span class="comment">// 调用父类的toString()</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>（上面代码中，<code>constructor</code>方法和<code>toString</code>方法之中，都出现了<code>super</code>关键字，它在这里表示<strong>父类</strong>的构造函数，用来<strong>新建父类的<code>this</code>对象</strong>。）</p><p><strong>子类必须在<code>constructor</code>方法中调用<code>super</code>方法，否则新建实例时会报错。</strong>这是因为子类没有自己的<code>this</code>对象，而是继承父类的<code>this</code>对象，然后对其进行加工。如果不调用super方法，子类就得不到<code>this</code>对象。</p><p>ES5 的继承，实质是<strong>先创造子类</strong>的实例对象<code>this</code>，然后再将父类的方法添加到<code>this</code>上面（<code>Parent.apply(this)</code>）。<br>ES6 的继承机制完全不同，实质是<strong>先创造父类</strong>的实例对象<code>this</code>（所以必须先调用<code>super</code>方法），然后再用子类的构造函数修改<code>this</code>。</p><p><strong>2、</strong>在子类的构造函数中，只有调用<code>super</code>之后，才可以使用<code>this</code>关键字，否则会报错。这是因为子类实例的构建，是基于对父类实例加工，只有<code>super</code>方法才能返回父类实例。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(x, y) &#123;</div><div class="line">    <span class="keyword">this</span>.x = x;</div><div class="line">    <span class="keyword">this</span>.y = y;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ColorPoint</span> <span class="keyword">extends</span> <span class="title">Point</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(x, y, color) &#123;</div><div class="line">    <span class="keyword">this</span>.color = color; <span class="comment">// ReferenceError</span></div><div class="line">    <span class="keyword">super</span>(x, y);</div><div class="line">    <span class="keyword">this</span>.color = color; <span class="comment">// 正确</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>（上面代码中，子类的<code>constructor</code>方法没有调用<code>super</code>之前，就使用<code>this</code>关键字，结果报错，而放在<code>super</code>方法之后就是正确的。）</p><p><strong>3、</strong>可以使用<code>Object.getPrototypeOf</code>方法判断，一个类是否继承了另一个类。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Object</span>.getPrototypeOf(ColorPoint) === Point  <span class="comment">// true</span></div></pre></td></tr></table></figure></p><h2 id="二、extends-的继承目标"><a href="#二、extends-的继承目标" class="headerlink" title="二、extends 的继承目标"></a>二、<code>extends</code> 的继承目标</h2><p><code>extends</code>后面可以跟多种类型的值。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//第一种，子类继承Object类。</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">extends</span> <span class="title">Object</span> </span>&#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line">A.__proto__ === <span class="built_in">Object</span> <span class="comment">// true</span></div><div class="line">A.prototype.__proto__ === <span class="built_in">Object</span>.prototype <span class="comment">// true</span></div></pre></td></tr></table></figure></p><p>（第1种情况下，A其实就是构造函数<code>Object</code>的复制，A的实例就是<code>Object</code>的实例。）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//第二种，不存在任何继承。</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line">A.__proto__ === <span class="built_in">Function</span>.prototype <span class="comment">// true</span></div><div class="line">A.prototype.__proto__ === <span class="built_in">Object</span>.prototype <span class="comment">// true</span></div></pre></td></tr></table></figure><p>（第2种情况下，A作为一个基类（即不存在任何继承），就是一个普通函数，所以直接继承<code>Function.prototype</code>。但是，A调用后返回一个空对象（即<code>Object</code>实例），所以<code>A.prototype.__proto__</code>指向构造函数（Object）的<code>prototype</code>属性。）<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//第三种，子类继承null。</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">extends</span> <span class="title">null</span> </span>&#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line">A.__proto__ === <span class="built_in">Function</span>.prototype <span class="comment">// true</span></div><div class="line">A.prototype.__proto__ === <span class="literal">undefined</span> <span class="comment">// true</span></div></pre></td></tr></table></figure></p><p>（第3情况与第2种情况非常像。A也是一个普通函数，所以直接继承<code>Function.prototype</code>。但是，A调用后返回的对象不继承任何方法，所以它的<code>__proto__</code>指向<code>Function.prototype</code>，即实质上执行了下面的代码。）</p><h2 id="三、super"><a href="#三、super" class="headerlink" title="三、super"></a>三、<code>super</code></h2><p><code>super</code>关键字，既可以当作函数使用，也可以当作对象使用。在这两种情况下，它的用法完全不同。<br><strong>1、当作函数使用</strong><br><code>super</code>作为函数调用时，代表父类的构造函数。ES6 要求，子类的构造函数必须执行一次<code>super</code>函数。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>() &#123;</div><div class="line">    <span class="keyword">super</span>();</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>（上面代码中，子类B的构造函数之中的<code>super()</code>，代表调用父类的构造函数。这是必须的，否则 JavaScript 引擎会报错。）</p><p>注意，<code>super</code>虽然代表了父类A的构造函数，但是返回的是子类B的实例，<strong>即<code>super</code>内部的this指的是B</strong>，因此<code>super()</code>在这里相当于<code>A.prototype.constructor.call(this)</code>。</p><p>作为函数时，super()只能用在<strong>子类的构造函数</strong>之中，用在其他地方就会报错。</p><p><strong>2、当作对象使用</strong></p><p><strong>在普通方法中，指向父类的原型对象；在静态方法中，指向父类。</strong></p><p>2.1普通方法，指向父类的原型对象<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</div><div class="line">  p() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="number">2</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>() &#123;</div><div class="line">    <span class="keyword">super</span>();</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">super</span>.p()); <span class="comment">// 2</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> b = <span class="keyword">new</span> B();</div></pre></td></tr></table></figure></p><p>（上面代码中，子类B当中的<code>super.p()</code>，就是将<code>super</code>当作一个对象使用。这时，<code>super</code>在普通方法之中，指向<code>A.prototype</code>，所以<code>super.p()</code>就相当于<code>A.prototype.p()</code>。）</p><p>ES6 规定，在子类普通方法中通过<code>super</code>调用父类的方法时，方法内部的<code>this</code><strong>指向当前的子类实例</strong>。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>() &#123;</div><div class="line">    <span class="keyword">this</span>.x = <span class="number">1</span>;</div><div class="line">  &#125;</div><div class="line">  print() &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.x);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>() &#123;</div><div class="line">    <span class="keyword">super</span>();</div><div class="line">    <span class="keyword">this</span>.x = <span class="number">2</span>;</div><div class="line">  &#125;</div><div class="line">  m() &#123;</div><div class="line">    <span class="keyword">super</span>.print();</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> b = <span class="keyword">new</span> B();</div><div class="line">b.m() <span class="comment">// 2</span></div></pre></td></tr></table></figure></p><p>（上面代码中，<code>super.print()</code>虽然调用的是<code>A.prototype.print()</code>，但是<code>A.prototype.print()</code>内部的<code>this</code>指向子类B的实例，导致输出的是2，而不是1。也就是说，实际上执行的是<code>super.print.call(this)</code>。）</p><p>由于<code>this</code>指向子类实例，所以如果通过<code>super</code>对某个属性赋值，这时<code>super</code>就是<code>this</code>，赋值的属性会变成子类实例的属性。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>() &#123;</div><div class="line">    <span class="keyword">this</span>.x = <span class="number">1</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>() &#123;</div><div class="line">    <span class="keyword">super</span>();</div><div class="line">    <span class="keyword">this</span>.x = <span class="number">2</span>;</div><div class="line">    <span class="keyword">super</span>.x = <span class="number">3</span>;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">super</span>.x); <span class="comment">// undefined</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.x); <span class="comment">// 3</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> b = <span class="keyword">new</span> B();</div></pre></td></tr></table></figure></p><p>（上面代码中，<code>super.x</code>赋值为3，这时等同于对<code>this.x</code>赋值为3。而当读取<code>super.x</code>的时候，读的是<code>A.prototype.x</code>，所以返回<code>undefined</code>。）</p><p>2.2静态方法中，指向父类<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span> </span>&#123;</div><div class="line">  <span class="keyword">static</span> myMethod(msg) &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'static'</span>, msg);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  myMethod(msg) &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'instance'</span>, msg);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Parent</span> </span>&#123;</div><div class="line">  <span class="keyword">static</span> myMethod(msg) &#123;</div><div class="line">    <span class="keyword">super</span>.myMethod(msg);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  myMethod(msg) &#123;</div><div class="line">    <span class="keyword">super</span>.myMethod(msg);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Child.myMethod(<span class="number">1</span>); <span class="comment">// static 1</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> child = <span class="keyword">new</span> Child();</div><div class="line">child.myMethod(<span class="number">2</span>); <span class="comment">// instance 2</span></div></pre></td></tr></table></figure></p><p>（上面代码中，<code>super</code>在静态方法之中指向父类，在普通方法之中指向父类的原型对象。）</p><p>在子类的静态方法中通过<code>super</code>调用父类的方法时，方法内部的<code>this</code>指向当前的子类，而不是子类的实例。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>() &#123;</div><div class="line">    <span class="keyword">this</span>.x = <span class="number">1</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">static</span> print() &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.x);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>() &#123;</div><div class="line">    <span class="keyword">super</span>();</div><div class="line">    <span class="keyword">this</span>.x = <span class="number">2</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">static</span> m() &#123;</div><div class="line">    <span class="keyword">super</span>.print();</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">B.x = <span class="number">3</span>;</div><div class="line">B.m() <span class="comment">// 3</span></div></pre></td></tr></table></figure></p><p>（上面代码中，静态方法<code>B.m</code>里面，<code>super.print</code>指向父类的静态方法。这个方法里面的<code>this</code>指向的是B，而不是B的实例）</p><h2 id="四、类的-prototype属性和-proto-属性"><a href="#四、类的-prototype属性和-proto-属性" class="headerlink" title="四、类的 prototype属性和__proto__属性"></a>四、类的 <code>prototype</code>属性和<code>__proto__</code>属性</h2><p>ES5 中，每一个对象都有<code>__proto__</code>属性，指向对应的构造函数的<code>prototype</code>属性。<br>Class 作为构造函数的语法糖，同时有<code>prototype</code>属性和<code>__proto__</code>属性，因此同时存在两条继承链。<br><strong>1、</strong>子类的<code>__proto__</code>属性，表示构造函数的继承，总是指向父类。<br><strong>2、</strong>子类<code>prototype</code>属性的<code>__proto__</code>属性，<strong>表示方法的继承</strong>，总是指向父类的<code>prototype</code>属性。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line">B.__proto__ === A <span class="comment">// true</span></div><div class="line">B.prototype.__proto__ === A.prototype <span class="comment">// true</span></div></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Object</span>.setPrototypeOf(B.prototype, A.prototype);</div><div class="line"><span class="comment">// 等同于</span></div><div class="line">B.prototype.__proto__ = A.prototype;</div><div class="line"></div><div class="line"><span class="built_in">Object</span>.setPrototypeOf(B, A);</div><div class="line"><span class="comment">// 等同于</span></div><div class="line">B.__proto__ = A;</div></pre></td></tr></table></figure><p>上面这两条继承链，可以这样理解：<br><strong>作为一个对象，子类（B）的原型（<code>__proto__</code>属性）是父类（A）；</strong><br><strong>作为一个构造函数，子类（B）的原型对象（<code>prototype</code>属性）是父类的原型对象（<code>prototype</code>属性）的实例。</strong></p><h2 id="五、实例的-proto-属性"><a href="#五、实例的-proto-属性" class="headerlink" title="五、实例的 __proto__属性"></a>五、实例的 <code>__proto__</code>属性</h2><p>子类实例的<code>__proto__</code>属性的<code>__proto__</code>属性，指向父类实例的<code>__proto__</code>属性。也就是说，子类的原型的原型，是父类的原型。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Point(<span class="number">2</span>, <span class="number">3</span>);</div><div class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> ColorPoint(<span class="number">2</span>, <span class="number">3</span>, <span class="string">'red'</span>);</div><div class="line"></div><div class="line">p2.__proto__ === p1.__proto__ <span class="comment">// false</span></div><div class="line">p2.__proto__.__proto__ === p1.__proto__ <span class="comment">// true</span></div></pre></td></tr></table></figure></p><p>（上面代码中，<code>ColorPoint</code>继承了<code>Point</code>，导致前者原型的原型是后者的原型。）</p><h2 id="六、原生构造函数的继承"><a href="#六、原生构造函数的继承" class="headerlink" title="六、原生构造函数的继承"></a>六、原生构造函数的继承</h2><p>ES5 中原生构造函数是无法继承的。<br><code>Boolean()</code>、<code>Number()</code>、<code>String()</code>、<code>Array()</code>、<code>Date()</code>、<code>Function()</code>、<code>RegExp()</code>、<code>Error()</code>、<code>Object()</code><br>ES6 允许继承原生构造函数定义子类，因为 ES6 是先新建父类的实例对象<code>this</code>，然后再用子类的构造函数修饰<code>this</code>，使得父类的所有行为都可以继承。下面是一个继承<code>Array</code>的例子。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyArray</span> <span class="keyword">extends</span> <span class="title">Array</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(...args) &#123;</div><div class="line">    <span class="keyword">super</span>(...args);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> MyArray();</div><div class="line">arr[<span class="number">0</span>] = <span class="number">12</span>;</div><div class="line">arr.length <span class="comment">// 1</span></div><div class="line"></div><div class="line">arr.length = <span class="number">0</span>;</div><div class="line">arr[<span class="number">0</span>] <span class="comment">// undefined</span></div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、简介&quot;&gt;&lt;a href=&quot;#一、简介&quot; class=&quot;headerlink&quot; title=&quot;一、简介&quot;&gt;&lt;/a&gt;一、简介&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;1、&lt;/strong&gt;Class 可以通过&lt;code&gt;extends&lt;/code&gt;关键字实现继承，这比 ES5 的通过修改原型链实现继承，要清晰和方便很多。&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Point&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ColorPoint&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Point&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;（上面代码定义了一个&lt;code&gt;ColorPoint&lt;/code&gt;类，该类通过&lt;code&gt;extends&lt;/code&gt;关键字，继承了&lt;code&gt;Point&lt;/code&gt;类的所有属性和方法。但是由于没有部署任何代码，所以这两个类完全一样，等于复制了一个&lt;code&gt;Point&lt;/code&gt;类。下面，我们在&lt;code&gt;ColorPoint&lt;/code&gt;内部加上代码。）&lt;br&gt;
    
    </summary>
    
    
      <category term="ES6" scheme="wangsiyuan233.github.io/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>初探ES6(4)--Class的基本语法</title>
    <link href="wangsiyuan233.github.io/2018/04/10/41%E5%88%9D%E6%8E%A2ES6-4/"/>
    <id>wangsiyuan233.github.io/2018/04/10/41初探ES6-4/</id>
    <published>2018-04-10T01:22:09.000Z</published>
    <updated>2018-04-14T00:59:09.540Z</updated>
    
    <content type="html"><![CDATA[<p>类和模块的内部，默认就是<strong>严格模式</strong>，所以不需要使用<code>use strict</code>指定运行模式。只要你的代码写在类或模块之中，就只有严格模式可用。<br>考虑到未来所有的代码，其实都是运行在模块之中，所以 ES6 实际上把整个语言升级到了严格模式。</p><h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><p>JavaScript 中：<strong>生成一个对象的传统方法就是new一个函数</strong><br><a id="more"></a><br><strong>1、</strong>ES6 的类，完全可以看作<strong>构造函数</strong>的另一种写法。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">typeof</span> Point <span class="comment">// "function"</span></div><div class="line">Point === Point.prototype.constructor <span class="comment">// true</span></div></pre></td></tr></table></figure></p><p>类的数据类型就是函数，类本身就指向构造函数。</p><p>注意，定义“类”的方法的时候，前面不需要加上<code>function</code>这个关键字，直接把函数定义放进去了就可以了。另外，方法之间不需要逗号分隔，加了会报错。</p><p><strong>2、</strong>事实上，类的所有方法都定义在类的<code>prototype</code>属性上面。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>() &#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  toString() &#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  toValue() &#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 等同于 等同于 等同于</span></div><div class="line"></div><div class="line">Point.prototype = &#123;</div><div class="line">  <span class="keyword">constructor</span>() &#123;&#125;,</div><div class="line">  toString() &#123;&#125;,</div><div class="line">  toValue() &#123;&#125;,</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p><h2 id="二、constructor方法"><a href="#二、constructor方法" class="headerlink" title="二、constructor方法"></a>二、constructor方法</h2><p><strong>1、</strong>constructor方法是类的默认方法，通过new命令生成对象实例时，自动调用该方法。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 等同于 等同于 等同于</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>() &#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><strong>2、</strong>constructor方法默认返回实例对象（即<code>this</code>），完全可以指定返回另外一个对象。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.create(<span class="literal">null</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">new</span> Foo() <span class="keyword">instanceof</span> Foo<span class="comment">// false</span></div></pre></td></tr></table></figure></p><p>（上面代码中，constructor函数返回一个全新的对象，结果导致实例对象不是Foo类的实例。）</p><p><strong>3、</strong>类必须使用<code>new</code>调用，否则会报错。这是它跟普通构造函数的一个主要区别，后者不用<code>new</code>也可以执行。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.create(<span class="literal">null</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Foo()</div><div class="line"><span class="comment">// TypeError: Class constructor Foo cannot be invoked without 'new'</span></div></pre></td></tr></table></figure></p><h2 id="三、类的实例对象"><a href="#三、类的实例对象" class="headerlink" title="三、类的实例对象"></a>三、类的实例对象</h2><p><strong>1、</strong>与 ES5 一样，实例的属性除非显式定义在其本身（即定义在<code>this</code>对象上），否则都是定义在原型上（即定义在<code>class</code>上）。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//定义类</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="keyword">constructor</span>(x, y) &#123;</div><div class="line">    <span class="keyword">this</span>.x = x;</div><div class="line">    <span class="keyword">this</span>.y = y;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  toString() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">'('</span> + <span class="keyword">this</span>.x + <span class="string">', '</span> + <span class="keyword">this</span>.y + <span class="string">')'</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> point = <span class="keyword">new</span> Point(<span class="number">2</span>, <span class="number">3</span>);</div><div class="line"></div><div class="line">point.toString() <span class="comment">// (2, 3)</span></div><div class="line"></div><div class="line">point.hasOwnProperty(<span class="string">'x'</span>) <span class="comment">// true</span></div><div class="line">point.hasOwnProperty(<span class="string">'y'</span>) <span class="comment">// true</span></div><div class="line">point.hasOwnProperty(<span class="string">'toString'</span>) <span class="comment">// false</span></div><div class="line">point.__proto__.hasOwnProperty(<span class="string">'toString'</span>) <span class="comment">// true</span></div></pre></td></tr></table></figure></p><p>（上面代码中，<code>x</code>和<code>y</code>都是实例对象<code>point</code>自身的属性（因为定义在<code>this</code>变量上），所以<code>hasOwnProperty</code>方法返回<code>true</code>，而<code>toString</code>是原型对象的属性（因为定义在<code>Point</code>类上），所以<code>hasOwnProperty</code>方法返回<code>false</code>。这些都与 ES5 的行为保持一致。）<br><strong>2、类的所有实例共享一个原型对象。</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Point(<span class="number">2</span>,<span class="number">3</span>);</div><div class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> Point(<span class="number">3</span>,<span class="number">2</span>);</div><div class="line"></div><div class="line">p1.__proto__ === p2.__proto__  <span class="comment">//true</span></div></pre></td></tr></table></figure></p><p>（<code>p1</code>和<code>p2</code>都是<code>Point</code>的实例，它们的原型都是<code>Point.prototype</code>，所以<code>__proto__</code>属性是相等的。）</p><p>这也意味着，可以通过实例的<code>__proto__</code>属性为“类”添加方法。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Point(<span class="number">2</span>,<span class="number">3</span>);</div><div class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> Point(<span class="number">3</span>,<span class="number">2</span>);</div><div class="line"></div><div class="line">p1.__proto__.printName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="string">'Oops'</span> &#125;;</div><div class="line"></div><div class="line">p1.printName() <span class="comment">// "Oops"</span></div><div class="line">p2.printName() <span class="comment">// "Oops"</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> p3 = <span class="keyword">new</span> Point(<span class="number">4</span>,<span class="number">2</span>);</div><div class="line">p3.printName() <span class="comment">// "Oops"</span></div></pre></td></tr></table></figure></p><p>（上面代码在<code>p1</code>的原型上添加了一个<code>printName</code>方法，由于<code>p1</code>的原型就是<code>p2</code>的原型，因此<code>p2</code>也可以调用这个方法。而且，此后新建的实例<code>p3</code>也可以调用这个方法。这意味着，使用实例的<code>__proto__</code>属性改写原型，必须相当谨慎，不推荐使用，因为这会改变“类”的原始定义，影响到所有实例。）</p><h2 id="四、this-的指向"><a href="#四、this-的指向" class="headerlink" title="四、this 的指向"></a>四、this 的指向</h2><p><strong>类的方法内部如果含有<code>this</code>，它默认指向类的实例。</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Logger</span> </span>&#123;</div><div class="line">  printName(name = <span class="string">'there'</span>) &#123;</div><div class="line">    <span class="keyword">this</span>.print(<span class="string">`Hello <span class="subst">$&#123;name&#125;</span>`</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  print(text) &#123;</div><div class="line">    <span class="built_in">console</span>.log(text);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> logger = <span class="keyword">new</span> Logger();</div><div class="line"><span class="keyword">const</span> &#123; printName &#125; = logger;</div><div class="line">printName(); <span class="comment">// TypeError: Cannot read property 'print' of undefined</span></div></pre></td></tr></table></figure></p><p>（为啥会报错呢？ 因为<code>printName</code>方法中的<code>this</code>，默认指向<code>Logger</code>类的实例。但是，如果将这个方法提取出来单独使用，<code>this</code>会指向该方法运行时所在的环境，因为找不到<code>print</code>方法而导致报错。）<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 解决方法一：用bind绑定</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Logger</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>() &#123;</div><div class="line">    <span class="keyword">this</span>.printName = <span class="keyword">this</span>.printName.bind(<span class="keyword">this</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// ...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 解决方法二：用箭头函数</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Logger</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>() &#123;</div><div class="line">    <span class="keyword">this</span>.printName = <span class="function">(<span class="params">name = <span class="string">'there'</span></span>) =&gt;</span> &#123;</div><div class="line">      <span class="keyword">this</span>.print(<span class="string">`Hello <span class="subst">$&#123;name&#125;</span>`</span>);</div><div class="line">    &#125;;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// ...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;类和模块的内部，默认就是&lt;strong&gt;严格模式&lt;/strong&gt;，所以不需要使用&lt;code&gt;use strict&lt;/code&gt;指定运行模式。只要你的代码写在类或模块之中，就只有严格模式可用。&lt;br&gt;考虑到未来所有的代码，其实都是运行在模块之中，所以 ES6 实际上把整个语言升级到了严格模式。&lt;/p&gt;
&lt;h2 id=&quot;一、简介&quot;&gt;&lt;a href=&quot;#一、简介&quot; class=&quot;headerlink&quot; title=&quot;一、简介&quot;&gt;&lt;/a&gt;一、简介&lt;/h2&gt;&lt;p&gt;JavaScript 中：&lt;strong&gt;生成一个对象的传统方法就是new一个函数&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="ES6" scheme="wangsiyuan233.github.io/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>初探ES6(3)--箭头函数</title>
    <link href="wangsiyuan233.github.io/2018/04/07/40%E5%88%9D%E6%8E%A2ES6-3/"/>
    <id>wangsiyuan233.github.io/2018/04/07/40初探ES6-3/</id>
    <published>2018-04-07T01:22:09.000Z</published>
    <updated>2018-04-14T00:58:50.547Z</updated>
    
    <content type="html"><![CDATA[<p>这可能是我第三次尝试写箭头函数了吧哈哈<br>(<em>^▽^</em>)  特写此文预祝比特币大跌  ٩(๑&gt;◡&lt;๑)۶<br><a id="more"></a></p><blockquote><p>用处一：简化回调函数</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 正常函数写法</span></div><div class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].map(<span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> x * x;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 箭头函数写法</span></div><div class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].map(<span class="function"><span class="params">x</span> =&gt;</span> x * x);</div><div class="line"></div><div class="line"><span class="comment">// 正常函数写法</span></div><div class="line"><span class="keyword">var</span> result = values.sort(<span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> a - b;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 箭头函数写法</span></div><div class="line"><span class="keyword">var</span> result = values.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b);</div></pre></td></tr></table></figure><blockquote><p>用处二：简化this的指向</p></blockquote><p>箭头函数有几个使用注意点。</p><p>（1）函数体内的<code>this</code>对象，就是<strong>【定-义-时】</strong>所在的对象，而不是<strong>【使-用-时】</strong>所在的对象。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Timer</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.s1 = <span class="number">0</span>;</div><div class="line">  <span class="keyword">this</span>.s2 = <span class="number">0</span>;</div><div class="line">  <span class="comment">// 箭头函数</span></div><div class="line">  setInterval(<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">this</span>.s1++, <span class="number">1000</span>);</div><div class="line">  <span class="comment">// 普通函数</span></div><div class="line">  setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.s2++;</div><div class="line">  &#125;, <span class="number">1000</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> timer = <span class="keyword">new</span> Timer();</div><div class="line"></div><div class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'s1: '</span>, timer.s1), <span class="number">3100</span>);</div><div class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'s2: '</span>, timer.s2), <span class="number">3100</span>);</div><div class="line"><span class="comment">// s1: 3</span></div><div class="line"><span class="comment">// s2: 0</span></div></pre></td></tr></table></figure></p><p>上面代码中，<code>Timer</code>函数内部设置了两个定时器，分别使用了箭头函数和普通函数。前者的<code>this</code>绑定定义时所在的作用域（即<code>Timer</code>函数），后者的<code>this</code>指向运行时所在的作用域（即全局对象）。所以，3100 毫秒之后，<code>timer.s1</code>被更新了 3 次，而<code>timer.s2</code>一次都没更新。</p><p>（2）箭头函数不可以当作构造函数，也就是说，不可以使用<code>new</code>命令，否则会抛出一个错误。<br><code>this</code>指向的固定化，并不是因为箭头函数内部有绑定<code>this</code>的机制，<strong>实际原因是箭头函数根本没有自己的<code>this</code></strong>，导致内部的<code>this</code>就是外层代码块的<code>this</code>。正是因为它没有<code>this</code>，所以也就不能用作构造函数。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">      <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'id:'</span>, <span class="keyword">this</span>.id);</div><div class="line">      &#125;;</div><div class="line">    &#125;;</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> f = foo.call(&#123;<span class="attr">id</span>: <span class="number">1</span>&#125;);</div><div class="line"></div><div class="line"><span class="keyword">var</span> t1 = f.call(&#123;<span class="attr">id</span>: <span class="number">2</span>&#125;)()(); <span class="comment">// id: 1</span></div><div class="line"><span class="keyword">var</span> t2 = f().call(&#123;<span class="attr">id</span>: <span class="number">3</span>&#125;)(); <span class="comment">// id: 1</span></div><div class="line"><span class="keyword">var</span> t3 = f()().call(&#123;<span class="attr">id</span>: <span class="number">4</span>&#125;); <span class="comment">// id: 1</span></div></pre></td></tr></table></figure></p><p>上面代码之中，只有一个<code>this</code>，就是函数<code>foo</code>的<code>this</code>，所以t1、t2、t3都输出同样的结果。因为所有的内层函数都是箭头函数，都没有自己的<code>this</code>，它们的this其实都是最外层<code>foo</code>函数的<code>this</code>。</p><p>（3）指向外层函数的对应的三个变量：<code>arguments</code>、<code>super</code>、<code>new.target</code>在箭头函数之中也是不存在的。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'args:'</span>, <span class="built_in">arguments</span>);</div><div class="line">  &#125;, <span class="number">100</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">foo(<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>)</div><div class="line"><span class="comment">// args: [2, 4, 6, 8]</span></div></pre></td></tr></table></figure></p><p>上面代码中，箭头函数内部的变量arguments，其实是函数foo的arguments变量。</p><p>（4）不可以使用<code>yield</code>命令，因此箭头函数不能用作 <code>Generator</code>函数。<br>（5）箭头函数没有自己的this，所以当然也就不能用<code>call()</code>、<code>apply()</code>、<code>bind()</code>这些方法去改变this的指向。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> [</div><div class="line">    <span class="function">(<span class="params">(</span>) =&gt;</span> <span class="keyword">this</span>.x).bind(&#123; <span class="attr">x</span>: <span class="string">'inner'</span> &#125;)()</div><div class="line">  ];</div><div class="line">&#125;).call(&#123; <span class="attr">x</span>: <span class="string">'outer'</span> &#125;);</div><div class="line"><span class="comment">// ['outer']</span></div></pre></td></tr></table></figure></p><p>ES6的箭头函数极大的解决了ES5中this‘指向不明’的错误 （面试当然不考ES6的this啦）</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这可能是我第三次尝试写箭头函数了吧哈哈&lt;br&gt;(&lt;em&gt;^▽^&lt;/em&gt;)  特写此文预祝比特币大跌  ٩(๑&amp;gt;◡&amp;lt;๑)۶&lt;br&gt;
    
    </summary>
    
    
      <category term="ES6" scheme="wangsiyuan233.github.io/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>初探ES6(2)--变量的解构赋值</title>
    <link href="wangsiyuan233.github.io/2018/04/05/39%E5%88%9D%E6%8E%A2ES6-2/"/>
    <id>wangsiyuan233.github.io/2018/04/05/39初探ES6-2/</id>
    <published>2018-04-05T01:22:09.000Z</published>
    <updated>2018-04-14T00:58:40.240Z</updated>
    
    <content type="html"><![CDATA[<p><strong>从数组和对象中提取值，对变量进行赋值，这被称为解构。</strong></p><h2 id="一、数组的解构赋值"><a href="#一、数组的解构赋值" class="headerlink" title="一、数组的解构赋值"></a>一、数组的解构赋值</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//以前ES5</span></div><div class="line"><span class="keyword">let</span> a = <span class="number">1</span>;</div><div class="line"><span class="keyword">let</span> b = <span class="number">2</span>;</div><div class="line"><span class="keyword">let</span> c = <span class="number">3</span>;</div><div class="line"></div><div class="line"><span class="comment">//现在ES6</span></div><div class="line"><span class="keyword">let</span> [a, b, c] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</div><div class="line"></div><div class="line"><span class="keyword">let</span> [foo, [[bar], baz]] = [<span class="number">1</span>, [[<span class="number">2</span>], <span class="number">3</span>]];</div><div class="line">foo <span class="comment">// 1</span></div><div class="line">bar <span class="comment">// 2</span></div><div class="line">baz <span class="comment">// 3</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> [ , , third] = [<span class="string">"foo"</span>, <span class="string">"bar"</span>, <span class="string">"baz"</span>];</div><div class="line">third <span class="comment">// "baz"</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> [x, , y] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</div><div class="line">x <span class="comment">// 1</span></div><div class="line">y <span class="comment">// 3</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> [head, ...tail] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</div><div class="line">head <span class="comment">// 1</span></div><div class="line">tail <span class="comment">// [2, 3, 4]</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> [x, y, ...z] = [<span class="string">'a'</span>];</div><div class="line">x <span class="comment">// "a"</span></div><div class="line">y <span class="comment">// undefined 解构不成功，变量的值就等于undefined。</span></div><div class="line">z <span class="comment">// []</span></div><div class="line"></div><div class="line"><span class="comment">//下面两个例子属于不完全结构，也可以成功</span></div><div class="line"><span class="keyword">let</span> [x, y] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</div><div class="line">x <span class="comment">// 1</span></div><div class="line">y <span class="comment">// 2</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> [a, [b], d] = [<span class="number">1</span>, [<span class="number">2</span>, <span class="number">3</span>], <span class="number">4</span>];</div><div class="line">a <span class="comment">// 1</span></div><div class="line">b <span class="comment">// 2 是个谜</span></div><div class="line">d <span class="comment">// 4</span></div></pre></td></tr></table></figure><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 下面的语句都会报错，因为等号右边的值，要么转为对象以后不具备 Iterator 接口（前五个表达式），要么本身就不具备 Iterator 接口（最后一个表达式）。</span></div><div class="line"><span class="keyword">let</span> [foo] = <span class="number">1</span>;</div><div class="line"><span class="keyword">let</span> [foo] = <span class="literal">false</span>;</div><div class="line"><span class="keyword">let</span> [foo] = <span class="literal">NaN</span>;</div><div class="line"><span class="keyword">let</span> [foo] = <span class="literal">undefined</span>;</div><div class="line"><span class="keyword">let</span> [foo] = <span class="literal">null</span>;</div><div class="line"><span class="keyword">let</span> [foo] = &#123;&#125;;</div><div class="line"><span class="comment">//定眼一瞧这不是基本类型吗哈哈</span></div></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//默认值</span></div><div class="line"><span class="keyword">let</span> [foo = <span class="literal">true</span>] = [];</div><div class="line">foo <span class="comment">// true</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> [x, y = <span class="string">'b'</span>] = [<span class="string">'a'</span>]; <span class="comment">// x='a', y='b'</span></div><div class="line"><span class="keyword">let</span> [x, y = <span class="string">'b'</span>] = [<span class="string">'a'</span>, <span class="literal">undefined</span>]; <span class="comment">// x='a', y='b'</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> [x = <span class="number">1</span>, y = x] = [];     <span class="comment">// x=1; y=1</span></div><div class="line"><span class="keyword">let</span> [x = <span class="number">1</span>, y = x] = [<span class="number">2</span>];    <span class="comment">// x=2; y=2</span></div><div class="line"><span class="keyword">let</span> [x = <span class="number">1</span>, y = x] = [<span class="number">1</span>, <span class="number">2</span>]; <span class="comment">// x=1; y=2</span></div><div class="line"><span class="keyword">let</span> [x = y, y = <span class="number">1</span>] = [];     <span class="comment">// ReferenceError: y is not defined x用y做默认值时，y还没有声明</span></div></pre></td></tr></table></figure><h2 id="二、对象的解构赋值"><a href="#二、对象的解构赋值" class="headerlink" title="二、对象的解构赋值"></a>二、对象的解构赋值</h2><p><strong>对象</strong>的解构赋值的内部机制，是先找到同名属性，然后再赋给对应的变量。真正被赋值的是后者，而不是前者。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//下面代码中，foo是匹配的模式，baz才是变量。真正被赋值的是变量baz，而不是模式foo。</span></div><div class="line"><span class="keyword">let</span> &#123; <span class="attr">foo</span>: baz &#125; = &#123; <span class="attr">foo</span>: <span class="string">"aaa"</span>, <span class="attr">bar</span>: <span class="string">"bbb"</span> &#125;;</div><div class="line">baz <span class="comment">// "aaa"</span></div><div class="line">foo <span class="comment">// error: foo is not defined</span></div></pre></td></tr></table></figure></p><h2 id="三、字符串的解构赋值"><a href="#三、字符串的解构赋值" class="headerlink" title="三、字符串的解构赋值"></a>三、字符串的解构赋值</h2><p>解构赋值的规则是，只要等号右边的值<strong>不是对象或数组</strong>，就先将其转为对象。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> [a, b, c, d, e] = <span class="string">'hello'</span>;</div><div class="line">a <span class="comment">// "h"</span></div><div class="line">b <span class="comment">// "e"</span></div><div class="line">c <span class="comment">// "l"</span></div><div class="line">d <span class="comment">// "l"</span></div><div class="line">e <span class="comment">// "o"</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> &#123;<span class="attr">length</span> : len&#125; = <span class="string">'hello'</span>;</div><div class="line">len <span class="comment">// 5</span></div></pre></td></tr></table></figure></p><h2 id="四、数值和布尔值的解构赋值"><a href="#四、数值和布尔值的解构赋值" class="headerlink" title="四、数值和布尔值的解构赋值"></a>四、数值和布尔值的解构赋值</h2><p>解构赋值的规则是，只要等号右边的值<strong>不是对象或数组</strong>，就先将其转为对象。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> &#123;<span class="attr">toString</span>: s&#125; = <span class="number">123</span>;</div><div class="line">s === <span class="built_in">Number</span>.prototype.toString <span class="comment">// true</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> &#123;<span class="attr">toString</span>: s&#125; = <span class="literal">true</span>;</div><div class="line">s === <span class="built_in">Boolean</span>.prototype.toString <span class="comment">// true</span></div></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//由于undefined和null无法转为对象，所以对它们进行解构赋值，都会报错。</span></div><div class="line"><span class="keyword">let</span> &#123; <span class="attr">prop</span>: x &#125; = <span class="literal">undefined</span>; <span class="comment">// TypeError</span></div><div class="line"><span class="keyword">let</span> &#123; <span class="attr">prop</span>: y &#125; = <span class="literal">null</span>; <span class="comment">// TypeError</span></div></pre></td></tr></table></figure><h2 id="五、函数参数的解构赋值"><a href="#五、函数参数的解构赋值" class="headerlink" title="五、函数参数的解构赋值"></a>五、函数参数的解构赋值</h2><p>解构赋值的规则是，只要等号右边的值<strong>不是对象或数组</strong>，就先将其转为对象。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//第一个move函数：下面代码中，函数move的参数是一个对象，通过对这个对象进行解构，得到变量x和y的值。如果解构失败，x和y等于默认值。</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">move</span>(<span class="params">&#123;x = <span class="number">0</span>, y = <span class="number">0</span>&#125; = &#123;&#125;</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> [x, y];</div><div class="line">&#125;</div><div class="line"></div><div class="line">move(&#123;<span class="attr">x</span>: <span class="number">3</span>, <span class="attr">y</span>: <span class="number">8</span>&#125;); <span class="comment">// [3, 8]</span></div><div class="line">move(&#123;<span class="attr">x</span>: <span class="number">3</span>&#125;); <span class="comment">// [3, 0]</span></div><div class="line">move(&#123;&#125;); <span class="comment">// [0, 0]</span></div><div class="line">move(); <span class="comment">// [0, 0]</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//第二个move函数：下面代码是为函数move的参数指定默认值，而不是为变量x和y指定默认值，所以会得到与前一种写法不同的结果。</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">move</span>(<span class="params">&#123;x, y&#125; = &#123; x: <span class="number">0</span>, y: <span class="number">0</span> &#125;</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> [x, y];</div><div class="line">&#125;</div><div class="line"></div><div class="line">move(&#123;<span class="attr">x</span>: <span class="number">3</span>, <span class="attr">y</span>: <span class="number">8</span>&#125;); <span class="comment">// [3, 8]</span></div><div class="line">move(&#123;<span class="attr">x</span>: <span class="number">3</span>&#125;); <span class="comment">// [3, undefined]</span></div><div class="line">move(&#123;&#125;); <span class="comment">// [undefined, undefined]</span></div><div class="line">move(); <span class="comment">// [0, 0]</span></div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;从数组和对象中提取值，对变量进行赋值，这被称为解构。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;一、数组的解构赋值&quot;&gt;&lt;a href=&quot;#一、数组的解构赋值&quot; class=&quot;headerlink&quot; title=&quot;一、数组的解构赋值&quot;&gt;&lt;/a&gt;一、数组的解构赋值&lt;/h2&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//以前ES5&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; a = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; b = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; c = &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//现在ES6&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; [a, b, c] = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; [foo, [[bar], baz]] = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, [[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;], &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;]];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;foo &lt;span class=&quot;comment&quot;&gt;// 1&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;bar &lt;span class=&quot;comment&quot;&gt;// 2&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;baz &lt;span class=&quot;comment&quot;&gt;// 3&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; [ , , third] = [&lt;span class=&quot;string&quot;&gt;&quot;foo&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;bar&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;baz&quot;&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;third &lt;span class=&quot;comment&quot;&gt;// &quot;baz&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; [x, , y] = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;x &lt;span class=&quot;comment&quot;&gt;// 1&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;y &lt;span class=&quot;comment&quot;&gt;// 3&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; [head, ...tail] = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;head &lt;span class=&quot;comment&quot;&gt;// 1&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;tail &lt;span class=&quot;comment&quot;&gt;// [2, 3, 4]&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; [x, y, ...z] = [&lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;x &lt;span class=&quot;comment&quot;&gt;// &quot;a&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;y &lt;span class=&quot;comment&quot;&gt;// undefined 解构不成功，变量的值就等于undefined。&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;z &lt;span class=&quot;comment&quot;&gt;// []&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//下面两个例子属于不完全结构，也可以成功&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; [x, y] = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;x &lt;span class=&quot;comment&quot;&gt;// 1&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;y &lt;span class=&quot;comment&quot;&gt;// 2&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; [a, [b], d] = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, [&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;], &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;a &lt;span class=&quot;comment&quot;&gt;// 1&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;b &lt;span class=&quot;comment&quot;&gt;// 2 是个谜&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;d &lt;span class=&quot;comment&quot;&gt;// 4&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="ES6" scheme="wangsiyuan233.github.io/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>聊聊系列(3)-- HTTP</title>
    <link href="wangsiyuan233.github.io/2018/04/03/38%E8%81%8A%E8%81%8A%E7%B3%BB%E5%88%97-3/"/>
    <id>wangsiyuan233.github.io/2018/04/03/38聊聊系列-3/</id>
    <published>2018-04-03T06:53:17.000Z</published>
    <updated>2018-04-14T00:58:29.683Z</updated>
    
    <content type="html"><![CDATA[<p>本文是<a href="https://book.douban.com/subject/25863515/" target="_blank" rel="external">《图解HTTP》</a>的“摘要”版本，笔者更多关注得是和自身知识所融洽的部分，如果对更详细的内容感兴趣，可以移步实体书。</p><h2 id="一、TCP-IP通信传输流"><a href="#一、TCP-IP通信传输流" class="headerlink" title="一、TCP/IP通信传输流"></a>一、TCP/IP通信传输流</h2><p><img src="https://i.imgur.com/wj6Zhcp.png" alt=""><br><a id="more"></a></p><h2 id="二、TCP协议三次握手策略"><a href="#二、TCP协议三次握手策略" class="headerlink" title="二、TCP协议三次握手策略"></a>二、TCP协议三次握手策略</h2><p>第一次：客户端 ——&gt;&gt;&gt; 服务端 SYN数据打包给你啦！<br>第二次：服务端 ——&gt;&gt;&gt; 客户端 我收到啦！（SYN/ACK）<br>第三次：客户端 ——&gt;&gt;&gt; 服务端 我知道你知道啦！</p><h2 id="三、概念的厘清"><a href="#三、概念的厘清" class="headerlink" title="三、概念的厘清"></a>三、概念的厘清</h2><p>1、DNS协议提供域名查找IP，或知道IP反查域名；<br>2、IP是一组纯地址，而我们访问的<code>baidu.com</code>是域名或主机名<br>3、URL是需要输入的资源地址（网址）；URI是用字符串标识的某一互联网资源；<br>   URL是URI的子集；<br>4、POST的目的是传输（发信息）<br>   GET的目的是请求资源；<br>5、cookie通过在请求和响应报文中写入cookie信息，来控制客户端的状态<br>   翻译成人话就是：刷新以后我在这个网站还是登陆的状态。</p><h2 id="四、HTTP状态码"><a href="#四、HTTP状态码" class="headerlink" title="四、HTTP状态码"></a>四、HTTP状态码</h2><p><img src="https://i.imgur.com/HFcsVlO.png" alt=""></p><blockquote><p>200 OK 服务端正常处理了客户端发来的请求<br>204 no content 服务端正常处理了客户端发来的请求,但返回的报文中不含主体部分；</p><h2 id="206-partial-content-服务端成功的执行了范围请求"><a href="#206-partial-content-服务端成功的执行了范围请求" class="headerlink" title="206 partial content 服务端成功的执行了范围请求"></a>206 partial content 服务端成功的执行了范围请求</h2><p>301 moved permanently 永久性重定向 请求的资源被分配了新的URI，以后也要用这个新的URI<br>302 Found 临时性重定向 请求的资源被分配了新的URI，现在就要用这个新的URI （已移动的资源可能会变回了，这次先用着吧）<br>303 see other 和302不同之处在于 要求GET方法定向获取资源<br>【当301/302/303返回时，几乎所有的浏览器都会删除请求主体+把POST改成GET，之后请求会再次自动发送】<br>304 Not Modified (虽然是3系，但是和重定向没有关系) 客户端发送了附带条件的请求，服务端虽然找到了资源，但是不符合[附带的条件]</p><h2 id="307-Temporary-Redirect-临时重定向-和302很像-也是禁止POST变成GET"><a href="#307-Temporary-Redirect-临时重定向-和302很像-也是禁止POST变成GET" class="headerlink" title="307 Temporary Redirect 临时重定向 和302很像 也是禁止POST变成GET"></a>307 Temporary Redirect 临时重定向 和302很像 也是禁止POST变成GET</h2><p>400 Bad Request 请求中有语法错误<br>401 Unauthorized 表示请求中需要HTTP认证哦！浏览器第1次就收401里面会带一个认证对话窗口，第2次再接到401代表用户认证失败<br>403 Forbidden 服务器拒绝了这次请求的资源</p><h2 id="404-Not-Found-服务器上无法找到请求的资源"><a href="#404-Not-Found-服务器上无法找到请求的资源" class="headerlink" title="404 Not Found 服务器上无法找到请求的资源"></a>404 Not Found 服务器上无法找到请求的资源</h2><p>5系代表服务器本身的错误<br>500 Internal Server Error 服务器在执行请求时发生了错误<br>503 Service Unavailable 服务器暂时处于超负荷运转或者停机维护阶段</p></blockquote><h2 id="五、GET请求"><a href="#五、GET请求" class="headerlink" title="五、GET请求"></a>五、GET请求</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">//GET 请求 </div><div class="line">GET /?w=1 HTTP/1.1</div><div class="line">Host: baidu.com</div><div class="line">Accept: text/html</div><div class="line"></div><div class="line"></div><div class="line">//响应</div><div class="line">HTTP/1.1 200 OK</div><div class="line">Content-Type: text/html; charset=utf-8</div><div class="line">Content-Length: 10000</div><div class="line"></div><div class="line"><span class="meta">&lt;!DOCTYPE&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span>......<span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><h2 id="六、POST请求"><a href="#六、POST请求" class="headerlink" title="六、POST请求"></a>六、POST请求</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">//POST 请求</div><div class="line">POST /login?w=1 HTTP/1.1</div><div class="line">Host: baidu.com</div><div class="line">Accept: application/ms-word</div><div class="line">Content-Type: application/x-www-form-urlencoded</div><div class="line">Content-Length: 10</div><div class="line"></div><div class="line">username=fangfang&amp;password=mima</div><div class="line"></div><div class="line">//响应</div><div class="line">HTTP/1.1 403 Forbidden</div><div class="line">Content-Type: application/md-word</div><div class="line">Content-Length: 200</div><div class="line"></div><div class="line">word格式</div></pre></td></tr></table></figure><h2 id="七、Web安全"><a href="#七、Web安全" class="headerlink" title="七、Web安全"></a>七、Web安全</h2><p>HTTP的不足之处：<br>1、通信使用明文，内容可能被窃听<br>2、通信放的什么可能被伪装<br>3、报文的完整性被篡改<br>—-&gt;&gt;&gt;&gt; 改进<br><strong>HTTP + 加密 + 认证 + 完整性保护 = HTTPS</strong><br>（HTTPS的不足：证书贵+速度很慢）</p><p>怎样给数据加密呢？<br>目前有以下几种加密方式：<br>1、对称加密 ： 加密和解密数据使用同一个密钥。这种加密方式的优点是速度很快，常见对称加密的算法有 AES；<br>2、非对称加密： 加密和解密使用不同的密钥，叫公钥和私钥。数据用公钥加密后必须用私钥解密，数据用私钥加密后必须用公钥解密。一般来说私钥自己保留好，把公钥公开给别人，让别人拿自己的公钥加密数据后发给自己，这样只有自己才能解密。 这种加密方式的特点是速度慢，CPU 开销大，常见非对称加密算法有 RSA；<br>3、Hash： hash 是把任意长度数据经过处理变成一个长度固定唯一的字符串，但任何人拿到这个字符串无法反向解密成原始数据（解开你就是密码学专家了），Hash 常用来验证数据的完整性。常见 Hash 算法有 MD5（已经不安全了）、SHA1、SHA256<br>这些加密其实都是各式各样的<strong>算法</strong>。</p><p><strong>讲个小故事</strong></p><p>班里来了个新同学小美，长的特别漂亮，小谷暗恋小美很久，终于有一天小谷鼓起勇气向小美表白。小谷写了个纸条：“我是小谷，我喜欢你，你喜欢我吗？” ，让小王转交给小美。<br>正常情况下，小王会把纸条转给小美，小美看到后很开心，回复了纸条：“我是小美，我也喜欢你”，让小王再转递给小谷。<br>可是小王也暗恋小美，当然不愿甘做嫁衣。这个时候小王可以有几方法来捣乱：<br>收到小谷的纸条后扔掉纸条。但这样做小谷收不到回应下课会去单独问小美，事情就败露了<br>偷窥纸条的内容，然后举报给老师<br>收到小谷的纸条后，小王立即给小谷发一个回复纸条：“我不喜欢你，我喜欢小王”。同时小王给小美发一个纸条：“我是小谷，你长的真丑，嘿嘿”<br>正常帮小谷和小美投递纸条，成就美事。但复印一份小谷的纸条，过两天小王把这个纸条发给了班里的其他女生小花，这样小美知道后必然会闹分手</p><p>小谷很聪明，早就看出来小王心怀不轨，可是没办法，要传信必然要经过小王，要怪就怪自己太腼腆不敢下课直接亲手送上。怎么办呢？<br>有一种办法是把纸条的信息加密(AES 加密)，小王就不知道纸条内容了。可是问题来了，小美也不知道密钥，她收到信后也无法解密啊。倒是可以把密钥放到纸条里，可这样小王也得到了密钥等于白忙活一场。<br>再说说小美，小美很漂亮，在以前的学校被称为数学女神，转学到这里后立即被小谷吸引了，她看出来小谷有点喜欢自己但又不十分确定，她不想主动。她猜到小谷会在上课的时候可能用写纸条的方式表白，也猜到猥琐的小王会在中间捣乱。如何让小谷能顺利向自己表白呢？小美在疯狂的思考：<br>方案一： 我可以生成一对公钥和私钥，把公钥公开给班里所有的同学。这样小谷就能得到公钥，把要发的信息用公钥加密，只有我自己能用私钥解密。可是我如何把我的回复发出去呢？如果用我的私钥加密，小谷倒是能用公钥解密，但班里任何同学都能解密，被其他同学看到就糗大了。而且如果小谷纸条的内容太多，他用公钥加密需要花一整节课的时间，不能耽误他学习<br>方案二：我可以生成一对公钥和私钥，把公钥公开给班里所有的同学，这样小谷就能得到公钥。如果小谷够聪明的话，他得到公钥后会生成一个对称加密AES的密钥，然后用我的公钥把 AES 密钥加密(AES 密钥长度很短加密几乎不需要时间)，然后把加密后的密钥发给我。我收到后用我的私钥解密，得到小谷和我约定的对对称加密密钥，然后我们用这个只有我们俩知道的对称密钥加密数据进行交流。 </p><p>下课休息的时候，小美给班里的同学说：“快数学考试了，我的数学很好，考场上需要要我帮忙的同学可以找我，我公布一下我的公钥，为了安全起见大家用我的公钥加密消息。”</p><p>一切貌似天衣无缝，可是小美在班里公布自己公钥的时候小谷正好拉肚子去了厕所，回来之后才知道这事，小谷于是问旁边的同学小花小美公钥是多少。小花以前是班里受欢迎的女生被很多男生仰慕，在小美来之后立即被夺了风头，一直怀恨在心。于是小花告诉了小谷一个假公钥，其实是自己生成的公钥。这样万一小谷找小美要小抄，自己可以冒充小美给一个错答案。</p><p>一切被小美看到眼里，这样不行啊， 别到时候自己和小谷的好事没成，反而同学考试被陷害栽赃到自己头上。怎么办呢？对了，班长是班里人品很正的人，可以用班长给自己做信用背书，正好前两天班长在班里通知了自己的公钥。 于是小美找到班长，做了一个证书，证书上有自己的名字、学号、公钥、公证人班长的名字，同时把这些信息通过 Hash (sha256)处理后请求班长用自己的私钥进行加密（为什么用 Hash 处理？因为东西太多非对称加密很费时），也放到证书上。于是小美再次把证书通报给班里所有的同学。</p><p>小谷这次得到了证书，发现上面的公证人是班长，于是先用班长的公钥对证书上被班长私钥加密后的字段进行解密，得到元素数据的 Hash。   再对元素数据进行 Hash和刚刚解密的 Hash 进行比对。如果比对成功表示证书上的信息无误，且是由班长担保的。这时候小谷确信证书上的公钥就是小美的。任何人因为没有班长的私钥都无法伪造证书。</p><p>你以为故事就这么圆满结束了吗？其实没有，班长前两天在公布自己的证书的时候小谷正好生病请假了。 他根本不知道班长的公钥是不是他本人的。<br>这个时候他发现班长的证书上有班主任的担保（班主任的公钥做了签名），班主任的证书上有校长的担保，而小谷是有校长的的公钥的，就印在学生证上。</p><p>终于，小谷收获了女神的芳心。</p><p>故事完了。故事中 小谷是浏览器，小美是服务器，小花和小王是坏蛋，班长是 CA 机构，班主任是上级 CA，校长是根 CA 服务器。当一个网站要使用 https 时先需在一些国际认证的 CA 机构填写网站信息申请证书，而这些 CA机构往往还有上层 CA，最终有一个根 CA。一般来说浏览器都会内置根 CA 和一些顶级 CA 的证书，但需要验证的时候会通过 CA 链逐级验证。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文是&lt;a href=&quot;https://book.douban.com/subject/25863515/&quot;&gt;《图解HTTP》&lt;/a&gt;的“摘要”版本，笔者更多关注得是和自身知识所融洽的部分，如果对更详细的内容感兴趣，可以移步实体书。&lt;/p&gt;
&lt;h2 id=&quot;一、TCP-IP通信传输流&quot;&gt;&lt;a href=&quot;#一、TCP-IP通信传输流&quot; class=&quot;headerlink&quot; title=&quot;一、TCP/IP通信传输流&quot;&gt;&lt;/a&gt;一、TCP/IP通信传输流&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/wj6Zhcp.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="聊聊系列" scheme="wangsiyuan233.github.io/tags/%E8%81%8A%E8%81%8A%E7%B3%BB%E5%88%97/"/>
    
      <category term="HTTP" scheme="wangsiyuan233.github.io/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>&lt;Algorithms&gt;-1.1基础编程模型</title>
    <link href="wangsiyuan233.github.io/2018/04/02/37Algorithms1-1/"/>
    <id>wangsiyuan233.github.io/2018/04/02/37Algorithms1-1/</id>
    <published>2018-04-02T06:33:49.000Z</published>
    <updated>2018-04-19T11:57:59.393Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://book.douban.com/subject/10432347/" target="_blank" rel="external">《算法 （第四版）》</a>梳理框架</p><p>不建议阅读，反正你也读不下去<br><a id="more"></a></p><blockquote><p>1.1编程基础模型</p></blockquote><p>本书是基于Java编程语言来实现的算法，我们这么做的原因是：</p><ul><li>我们的程序时精确的、优雅的、且完整的描述了算法；</li><li>你运行程序时可以学习到准确的算法（知识）；</li><li>你可以让你的算法马上投入到应用中。<br>这些优点对于用英语来描述算法的工作来说，非常重要。<br>我们现在有一种趋势：那就是不得不使用特殊的编程语言，使得将算法从执行细节中剥离出来变得困难。我们利用现代语言和对算法的丰富的解释使得执行的难度降低。<br>我们只用了Java的一小部分子集，同时我们停止使用我们自定义的子集，你将几乎看不到Java的结构。我们提供的代码是完整的，我们希望你可以下载并运行它，用我们的或者你自己的测试数据都可以。<br>我们涉及到的编程的构建、软件库和操作系统常常是在我们的编程模型上执行的，在这一小节和1.2小节，我们将完整的介绍这个系统模型，我们配套齐全就是为了让你明白这个书里的任一代码。我们的模型提供了一种慢步调去介绍这些材料。<br>在参考书目中，我们完整的通过阐明程序模型的基本特征，来详尽的描绘了Java程序。当讨论语言特征时，我们通过这些代码进行举例。当涉及到P46那样的细节时，我们假设你是有现代变成的经验的，所以你是可以认出这些代码的许多特性的，页码注释将会帮助你解决一些问题。自从我们的代码有点程式化，我们致力于使用符合Java语句和结构的代码，这同样适用于经验丰富的Java码农阅读这些代码。（这不是废话吗）<br>【【【【图1.1.1】】】】<br><strong>1.1.1Java的基础结构</strong><br>Java的类既是静态的方法库，也是数据类型定义，为了创造这两者，我们用了一下5个部分，它们是以Java和其他编程语言为基础的：</li><li><em>原始数据类型</em> 精确的定义了整数、浮点数和布尔值这些计算机编程概念。它们的定义包括取值范围和能够对相应的值进行的操作，它们能被组合为类似数学公式的表达式。</li><li><em>语句</em> 通过创建变量和控制执行流来赋值，或者引发副作用来进行计算。我们会使用6种语句：声明、赋值、条件、循环、调用和返回。</li><li><em>数组</em> 同种类型的数值。</li><li><em>静态方法</em> 概括代码，使程序成为独立的模块</li><li><em>字符串</em> 是一系列characters，Java中的一些操作是基于它们的。</li><li><em>标准输入/输出</em> 是程序和外界的桥梁。</li><li><em>数据抽象</em> 让我们定义了非原始数据类型，支持面向对象编程。<br>在这一小节，我们依次介绍前五个，数据抽象是下一节的内容。<br>跑一个Java程序意味着和操作系统或编程环境的交互，为了清晰和简介，我们把这样的活动叫做 虚拟终端，虚拟终端就是我们键入命令行编程的地方，快试试那些好的程序吧！<br>例如，BinarySearch有两种静态方法<code>rank()</code>和<code>main()</code>,<code>rank()</code>有四种语句，两个声明，一个循环和一个返回；<code>main()</code>有三个语句，一个声明，一个调用和一个循环。<br>为了调用Java程序，我们首先要编译Java命令行，接着运行这些Java命令行。例如运行BinarySearch，我们首先要输入命令行 Javac BinarySearch.java，接着我们输入 java BinarySearch把控制权移交给这段字节码程序。为了理解这段程序，我们接下来考虑的是详细介绍Java的原始数据类型、数组、静态方法、字符串和标准IO。</li></ul><p><strong>1.1.2原始数据类型与表达式</strong><br>数据类型就是一组数据+对其的操作的集合。我们首先考虑下面4种基础的Java语言：</p><ul><li><em>整型</em> 及其运算符</li><li><em>浮点型</em> 及其运算符</li><li><em>布尔值</em> 的{true 和 false}及其逻辑运算</li><li><em>字符型</em> 它的值是你能输入的英文字母数字字符和符合<br>接下来我们看看怎么指定这些类型的值或者怎样对这些类型进行操作。<br>表达式：优先级很重要，运算里面乘除大于加减，逻辑里面 ! &gt; &amp;&amp; &gt; ||,圆括号可以改变优先级；<br>类型转换：int3.7就是3；double3是3.0；<br>比较：在条件和循环语句中非常重要；<br>其他原始类型：64字节long、16字节short、16字节char、8字节byte、32字节单精float；</li></ul><p><strong>1.1.3语句</strong><br>Java 的程序是由 声明、赋值来控制操作的执行流<br>声明：给变量命名标识符；<br>赋值：给变量一种数据类型，当然Java也有隐式赋值法<br>条件：根据条件不同，执行不同的语句<br>循环：在块里可以反复执行下去，除非你有一个“暂停键”；<br>返回：是一种改变执行方向的静态方法<br>一个程序是由一系列的语句组成的，当然程序也有嵌套结构，一个条件语句中也可以包含条件语句<br>1.1.3.1<br>声明语句：变量名+类型，声明要在变量使用之前出现，变量的作用域就是定义它的地方<br>1.1.3.2<br>赋值语句：变量+数据类型，等号左边单一变量，右边相应的表达式<br>1.1.3.3<br>条件语句：用不同的操作处理不同的输入，如果是true语句就会执行<br>1.1.3.4<br>循环语句：与if语句不同的是，while语句会不断的check布尔值是否为true，然后不停的执行<br>1.1.3.5<br>break 和 continue: while循环时使用；<br>break：是跳出当前的循环块或者程序块。<br>continues：停止运行剩余的循环主体，回到循环的开始处继续运行。</p><p><strong>1.1.4 简便记法 程序有很多写法</strong><br>1.1.4.1<br>声明并初始化<br>1.1.4.2<br>隐式赋值：i++<br>1.1.4.3<br>单语句代码段<br>1.1.4.4<br>for语句</p><p><strong>1.1.5 数组</strong><br>数组储存着一系列相同type的值，我们同样希望能取到这些值<br>1.1.5.1<br>创造并初始化一个数组<br>三个步骤：声明name和type;创建arry;初始化<br>name + datatype + length<br>1.1.5.2<br>简化写法<br>如果是从0开始，for loop 可以省略<br>1.1.5.3<br>使用数组<br>数组在创建时的大小时确定的<br>1.1.5.4<br>起外号<br>数组名表示的是整个数组，如果我们要把数组a赋予数组b，此时，a和b都会指向同一个数组<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//正确赋值数组</span></div><div class="line"><span class="keyword">double</span>[]b = <span class="keyword">new</span> <span class="keyword">double</span>[N]</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, i &lt; N, i++)</div><div class="line">b[i] = a[i]</div></pre></td></tr></table></figure></p><p>1.1.5.5<br>二维数组<br>二维数组就是一维数组的数组。<br>我们规定：M为行，N为列<br>数组型初始化为0，布尔型初始化为false<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//正确赋值数组</span></div><div class="line"><span class="keyword">double</span>[]a = <span class="keyword">new</span> <span class="keyword">double</span>[M][N];</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, i &lt; N, i++)</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>, j &lt; N, j++)</div><div class="line">a[i][j] = <span class="number">0.0</span>;</div></pre></td></tr></table></figure></p><p><strong>1.1.6 静态方法</strong><br>在别的语言中，总是把静态方法叫做函数，它们都是按照语句的顺序执行的<br>1.1.6.1<br>一个方法中需要参数，返回的数值也有参数决定<br>Java中每一个静态方法都是由 signature 和 body 组成的<br>1.1.6.2<br>调用静态方法<br>调用静态方法的方法，是写出方法名，并在后面的括号中列出参数值，用逗号分隔。<br>当调用是表达式的一部分时，方法的返回值将会，替代表达式中的方法调用。<br>1.1.6.3<br>方法的性质<br>-参数按值来传递 ：参数的值是由调用方提供的；改变参数的值对函数没有啥影响；值传递意味着数组参数是原数组的别名<br>-方法名可以被重载：一个函数需要参数，另一个函数可以提供参数<br>-方法只能有一个返回值，但可以包含多个语句<br>-方法可能产生副作用：void方法没有返回值，void函数有 side effct</p><p>1.1.6.4 递归<br>一个方法可以调用它自己，就是递归。<br>-递归有一个基本的方法就是第一行就是返回语句<br>-递归总是试图address更小的问题<br>-递归要解决的父类问题和它的子类之间不能有交集<br>遵循了以上三条法则，代码就会变得简洁高效</p><p>1.1.6.5 基础编程模型<br>一个静态方法库是由 public clss + name + 括号 组成的。<br>Java通过创造静态方法库去解决一些特殊的项目需求<br>Java + class name + 字符串 就能调用 mian()<br>字符串组成的数组作为参数执行到最后一句时，程序结束</p><p>1.1.6.6 模块化编程<br>最重要的是，静态方法库能使编程模块化<br>一个库中的静态方法可以调用另一个库中的静态方法<br>这样做的好处有：<br>-代码体积合理<br>-方便再次使用<br>-升级执行了也方便被取代<br>-缩小调试范围</p><p>1.1.6.7 单元测试<br>适当的单元测试对程序时重要的<br>简单来说，每个模块的main()方法都要保证代码运行正常<br>随着模块的成熟，我们精化main（）方法成为 开发用例 以告诉我们更多细节<br>或成为测试用例 以便更广阔的测试<br>用例太复杂时，我们就需要一个独立的模块</p><p>1.1.6.8 外部库<br>以下四种静态方法，来自不同的库，一些是由数据类型决定的。<br>-标准系统库 java.lang：Math常用于数学计算<br>-导入的系统库 java.util.Array: java中有很多类似的库<br>-其他库比如 rank()<br>-标准库 Std<br>如果要在一个方法中声明一个库，我们需要在方法前知道库的名字</p><p><strong>1.1.7 API</strong><br>模块化编程的一个重要组成部分就是记录方法的用法并提供文档给其他人参考<br>1.1.7.1 举例<br>这些方法将它们的参数 运用数学方法 转换为一个特殊的类型<br>这种拓展的性质恰巧是现代编程的特点之一<br>API的每一行都描述了一种方法，并且提供了使用该方法所需要使用的所有信息</p><p>1.1.7.2 Java库<br>网上有许多Java版本的库，我们节选了一小部分，足够说明问题了</p><p>1.1.7.3 标准库<br>我们开发了一些库用来实现一些实用的功能<br>这些库大多用与处理输入和输出<br>有些方法非常简单，为啥我们还要把它们写进一个库呢？<br>-让我们把重心放在测试和算法上，而不是随机数的计算上<br>-方法库需要大量的测试，其中就包含了极端和罕见的情况，如果我们自己手写就很麻烦<br>这些都是模块化编程的基石，当然有些夸大其词了<br>哈哈其实这些方法执行起来并不困难，它们中有些还代表了有趣的算法~</p><p>1.1.7.4 自己的库<br>有没有想过自己写一个库呢？以后想要调用的时候就随时调用哦<br>-编写用例，将计算分解为可控的部分<br>-明确方法库和与其对应的API<br>-实现API和一个能够对方法进行独立测试的mian()函数<br>。。。。结果很诱人。。。。这三条我看都看不懂<br>自己的库不仅方便调用，而且能让你更好的着手复杂的工作</p><p><strong>1.1.8 字符串</strong><br>字符串竟然不是Java的原始数据类型！<br>1.1.8.1 字符串拼接<br>字符串的拼接结果是：两个字符串变成一个 ———— “hi,” + “Bob” —&gt; “hi,Bob”<br>1.1.8.2 类型转换<br>字符串的两个主要用途：<br>1、用户输入的值转换为相应的数据类型<br>2、将数据类型转换为屏幕能显示的值<br>？？？？？？？？？？？？  这是啥 ？？？？？？<br>1.1.8.3 自动转换<br>我们几乎不使用 toString()方法，是因为Java提供了拼接的方法<br>使用 + 就可以把其他数据类型转换为 String 类型<br>或者 +’’ 拼接一个空字符串，也可以转换<br>1.1.8.4 命令行参数<br>Java中字符串的一个用处是接受命令行传递信息<br>当你输入 java + 库名 + 字符串<br>java会调用 main()方法，将【由字符串变成的数组】<br>作为参数，传递给main()函数</p><p><strong>1.1.9 输入和输出</strong><br>Java的输入、输出和绘图库是为了与外界交流<br>1、Java的输入值来源于命令行参数 或 标准输入流，输出值 在 标准输出流中<br>2、我们必然要思考Java和操作系统之间的连接<br>3、我们把应用程序提供的输入和显示的窗口叫 终端<br>1.1.9.1 命令与参数<br>在终端，我们可以看到提示符，通过提示符我们可以输入命令或参数<br>/<em> 2018/4/14 p37-p41 </em>/<br>1.1.9.2 标准输出<br>StOut()库用来处理输出，一般来说，输出都会在终端窗口显示<br>1.1.9.3 格式化输出<br>printf()有两个参数，第一个参数是转换为字符串的方法，第二个参数是被转换的字符串<br>最简单的方式是 % 后面跟一个转换码：d是Java十进制整数、f是小数、s是字符串<br>% 和 转换码 中间还要加上一个表示转换出来字符串的 长度 的数字<br>1.1.9.4 标准输入<br>StIn()库的标准是空的或包含一些空格<br>标准输入的一个重要特点是，一旦你读完值，你的代码就会消失<br>也就是说，你退回去再读一遍<br>1.1.9.5 重定向和管道<br>重定向就是把标准输出保存到一个文件<br>将一个程序的输出通过【管道】作为另一个程序的输入<br>1.1.9.6 基于文件的输入和输出<br>我们的In 和 Out 库提供一些静态方法，来实现向文件中写入或从文件中读取一个原始数据类型的数组（的抽象 （？？？））<br>/<em> 2018/4/15 p42-p63 </em>/<br>1.1.9.7 标准绘图库（基本方法）<br>我们以前着眼于字符串的输入和输出，现在着眼于图像的输出<br>1.1.9.8 标准绘图 （控制方法）<br>不仅可以调整画笔的粗细，还能设置画画的时间，更能以一定的格式保存于一个文件当中，这个文件可以直接上传于网络</p><p><strong>1.1.10 二分查找</strong><br>我们挑选的例子是可以精确表达这个二分查找法，且是完全由Java表示的<br>1.1.10.1 二分查找<br>第3章第2节会详细介绍二分查找，现在见到介绍一下<br>用要查找的字母不断的和mid对比大小，直到该数字就是mid。<br>1.1.10.2 开发用例<br>可以直接比较两个文件中的 数字 的大小<br>比如A文件中的第1歌数字和B文件中的第1个数字进行比较<br>1.1.10.3 白名单过滤<br>我们的测试用例会通过模拟实际情况来展示当前算法的必要性，这就是 白名单过滤<br>1.1.10.4 性能<br>rank()这个函数甚至不需要输入时有序的，就能遍历它<br>那我们为啥还需要二分查找啥的？ 因为rank()非常慢啊！</p><p><strong>1.1.11 展望</strong><br>这一章节，我们学到了许多精又美的程序<br>往后，我们就要追求 抽象数据 和面向对象编程 了<br>抽象数据：程序可以自己定义数据类型，而不仅仅是静态方法里的预设类型了<br>1、不管是排序算法还是二分查找，我们都用相同的代码来处理不同的数据类型<br>2、比数组灵活，是高效算法的基础<br>3、可以让我们准确知道自己面对的是什么算法</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://book.douban.com/subject/10432347/&quot;&gt;《算法 （第四版）》&lt;/a&gt;梳理框架&lt;/p&gt;
&lt;p&gt;不建议阅读，反正你也读不下去&lt;br&gt;
    
    </summary>
    
    
      <category term="算法" scheme="wangsiyuan233.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>深入理解JavaScript--异步系列(2)</title>
    <link href="wangsiyuan233.github.io/2018/04/02/36%E5%BC%82%E6%AD%A5%E7%B3%BB%E5%88%97-2/"/>
    <id>wangsiyuan233.github.io/2018/04/02/36异步系列-2/</id>
    <published>2018-04-02T01:22:09.000Z</published>
    <updated>2018-04-14T00:57:47.827Z</updated>
    
    <content type="html"><![CDATA[<p>这一小节主讲ajax，可以看我之前的<a href="http://wangsiyuan233.cn/2018/02/28/AJAX%EF%BC%88一%EF%BC%89/" target="_blank" rel="external">封装一个ajax</a><br><a id="more"></a><br>实在是不想写Promise。。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这一小节主讲ajax，可以看我之前的&lt;a href=&quot;http://wangsiyuan233.cn/2018/02/28/AJAX%EF%BC%88一%EF%BC%89/&quot;&gt;封装一个ajax&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="异步" scheme="wangsiyuan233.github.io/tags/%E5%BC%82%E6%AD%A5/"/>
    
  </entry>
  
  <entry>
    <title>初探ES6(1)--let</title>
    <link href="wangsiyuan233.github.io/2018/04/01/35%E5%88%9D%E6%8E%A2ES6-1/"/>
    <id>wangsiyuan233.github.io/2018/04/01/35初探ES6-1/</id>
    <published>2018-04-01T01:22:09.000Z</published>
    <updated>2018-04-14T00:57:30.809Z</updated>
    
    <content type="html"><![CDATA[<p>先从一块代码讲起<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> liList = <span class="built_in">document</span>.querySelectorAll(<span class="string">'li'</span>) <span class="comment">// 共5个li</span></div><div class="line"><span class="keyword">for</span>( <span class="keyword">var</span> i=<span class="number">0</span>; i&lt;liList.length; i++)&#123;</div><div class="line">  liList[i].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(i)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>我们知道会依次打印出5个5.<br>只是将 var 改成 let 之后<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> liList = <span class="built_in">document</span>.querySelectorAll(<span class="string">'li'</span>) <span class="comment">// 共5个li</span></div><div class="line"><span class="keyword">for</span>( <span class="keyword">let</span> i=<span class="number">0</span>; i&lt;liList.length; i++)&#123;</div><div class="line">  liList[i].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(i)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>我们知道会依次打印出 1 2 3 4 5.<br><strong>var 和 let 竟然还有不同？</strong><br><a id="more"></a><br>一个大胆的猜测：<br>1、for( let i = 0; i&lt; 5; i++) 这句话的圆括号之间，有一个隐藏的作用域<br>2、for( let i = 0; i&lt; 5; i++) { 循环体 } 在每次执行循环体之前，JS 引擎会把 i 在循环体的上下文中重新声明及初始化一次。<br>第二块代码近似近似近似于：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> liList = <span class="built_in">document</span>.querySelectorAll(<span class="string">'li'</span>) <span class="comment">// 共5个li</span></div><div class="line"><span class="keyword">for</span>( <span class="keyword">let</span> i=<span class="number">0</span>; i&lt;liList.length; i++)&#123;</div><div class="line">  <span class="keyword">let</span> i = 隐藏作用域中的i <span class="comment">// 看这里看这里看这里</span></div><div class="line">  liList[i].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(i)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><strong>一、var 声明的「创建、初始化和赋值」过程</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> x = <span class="number">1</span></div><div class="line">  <span class="keyword">var</span> y = <span class="number">2</span></div><div class="line">&#125;</div><div class="line">fn()</div></pre></td></tr></table></figure></p><p><strong>二、let 声明的「创建、初始化和赋值」过程</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="keyword">let</span> x = <span class="number">1</span></div><div class="line">  x = <span class="number">2</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><strong>三、function 声明的「创建、初始化和赋值」过程</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">fn2()</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn2</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="number">2</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><strong>四、const 声明的「创建、初始化和赋值」过程</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> x = <span class="number">1</span></div><div class="line">  <span class="keyword">var</span> y = <span class="number">2</span></div><div class="line">&#125;</div><div class="line">fn()</div></pre></td></tr></table></figure></p><blockquote><p>结论:</p></blockquote><p>var 的「创建」和「初始化」都被提升了。<br>let 的「创建」过程被提升了，但是「初始化」没有提升。<br>const 只有「创建」和「初始化」，没有「赋值」过程。<br>function 的「创建」「初始化」和「赋值」都被提升了。</p><p>所谓<strong>暂时死区</strong>（temp dead zone），就是不能在初始化之前，使用变量。</p><p>如果 let x 的<strong>初始化过程失败</strong>了，那么<br>1、x 变量就将永远处于 created 状态。<br>2、你无法再次对 x 进行初始化（初始化只有一次机会，而那次机会你失败了）。<br>3、由于 x 无法被初始化，所以 x 永远处在暂时死区（也就是盗梦空间里的 limbo）！<br>4、有人会觉得 JS 坑，怎么能出现这种情况；其实问题不大，因为此时代码已经报错了，后面的代码想执行也没机会。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;先从一块代码讲起&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; liList = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.querySelectorAll(&lt;span class=&quot;string&quot;&gt;&#39;li&#39;&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// 共5个li&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;( &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i&amp;lt;liList.length; i++)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  liList[i].onclick = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(i)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;我们知道会依次打印出5个5.&lt;br&gt;只是将 var 改成 let 之后&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; liList = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.querySelectorAll(&lt;span class=&quot;string&quot;&gt;&#39;li&#39;&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// 共5个li&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;( &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i&amp;lt;liList.length; i++)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  liList[i].onclick = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(i)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;我们知道会依次打印出 1 2 3 4 5.&lt;br&gt;&lt;strong&gt;var 和 let 竟然还有不同？&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="ES6" scheme="wangsiyuan233.github.io/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>深入理解JavaScript--异步系列(1)</title>
    <link href="wangsiyuan233.github.io/2018/03/30/34%E5%BC%82%E6%AD%A5%E7%B3%BB%E5%88%97-1/"/>
    <id>wangsiyuan233.github.io/2018/03/30/34异步系列-1/</id>
    <published>2018-03-30T01:22:09.000Z</published>
    <updated>2018-04-14T00:56:56.066Z</updated>
    
    <content type="html"><![CDATA[<h2 id="异步的实现原理"><a href="#异步的实现原理" class="headerlink" title="异步的实现原理"></a>异步的实现原理</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> ajax = $.ajax(&#123;</div><div class="line">    <span class="attr">url</span>: <span class="string">'/data/data1.json'</span>,</div><div class="line">    <span class="attr">success</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'success'</span>)</div><div class="line">    &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure><p>对于ajax这种传递过去不执行，等出来结果之后再执行的函数，叫做callback，即回调函数.<br>实现<strong>异步的最核心原理</strong>，就是将callback作为参数传递给异步执行函数，当有结果返回之后再触发 callback执行.<br><a id="more"></a><br>JavaScript语言的一大特点就是单线程，也就是说，同一个时间只能做一件事。</p><p>单线程就意味着，所有任务需要排队，前一个任务结束，才会执行后一个任务。如果前一个任务耗时很长，后一个任务就不得不一直等着。</p><p>JavaScript语言的设计者意识到，这时主线程完全可以不管IO设备，挂起处于等待中的任务，先运行排在后面的任务。等到IO设备返回了结果，再回过头，把挂起的任务继续执行下去。</p><p>于是，所有任务可以分成两种，一种是同步任务（synchronous），另一种是异步任务（asynchronous）。</p><p>一旦”执行栈”中的所有同步任务执行完毕，系统就会读取”任务队列”，看看里面有哪些事件。那些对应的异步任务，于是结束等待状态，进入执行栈，开始执行。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">setTimeout(<span class="built_in">console</span>.log, <span class="number">0</span>, <span class="string">'a'</span>)</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'b'</span>)</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'c'</span>)</div><div class="line"><span class="comment">// b c a</span></div></pre></td></tr></table></figure></p><p>第一步，执行第一行，此时会将这个操作暂时存储到其他地方，因为setTimeout是一个异步执行操作。<br>第二步，执行第二行，打印 b<br>第三步，执行第三行，打印 c<br>第四步，等待最后一行程序（一共三行）都全部执行完了，然后立马实时查看刚才暂存的异步操作有没有。如果有可执行的，就立即拿到出来继续执行。<br>第五步，执行完毕之后，再实时查看暂存位置中是否还有未执行的异步回调。</p><p><strong>事件绑定算不算异步？</strong></p><p>原来事件绑定和异步操作的实现机制是一样的，那么<strong>事件绑定算不算异步呢？</strong>（声明一下，这里说的事件绑定是如下代码的形式）<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$btn.on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'你点击了按钮'</span>)</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p><p><strong>一、共同之处：</strong><br>技术实现以及书写方法上是一样的，最终执行的方式也基本一样，都通过 evet-loop 执行。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$btn.on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'你点击了按钮'</span>)</div><div class="line">&#125;)</div><div class="line"></div><div class="line">fs.readFile(<span class="string">'data1.json'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</div><div class="line">    <span class="comment">// 获取数据</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure></p><p><strong>二、不同之处：</strong><br>第一，event-loop 执行时，调用的源不一样。异步操作是系统自动调用，无论是setTimeout时间到了还是$.ajax请求返回了，系统会自动调用。而事件绑定就需要用户手动触发<br>第二，从设计上来将，事件绑定有着明显的“订阅-发布”的设计模式，而异步操作却没有。<br>第三，事件绑定在 js 中扮演着非常重要的角色，各个地方都会用到事件绑定的形式。例如 web 页面监控鼠标、键盘，以及 nodejs 中的 EventEmitter 应用非常广泛（特别是涉及到数据流时）。而事件绑定被应用到非常广泛，却没有发生像异步操作带来的程序逻辑问题。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;异步的实现原理&quot;&gt;&lt;a href=&quot;#异步的实现原理&quot; class=&quot;headerlink&quot; title=&quot;异步的实现原理&quot;&gt;&lt;/a&gt;异步的实现原理&lt;/h2&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; ajax = $.ajax(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;url&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;/data/data1.json&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;success&lt;/span&gt;: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;success&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;对于ajax这种传递过去不执行，等出来结果之后再执行的函数，叫做callback，即回调函数.&lt;br&gt;实现&lt;strong&gt;异步的最核心原理&lt;/strong&gt;，就是将callback作为参数传递给异步执行函数，当有结果返回之后再触发 callback执行.&lt;br&gt;
    
    </summary>
    
    
      <category term="异步" scheme="wangsiyuan233.github.io/tags/%E5%BC%82%E6%AD%A5/"/>
    
  </entry>
  
  <entry>
    <title>CSS布局方案之flex+float</title>
    <link href="wangsiyuan233.github.io/2018/03/29/33CSS%E5%B8%83%E5%B1%80%E6%96%B9%E6%A1%88%E4%B9%8Bflex-float/"/>
    <id>wangsiyuan233.github.io/2018/03/29/33CSS布局方案之flex-float/</id>
    <published>2018-03-29T01:22:09.000Z</published>
    <updated>2018-04-14T00:56:46.639Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://js.jirengu.com/cinigoriva/1/edit?html,css,output" target="_blank" rel="external">【【【&lt;&lt;&lt;我是flex的总结 我超轻便&gt;&gt;&gt;】】】</a><br><a href="http://js.jirengu.com/pezobuyoki/1/edit?html,css,output" target="_blank" rel="external">【【【&lt;&lt;&lt;我是float的总结 我覆盖全&gt;&gt;&gt;】】】</a></p><blockquote><p>一、居中布局</p></blockquote><p><strong>1、水平居中</strong><a href="http://js.jirengu.com/sobosuvuxa/1/edit?html,css,output" target="_blank" rel="external">【5个示例 &gt;&gt;&gt;】</a><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child"</span>&gt;</span> wangsiyuan wangsiyuan <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p><a id="more"></a><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.child</span>&#123; <span class="comment">/*1.1 */</span></div><div class="line">    <span class="attribute">display</span>: inline-block;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.parent</span>&#123;</div><div class="line">    <span class="attribute">text-align</span>: center;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="selector-class">.child</span> &#123; <span class="comment">/*1.2 */</span></div><div class="line">    <span class="attribute">display</span>: table;</div><div class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="selector-class">.parent</span> &#123;<span class="comment">/*1.3*/</span></div><div class="line">    <span class="attribute">position</span>: relative;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.child</span> &#123;</div><div class="line">    <span class="attribute">position</span>: absolute;</div><div class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</div><div class="line">    <span class="attribute">transform</span>: <span class="built_in">translateX</span>(-50%);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="selector-class">.parent</span> &#123; <span class="comment">/*1.4*/</span></div><div class="line">    <span class="attribute">display</span>: flex;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.child</span> &#123;</div><div class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="selector-class">.parent</span> &#123; <span class="comment">/*1.5*/</span></div><div class="line">    <span class="attribute">display</span>: flex;</div><div class="line">    <span class="attribute">justify-content</span>: center;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>2、垂直居中</strong><a href="http://js.jirengu.com/lucebucusi/1/edit?html,css,output" target="_blank" rel="external">【3个示例 &gt;&gt;&gt;】</a><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child"</span>&gt;</span> wangsiyuan wangsiyuan <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.parent</span> &#123; <span class="comment">/*2.1*/</span></div><div class="line">    <span class="attribute">display</span>: table-cell;</div><div class="line">    <span class="attribute">vertical-align</span>: middle;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="selector-class">.parent</span> &#123; <span class="comment">/*2.2*/</span></div><div class="line">    <span class="attribute">position</span>: relative;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.child</span> &#123;</div><div class="line">    <span class="attribute">position</span>: absolute;</div><div class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</div><div class="line">    <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-50%);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="selector-class">.parent</span> &#123; <span class="comment">/*2.3*/</span></div><div class="line">    <span class="attribute">position</span>: flex;</div><div class="line">    <span class="attribute">align-items</span>: center;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>3、水平+垂直</strong><a href="http://js.jirengu.com/yiretexine/1/edit?html,css,output" target="_blank" rel="external">【3个示例 &gt;&gt;&gt;】</a><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child"</span>&gt;</span> wangsiyuan wangsiyuan <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.parent</span> &#123; <span class="comment">/*3.1*/</span></div><div class="line">    <span class="attribute">position</span>: relative;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.child</span> &#123;</div><div class="line">    <span class="attribute">position</span>:absolute;</div><div class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</div><div class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</div><div class="line">    <span class="attribute">transform</span>: <span class="built_in">tranplate</span>(-50%,-50%);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="selector-class">.parent</span> &#123;  <span class="comment">/*3.2*/</span></div><div class="line">    <span class="attribute">text-align</span>: center;</div><div class="line">    <span class="attribute">display</span>: table-cell;</div><div class="line">    <span class="attribute">vertical-align</span>: middle;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.child</span> &#123;</div><div class="line">    <span class="attribute">display</span>: inline-block;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="selector-class">.parent</span> &#123;  <span class="comment">/*3.3*/</span></div><div class="line">    <span class="attribute">display</span>: flex;</div><div class="line">    <span class="attribute">justify-content</span>: center;</div><div class="line">    <span class="attribute">align-items</span>: center;</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>二、多列布局</p></blockquote><p><strong>1、1定宽+1自适应</strong><a href="http://js.jirengu.com/xanorajiri/1/edit?html,css,output" target="_blank" rel="external">【4个示例 &gt;&gt;&gt;】</a><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 方法一 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>left<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>right<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>right<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.left</span> &#123; <span class="comment">/* 方法一 1.1 */</span></div><div class="line">    <span class="attribute">float</span>: left;</div><div class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">    <span class="attribute">margin-right</span>: <span class="number">20px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.right</span> &#123;</div><div class="line">    <span class="attribute">overflow</span>: hidden;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="selector-class">.left</span> &#123; <span class="comment">/*1.2*/</span></div><div class="line">    <span class="attribute">float</span>: left;</div><div class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.right</span> &#123;</div><div class="line">    <span class="attribute">margin-left</span>: <span class="number">120px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="selector-class">.parent</span> &#123; <span class="comment">/*1.3*/</span></div><div class="line">    <span class="attribute">display</span>: table;</div><div class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">    <span class="attribute">table-layout</span>: fixed;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.left</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">    <span class="attribute">padding-right</span>: <span class="number">20px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.right</span>,<span class="selector-class">.left</span> &#123;</div><div class="line">    <span class="attribute">display</span>: table-cell;    </div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="selector-class">.parent</span> &#123; <span class="comment">/*1.4*/</span></div><div class="line">    <span class="attribute">display</span>: flex;</div><div class="line">&#125; </div><div class="line"><span class="selector-class">.left</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">    <span class="attribute">margin-right</span>: <span class="number">20px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.right</span> &#123;</div><div class="line">    <span class="attribute">flex</span>: <span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><a href="http://js.jirengu.com/yakumuqawu/1/edit?html,css,output" target="_blank" rel="external">【第5个示例 &gt;&gt;&gt;】</a><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 方法二 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>left<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"rigth-fix"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>right<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>right<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.left</span> &#123; <span class="comment">/* 方法二 */</span></div><div class="line">    <span class="attribute">float</span>: left;</div><div class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">    <span class="attribute">position</span>: relative;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.right-fix</span> &#123;</div><div class="line">    <span class="attribute">float</span>: right;</div><div class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">    <span class="attribute">margin-left</span>: -<span class="number">100px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.right</span> &#123;</div><div class="line">    <span class="attribute">margin-left</span>: <span class="number">120px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>2、2定宽+1自适应</strong><a href="http://js.jirengu.com/vubulurosa/1/edit?html,css,output" target="_blank" rel="external">【1个示例 &gt;&gt;&gt;】</a><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>left<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"center"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>center<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>right<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>right<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.left</span>,<span class="selector-class">.center</span> &#123;</div><div class="line">    <span class="attribute">float</span>: left;</div><div class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">    <span class="attribute">margin-right</span>: <span class="number">20px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.right</span> &#123;</div><div class="line">    <span class="attribute">overflow</span>: hidden;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>3、1不定宽 + 1自适应</strong><a href="http://js.jirengu.com/fenexahuxi/1/edit?html,css,output" target="_blank" rel="external">【3个示例 &gt;&gt;&gt;】</a><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>left<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>right<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>right<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.left</span>&#123;<span class="comment">/*3.1*/</span></div><div class="line">        <span class="attribute">float</span>: left;</div><div class="line">        <span class="attribute">margin-right</span>: <span class="number">20px</span>;</div><div class="line">    &#125;</div><div class="line"><span class="selector-class">.right</span>&#123;</div><div class="line">    <span class="attribute">overflow</span>: hidden;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.left</span> <span class="selector-tag">p</span>&#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="selector-class">.parent</span>&#123; <span class="comment">/*3.2*/</span></div><div class="line">    <span class="attribute">display</span>: table; <span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">    &#125;</div><div class="line"><span class="selector-class">.left</span>,<span class="selector-class">.right</span>&#123;</div><div class="line">    <span class="attribute">display</span>: table-cell;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.left</span>&#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">0.1%</span>;</div><div class="line">    <span class="attribute">padding-right</span>: <span class="number">20px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.left</span> <span class="selector-tag">p</span>&#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="selector-class">.parent</span> &#123; <span class="comment">/*3.3*/</span></div><div class="line">    <span class="attribute">display</span>: flex;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.left</span> &#123;</div><div class="line">    <span class="attribute">margin-right</span>: <span class="number">20px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.right</span> &#123;</div><div class="line">    <span class="attribute">flex</span>: <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.left</span> <span class="selector-tag">p</span>&#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>4、2不定宽+1自适应</strong><a href="http://js.jirengu.com/gexaqoqasu/1/edit?html,css,output" target="_blank" rel="external">【1个示例 &gt;&gt;&gt;】</a><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>left<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"center"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>center<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>right<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>right<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.left</span>,<span class="selector-class">.center</span>&#123;</div><div class="line">    <span class="attribute">float</span>: left;</div><div class="line">    <span class="attribute">margin-right</span>: <span class="number">20px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.right</span>&#123;</div><div class="line">    <span class="attribute">overflow</span>: hidden;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.left</span> <span class="selector-tag">p</span>,<span class="selector-class">.center</span> <span class="selector-tag">p</span>&#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>5、1定宽+1自适应+高度一样</strong><a href="http://js.jirengu.com/tecemeboqu/2/edit?html,css,output" target="_blank" rel="external">【4个示例 &gt;&gt;&gt;】</a><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 方法一 float --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>left<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>right<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>right<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">p</span>&#123; <span class="comment">/* 方法一 */</span></div><div class="line">    <span class="attribute">background</span>: none<span class="meta">!important</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.left</span>,<span class="selector-class">.right</span>&#123;</div><div class="line">    <span class="attribute">background</span>: <span class="number">#444</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.parent</span>&#123;</div><div class="line">    <span class="attribute">overflow</span>: hidden;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.left</span>,<span class="selector-class">.right</span>&#123;</div><div class="line">    <span class="attribute">padding-bottom</span>: <span class="number">9999px</span>;</div><div class="line">    <span class="attribute">margin-bottom</span>: -<span class="number">9999px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.left</span>&#123;</div><div class="line">    <span class="attribute">float</span>: left; </div><div class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">    <span class="attribute">margin-right</span>: <span class="number">20px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.right</span>&#123;</div><div class="line">    <span class="attribute">overflow</span>: hidden;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 方法二 table --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>left<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>right<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>right<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.parent</span> &#123; <span class="comment">/*方法二*/</span></div><div class="line">    <span class="attribute">display</span>:table;</div><div class="line">    <span class="attribute">width</span>:<span class="number">100%</span>;</div><div class="line">    <span class="attribute">table-layout</span>:fixed;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.left</span> &#123;</div><div class="line">    <span class="attribute">width</span>:<span class="number">100px</span>;</div><div class="line">    <span class="attribute">padding-right</span>:<span class="number">20px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.right</span>,<span class="selector-class">.left</span> &#123;</div><div class="line">    <span class="attribute">display</span>:table-cell;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 方法三 flex --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>left<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>right<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>right<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.parent</span> &#123; <span class="comment">/*方法三*/</span></div><div class="line">    <span class="attribute">display</span>: flex;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.left</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">    <span class="attribute">margin-right</span>: <span class="number">20px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.right</span> &#123;</div><div class="line">    <span class="attribute">flex</span>: <span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 方法四 display --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>right <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.parent</span> &#123; <span class="comment">/*方法四*/</span></div><div class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">    <span class="attribute">display</span>: -webkit-box;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.left</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">    <span class="attribute">margin-right</span>: <span class="number">20px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.right</span> &#123;</div><div class="line">    <span class="attribute">-webkit-box-flex</span>: <span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>6、等分</strong><a href="http://js.jirengu.com/yisusonehe/1/edit?html,css,output" target="_blank" rel="external">【3个示例 &gt;&gt;&gt;】</a><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 方法一  --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>1<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>2<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>3<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>4<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.parent</span>&#123; <span class="comment">/* 方法一 */</span></div><div class="line">    <span class="attribute">margin-left</span>: -<span class="number">20px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.column</span>&#123;</div><div class="line">    <span class="attribute">float</span>: left;</div><div class="line">    <span class="attribute">width</span>: <span class="number">25%</span>;</div><div class="line">    <span class="attribute">padding-left</span>: <span class="number">20px</span>;</div><div class="line">    <span class="attribute">box-sizing</span>: border-box;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 方法二  --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent-fix"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>1<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>2<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>3<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>4<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.parent-fix</span>&#123; <span class="comment">/*方法二*/</span></div><div class="line">    <span class="attribute">margin-left</span>: -<span class="number">20px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.parent</span>&#123;</div><div class="line">    <span class="attribute">display</span>: table;</div><div class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">    <span class="attribute">table-layout</span>: fixed;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.column</span>&#123;</div><div class="line">    <span class="attribute">display</span>: table-cell;</div><div class="line">    <span class="attribute">padding-left</span>: <span class="number">20px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 方法三flex  --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>1<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>2<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>3<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>4<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.parent</span>&#123; <span class="comment">/*方法三*/</span></div><div class="line">    <span class="attribute">display</span>: flex;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.column</span>&#123;</div><div class="line">    <span class="attribute">flex</span>: <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.column</span>+<span class="selector-class">.column</span>&#123;</div><div class="line">    <span class="attribute">margin-left</span>: <span class="number">20px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>三、全屏布局</p></blockquote><p><strong>定宽 + 定高 + 内容自适应</strong><br><a href="http://js.jirengu.com/vilerawove/1/edit?html,css,output" target="_blank" rel="external">【position示例 &gt;&gt;&gt;】</a><br><img src="https://i.imgur.com/oehNFHw.png" alt=""><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 方法一 position  --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"top"</span>&gt;</span>top<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inner"</span>&gt;</span>right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bottom"</span>&gt;</span>bottom<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">html</span>,<span class="selector-tag">body</span>,<span class="selector-class">.parent</span>&#123; <span class="comment">/* 方法一*/</span></div><div class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</div><div class="line">    <span class="attribute">overflow</span>: hidden;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">body</span>&#123;</div><div class="line">    <span class="attribute">color</span>: white;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.top</span>&#123;</div><div class="line">    <span class="attribute">position</span>: absolute;</div><div class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">    <span class="attribute">background</span>: blue;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.left</span>&#123;</div><div class="line">    <span class="attribute">position</span>:absolute;</div><div class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">top</span>: <span class="number">100px</span>;</div><div class="line">    <span class="attribute">bottom</span>: <span class="number">50px</span>;</div><div class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">    <span class="attribute">background</span>: red;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.right</span>&#123;</div><div class="line">    <span class="attribute">position</span>:absolute;</div><div class="line">    <span class="attribute">left</span>: <span class="number">200px</span>;</div><div class="line">    <span class="attribute">top</span>: <span class="number">100px</span>;</div><div class="line">    <span class="attribute">bottom</span>: <span class="number">50px</span>;</div><div class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">background</span>: pink;</div><div class="line">    <span class="attribute">overflow</span>: auto;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.right</span> <span class="selector-class">.inner</span>&#123;</div><div class="line">    <span class="attribute">min-height</span>: <span class="number">1000px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.bottom</span>&#123;</div><div class="line">    <span class="attribute">position</span>: absolute;</div><div class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</div></pre></td></tr></table></figure><p><a href="http://js.jirengu.com/gusixilake/1/edit?html,css,output" target="_blank" rel="external">【flex示例 &gt;&gt;&gt;】</a><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 方法二 flex  --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"top"</span>&gt;</span>top<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"middle"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inner"</span>&gt;</span>right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bottom"</span>&gt;</span>bottom<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">html</span>,<span class="selector-tag">body</span>,<span class="selector-class">.parent</span>&#123; <span class="comment">/* 方法二 */</span></div><div class="line">    <span class="attribute">margin</span>:<span class="number">0</span>;</div><div class="line">    <span class="attribute">height</span>:<span class="number">100%</span>;</div><div class="line">    <span class="attribute">overflow</span>:hidden;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">body</span>&#123;</div><div class="line">    <span class="attribute">color</span>: white;</div><div class="line">&#125; </div><div class="line"><span class="selector-class">.parent</span>&#123;</div><div class="line">    <span class="attribute">display</span>: flex;</div><div class="line">    <span class="attribute">flex-direction</span>: column;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.top</span>&#123;</div><div class="line">    <span class="attribute">height</span>:<span class="number">100px</span>;</div><div class="line">    <span class="attribute">background</span>: blue;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.bottom</span>&#123;</div><div class="line">    <span class="attribute">height</span>:<span class="number">50px</span>;</div><div class="line">    <span class="attribute">background</span>: black;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.middle</span>&#123;</div><div class="line">    <span class="attribute">flex</span>:<span class="number">1</span>;</div><div class="line">    <span class="attribute">display</span>:flex;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.left</span>&#123;</div><div class="line">    <span class="attribute">width</span>:<span class="number">200px</span>;</div><div class="line">    <span class="attribute">background</span>: red;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.right</span>&#123;</div><div class="line">    <span class="attribute">flex</span>: <span class="number">1</span>;</div><div class="line">    <span class="attribute">overflow</span>: auto;</div><div class="line">    <span class="attribute">background</span>:pink;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.right</span> <span class="selector-class">.inner</span>&#123;</div><div class="line">    <span class="attribute">min-height</span>: <span class="number">1000px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>全部自适应</strong><a href="http://js.jirengu.com/ribavuziha/1/edit?html,css,output" target="_blank" rel="external">【示例 &gt;&gt;&gt;】</a><br><img src="https://i.imgur.com/5Iv4aMK.png" alt=""><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"top"</span>&gt;</span>top<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"middle"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inner"</span>&gt;</span>right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bottom"</span>&gt;</span>bottom<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">html</span>,<span class="selector-tag">body</span>,<span class="selector-class">.parent</span>&#123;</div><div class="line">    <span class="attribute">margin</span>:<span class="number">0</span>;</div><div class="line">    <span class="attribute">height</span>:<span class="number">100%</span>;</div><div class="line">    <span class="attribute">overflow</span>:hidden;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">body</span>&#123;</div><div class="line">    <span class="attribute">color</span>:white;</div><div class="line">&#125; </div><div class="line"><span class="selector-class">.parent</span>&#123;</div><div class="line">    <span class="attribute">display</span>:flex;</div><div class="line">    <span class="attribute">flex-direction</span>:column;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.top</span>&#123;</div><div class="line">    <span class="attribute">background</span>:blue;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.bottom</span>&#123;</div><div class="line">    <span class="attribute">background</span>:black;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.middle</span>&#123;</div><div class="line">    <span class="attribute">flex</span>:<span class="number">1</span>;</div><div class="line">    <span class="attribute">display</span>:flex;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.left</span>&#123;</div><div class="line">    <span class="attribute">background</span>: red;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.right</span>&#123;</div><div class="line">    <span class="attribute">flex</span>:<span class="number">1</span>;</div><div class="line">    <span class="attribute">overflow</span>:auto;</div><div class="line">    <span class="attribute">background</span>: pink;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.right</span> <span class="selector-class">.inner</span>&#123;</div><div class="line">    <span class="attribute">min-height</span>:<span class="number">1000px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://js.jirengu.com/cinigoriva/1/edit?html,css,output&quot;&gt;【【【&amp;lt;&amp;lt;&amp;lt;我是flex的总结 我超轻便&amp;gt;&amp;gt;&amp;gt;】】】&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://js.jirengu.com/pezobuyoki/1/edit?html,css,output&quot;&gt;【【【&amp;lt;&amp;lt;&amp;lt;我是float的总结 我覆盖全&amp;gt;&amp;gt;&amp;gt;】】】&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一、居中布局&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;1、水平居中&lt;/strong&gt;&lt;a href=&quot;http://js.jirengu.com/sobosuvuxa/1/edit?html,css,output&quot;&gt;【5个示例 &amp;gt;&amp;gt;&amp;gt;】&lt;/a&gt;&lt;br&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;parent&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;child&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt; wangsiyuan wangsiyuan &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="CSS" scheme="wangsiyuan233.github.io/tags/CSS/"/>
    
      <category term="进阶" scheme="wangsiyuan233.github.io/tags/%E8%BF%9B%E9%98%B6/"/>
    
  </entry>
  
  <entry>
    <title>函数知多少</title>
    <link href="wangsiyuan233.github.io/2018/03/29/32%E5%87%BD%E6%95%B0%E7%9F%A5%E5%A4%9A%E5%B0%91/"/>
    <id>wangsiyuan233.github.io/2018/03/29/32函数知多少/</id>
    <published>2018-03-29T01:22:09.000Z</published>
    <updated>2018-04-14T00:56:34.388Z</updated>
    
    <content type="html"><![CDATA[<p><strong>一、定义</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//1、匿名函数</span></div><div class="line"><span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;<span class="keyword">return</span> <span class="number">3</span>&#125; <span class="comment">//浏览器会直接报错</span></div><div class="line"><span class="keyword">var</span> f1 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;&#125; <span class="comment">//将匿名函数存在f1这个地址</span></div><div class="line">f1.name <span class="comment">//f1   虽然是匿名函数，但是它有name</span></div></pre></td></tr></table></figure></p><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//2、具名函数</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> <span class="number">1</span>&#125; <span class="comment">//作用域是全局作用域，f1是变量</span></div><div class="line"><span class="keyword">var</span> f2 = <span class="function"><span class="keyword">function</span> <span class="title">f3</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> <span class="number">2</span>&#125; <span class="comment">// 作用域在f3函数体内</span></div></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//3、箭头函数</span></div><div class="line"><span class="keyword">var</span> f4 = <span class="function">(<span class="params">i,j</span>) =&gt;</span> &#123;<span class="built_in">console</span>.log(<span class="number">1</span>); <span class="keyword">return</span> i * j&#125;</div><div class="line"><span class="comment">//本质上和上两种没有区别，this的值却是内外相同</span></div></pre></td></tr></table></figure><p><strong>二、<a href="wangsiyuan233.cn/2018/03/26/闭包系列-2/">执行上下文环境</a></strong><br><strong>三、call stack</strong><br>一种先进后出的模式<br>JS是单线程，遇到函数就会暗暗的做下标记再进去，a_&gt;b-&gt;c,从c退出了在进入b,最后才退出a<br>1、<a href="http://latentflip.com/loupe/?code=ZnVuY3Rpb24gYSgpewogICAgY29uc29sZS5sb2coJ2EnKQogIHJldHVybiAnYScgIAp9CgpmdW5jdGlvbiBiKCl7CiAgICBjb25zb2xlLmxvZygnYicpCiAgICByZXR1cm4gJ2InCn0KCmZ1bmN0aW9uIGMoKXsKICAgIGNvbnNvbGUubG9nKCdjJykKICAgIHJldHVybiAnYycKfQoKYSgpCmIoKQpjKCk%3D!!!" target="_blank" rel="external">普通调用</a><br>2、<a href="http://latentflip.com/loupe/?code=ZnVuY3Rpb24gYSgpewogICAgY29uc29sZS5sb2coJ2ExJykKICAgIGIoKQogICAgY29uc29sZS5sb2coJ2EyJykKICByZXR1cm4gJ2EnICAKfQpmdW5jdGlvbiBiKCl7CiAgICBjb25zb2xlLmxvZygnYjEnKQogICAgYygpCiAgICBjb25zb2xlLmxvZygnYjInKQogICAgcmV0dXJuICdiJwp9CmZ1bmN0aW9uIGMoKXsKICAgIGNvbnNvbGUubG9nKCdjJykKICAgIHJldHVybiAnYycKfQphKCkKY29uc29sZS5sb2coJ2VuZCcp!!!" target="_blank" rel="external">嵌套调用</a><br>3、<a href="http://latentflip.com/loupe/?code=ZnVuY3Rpb24gZmFiKG4pewogICAgY29uc29sZS5sb2coJ3N0YXJ0IGNhbGMgZmFiICcrIG4pCiAgICBpZihuPj0zKXsKICAgICAgICByZXR1cm4gZmFiKG4tMSkgKyBmYWIobi0yKQogICAgfWVsc2V7CiAgICAgICAgcmV0dXJuIDEKICAgIH0KfQoKZmFiKDUp!!!PGJ1dHRvbj5DbGljayBtZSE8L2J1dHRvbj4%3D" target="_blank" rel="external">递归</a><br><strong>四、this,arguments,apply,bind</strong><br>进入一个函数的时候，不仅记录地址，还记录这个函数的传参<br>this必须是对象，this是函数和对象的羁绊<br>fn.call(undefined,arguments)可以确定arguments的个数<br>this会被填充为小window，arguments默认是空数组<br>fn.apply(undefined,arguments)不能确定arguments的个数<br>call 和 apply 是直接调用函数，而 bind 则是返回一个新函数（并没有调用原来的函数），这个新函数会 call 原来的函数，call 的参数由你指定。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;一、定义&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//1、匿名函数&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&amp;#125; &lt;span class=&quot;comment&quot;&gt;//浏览器会直接报错&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; f1 = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&amp;#125; &lt;span class=&quot;comment&quot;&gt;//将匿名函数存在f1这个地址&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;f1.name &lt;span class=&quot;comment&quot;&gt;//f1   虽然是匿名函数，但是它有name&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="wangsiyuan233.github.io/tags/javascript/"/>
    
      <category term="进阶" scheme="wangsiyuan233.github.io/tags/%E8%BF%9B%E9%98%B6/"/>
    
  </entry>
  
</feed>
