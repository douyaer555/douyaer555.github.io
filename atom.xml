<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>wangsiyuan</title>
  
  <subtitle>小马过河</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="wangsiyuan233.github.io/"/>
  <updated>2018-06-19T22:22:37.012Z</updated>
  <id>wangsiyuan233.github.io/</id>
  
  <author>
    <name>wangsiyuan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JavaScript for LeetCode/Easy</title>
    <link href="wangsiyuan233.github.io/2018/06/19/54LeetCode-Easy/"/>
    <id>wangsiyuan233.github.io/2018/06/19/54LeetCode-Easy/</id>
    <published>2018-06-19T07:19:16.000Z</published>
    <updated>2018-06-19T22:22:37.012Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Two Sum </p></blockquote><p>【Easy 01】【total 01】【<a href="https://leetcode.com/problems/two-sum/description/" target="_blank" rel="external">题目链接</a>】</p><ul><li><strong>题目：</strong><br>Given an array of integers, return indices of the two numbers such that they add up to a specific target.</li></ul><p>You may assume that each input would have exactly one solution, and you may not use the same element twice.</p><ul><li><p><strong>Example:</strong></p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Given nums = [<span class="number">2</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">15</span>], target = <span class="number">9</span>,</div><div class="line"></div><div class="line">Because nums[<span class="number">0</span>] + nums[<span class="number">1</span>] = <span class="number">2</span> + <span class="number">7</span> = <span class="number">9</span>,</div><div class="line">return [<span class="number">0</span>, <span class="number">1</span>].</div></pre></td></tr></table></figure></li><li><p><strong>解答：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@param</span> &#123;number[]&#125; nums</div><div class="line"> * <span class="doctag">@param</span> &#123;number&#125; target</div><div class="line"> * <span class="doctag">@return</span> &#123;number[]&#125;</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">var</span> twoSum = <span class="function"><span class="keyword">function</span><span class="params">(nums, target)</span> </span>&#123;</div><div class="line">  <span class="keyword">var</span> a = [];</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = nums.length; i &lt; len; i++) &#123;</div><div class="line">    <span class="keyword">var</span> tmp = target - nums[i];</div><div class="line">    <span class="keyword">if</span> (a[tmp] !== undefined) <span class="keyword">return</span> [a[tmp], i];</div><div class="line">    a[nums[i]] = i;</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></li><li><p><strong>解析：</strong><br>Use array <code>a</code> to show the position of a number.</p></li></ul><p>For instance, if <code>a[i] === undefined</code>, it means we don’t have the number of <code>i</code> in the array, and if not, it means the number of <code>i</code> appears in the position of <code>index === a[i]</code>.</p><p>So it will be easy, we can enum the array, and check if <code>a[target - item]</code> is undefined or not.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Two Sum &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;【Easy 01】【total 01】【&lt;a href=&quot;https://leetcode.com/problems/two-sum/description/&quot; target=&quot;_blan
      
    
    </summary>
    
    
      <category term="LeetCode-Easy" scheme="wangsiyuan233.github.io/tags/LeetCode-Easy/"/>
    
  </entry>
  
  <entry>
    <title>美国次贷危机</title>
    <link href="wangsiyuan233.github.io/2018/06/17/53%E7%BE%8E%E5%9B%BD%E6%AC%A1%E8%B4%B7%E5%8D%B1%E6%9C%BA/"/>
    <id>wangsiyuan233.github.io/2018/06/17/53美国次贷危机/</id>
    <published>2018-06-18T02:32:24.000Z</published>
    <updated>2018-06-18T19:39:45.948Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>一、金融业真的是多余的吗？</p></blockquote><p>很多电影都在暗示金融业是一个不创造任何财富的行业，好像是整个社会的寄生虫一般，这是错的非常离谱的。</p><p>其实正是因为有了金融的运作 —— 股市的存在，西方国家才得以从19世纪马克思笔下的那种原汁原味的资本主义制度转型成了今天这种半资本主义半社会主义的制度。我们不妨再拿乔布斯举个例子。如果美国现在的经济制度还是延续着19世纪的传统的话，那么乔布斯很可能就是这个星球上有史以来最富有的人。原因很简单，苹果公司已经连续很多年荣膺全球最赚钱公司了，巅峰时期曾达到过一年赚500亿美元的纯利润，去年虽然下降了不少但依然有390亿美元。然而我们发现乔布斯在去世时只留下了86亿美元的财富。为什么会这样？</p><p>因为乔布斯根本就不是一个资本家，苹果公司不属于他，而是属于全体股东 —— 最普通的美国老百姓的。</p><p>这里就出了一个问题，既然这样，那乔布斯创立苹果之后，为什么要让它上市呢？为什么不像当年的约翰·洛克菲勒那样把它据为己有，然后取洛克菲勒而代之成为人类历史上最有钱的人呢？</p><p><img src="https://i.imgur.com/xdNGEkN.jpg" alt=""></p><p>原因在于他做不到。如果他不这样做（上市），那么这样做了的人的公司就会得到迅速的发展，从而远远的将他和苹果公司甩在后面。这些人中的佼佼者，无疑就是比尔·盖茨先生。<br><a id="more"></a></p><p>1983年，一位非常聪明的年轻人发明了一个可以改变人类生活方式的产品，他便是年仅28岁的比尔·盖茨和其刚刚设计完成的 Windows 操作系统。</p><p>如果没有金融业的话，那么盖茨先生只会有能力将它卖给很小范围内的一部分客户（没有足够的营销团队和财力做广告），然后一点一点的扩大业务，仅仅凭借赚到的现金来招收更多的员工。</p><p>然而1986年微软公司在 NASDAQ 股票市场完成了上市，并一下子筹集到了一大笔钱，这笔钱帮助微软从一家地区性的小公司迅速的成长为跨国公司。这样，在短短几年之内，全世界的用户都用上了 Windows 这款绝好的操作系统。结果是显而易见的 —— 人民生活水平提高了，盖茨先生也得到了应得的财富。</p><p>如果没有金融的运作参与其中，这一过程可能要推后10年，甚至20年。</p><p>对于当年那些购买了微软股票的人来说，他们是在“把现在的收入变成未来的收入，但是未来的收入更多了。”微软的股价从上市至今已经上涨了超过一千倍，当初购买了股票的人现在多数都已是百万富翁。</p><p><img src="https://i.imgur.com/cBYM1eE.jpg" alt=""></p><p>而对于盖茨先生和微软来说，则是“把未来的收入变成了现在的收入，从而改变了未来！”由于有了更多的资金投入研发，微软的产品就可以迅速的更新换代。这个过程甚至改变了大部分人类的生活方式。</p><p>当然，金融业的贡献远远不止于此。它还有另一项绝顶重要的功能—— 资产管理，这就涉及到了股市之外的另一个金融领域 —— 保险业。西方的全民医疗大家认为什么怎么实现的？难道是直接由政府用现金去为每个公民的医疗费用买单吗？当然不是。事实是由政府为每个公民购买医疗保险，而如何用政府付的钱去为公民的医疗费用买单是保险公司的事。保险公司通过金融的运作，最终可以以很低的成本（保费）解决很大的问题（全民医疗）。养老金呢？也一样。美国的养老金余额占全世界的65%，超过18万亿美元！而中国的养老金余额仅为3万亿元人民币 …… 我在《激辩余额宝》那篇文中写到过美国人不存钱的原因（储蓄率曾一度在2005年低至 - 1%），因为他们只需将平均每个月20%的收入用来购买保险就足够了，还存钱干什么呢？因此，陈志武先生在其著作《金融的逻辑》中写到：中国人勤劳而不富有的原因就在于金融业太落后了。我相信他的意思应该是我们即没有一个高效的股市可以将资本家的财富合法合理的分配给普通老百姓；也没有一套可靠的保险体系来让老百姓可以在生活的过程中无后顾之忧。</p><p><img src="https://i.imgur.com/T8rpIN7.jpg" alt=""></p><blockquote><p>二、次贷危机</p></blockquote><p>假设现在是2001年，你想在美国买一套价值100万美元的房子，没有多少人有能力用现金买房子，所以你决定用贷款的方式。美国的银行或类似的信贷机构会贷给你多少钱呢？—— 100万，甚至105万，连买保险的钱也贷款给你了。</p><p>（一分钱首付都不要的原因并非很多人所想象的美国金融业不负责任，而是因为美国就是一个信用社会。在美国消费基本上都是先拿走东西后付款。美国人虽然没有户口本儿，却人人都有一个名为“信用积分 credit score”的东西，因此不管是银行也好还是商家也好，都不会怕你借了钱不还或拿了东西后赖账。因为信用积分高的话，你会发现买什么东西都会便宜很多（会比别人便宜 5% ~ 20% 左右），而信用积分低的话，不仅买东西要更贵，而且以后你在任何地方都别想借钱了）。</p><p>这些银行或信贷公司借给你的钱就被称为住房抵押贷款（Housing Mortgage）。如果是在中国的话，那么这件事就到此为止了。但是美国的银行很聪明，他们不想等上20年才收回这些资金，于是它们把这些贷款又以 MBS（Mortgage Backed Security）住房抵押贷款证券的形式，卖给了其它金融机构。</p><p>什么意思呢？举个例子，假设我是银行A，我贷款了1000万美元给一些顾客买房，于是我现在有了比方说1500万美元（连本带利）的抵押贷款资产，但是这些资产我要分20年才能全部收回来，我不想等那么久，于是我把它以住房抵押贷款证券MBS的形式卖给你，另一家金融机构B，可能以1100万美元的价格（价格由当时的市场利率决定）。对于你来说，你用今天的1100万美元换了20年1500万美金的现金流，因此你是满意的！对于我来说，我一转手就净赚了100万美元，当然也是满意的。</p><p>当我，银行A，把MBS卖给你之后，你就拥有了这些MBS背后现金流（每个月贷款人所还本息）的所有权，但我还是会帮你去贷款买房子的人那里收钱，然后再将收到的钱转账给你。在这个过程中，我是 Servicer 服务者，你是 Owner 所有者。</p><p>这个神奇的过程就叫做<strong>证劵化</strong>！</p><p><img src="https://i.imgur.com/pxqzP3J.jpg" alt=""></p><p>这样一个过程和中国的那种传统模式有一个本质的不同，便是贷款人违约的风险被转移了。</p><p>在传统模式下，如果贷款买房的人违约了，那么银行要遭受很大的损失。而在这种证劵化的模式下，如果前者违约了，遭受损失的人将不再是银行A，因为它已经把这些贷款的所有权（以MBS的形式）卖给了另一家金融机构B，因此遭受损失的人就变成了购买了这些MBS的B。</p><p>那么这个所谓的另一家金融机构B，又是谁呢？</p><p>在房地产抵押贷款证券市场上，有接近一半的MBS 都卖给了著名的房利美和房地美 —— Fannie Mae &amp; Freddie Mac。在2007年次贷危机爆发前夕，它们所发行的MBS总金额高达4.4万亿美元。</p><p>不过它们也仅仅是中介而已，房地美和房利美买到这些MBS之后，也根本没打算持有它们到期（20年后），而是会将它们转手卖向全世界 —— 政府（主权财富基金）、银行、对冲基金、保险公司、养老金、个人投资者等等。</p><p>在这种情况下，就形成了一个完整的资金流转的链条 —— 从贷款买房的房主直达全世界的投资者。</p><p>这相当于全世界的投资者在“资助”美国人民买房，所以美国的房价从2001年开始，以历史上从未有过的速度上涨，泡沫就这样诞生了。</p><p>由于房地美和房利美是一种半国有化的企业，因此它们受到了严格的监管。它们从银行手中购买的MBS中的大部分（约为80%）都是最优质的，或者说，违约率最低的房地产抵押贷款证券MBS。</p><p>那么它们又如何分辨哪些MBS是优质的，哪些是劣质的呢？</p><p>这就要说到全球金融业中可以说是权力最大的三家公司 —— 三大评级公司的作用了。</p><p><img src="https://i.imgur.com/FmaPRt9.jpg" alt=""></p><p>评级公司负责为大多数在市场上交易的证券（包括MBS）进行评级。评级的基础是这些MBS背后那些借款人的原始资料。举个例子，我，银行A，想要发行为期20年，价值为1000万美元的MBS，那么我该如何为它定价？800万，还是900万？这时我就必须去找到评级公司。它们会根据我提供的借款人的资料，例如这些人的信用积分（前文中提到过的这个在美国生活最重要的东西之一，还记得吧？）；个人/家庭资产与负债的比例；以及每年需要偿还贷款的金额与年收入之比（最优级的话一般不能超过40%）。</p><p>根据这些信息，评级公司就会给这个MBS评一个级，例如AAA级，意味着评级公司认为这种证券的违约率非常非常低，投资这种债券的风险是很低的。或者C级，也叫“垃圾级”，例如现在希腊的国债，投资这种债券被违约的风险是很高的。购买1000万美元AAA级的MBS可能需要900万，而购买同样金额C级的MBS可能只需要600万。当然是评级越高，卖的越贵了。</p><p>当然，市场中作为MBS分销商的不仅有房地美和房利美，还有大名鼎鼎的各大华尔街投资投行们。</p><p><img src="https://i.imgur.com/385YFUg.jpg" alt=""></p><p>投资银行们（花旗、美林、高盛、雷曼兄弟、贝尔斯登、摩根斯坦利、摩根大通等等 ……）发现，从2001年开始，美国的房价就一直处于稳定的上升期。于是他们推测，即便找一些信用不好的人来放贷，也不会有很大的风险，因为即便是遭遇了违约，只要把房子收回来再卖掉就可以了嘛（抵押贷款证券MBS，顾名思义是以房子为抵押的）。</p><p>于是它们开始联合银行和信贷机构去发放更多的“次级债”，也就是开始为信用不好的人提供贷款。</p><p>对于发放贷款的银行和信贷机构来说呢？前面已经解释过，由于证劵化的过程，它们可以将这些MBS违约的风险转移给购买了这些MBS的投资银行们，因此它们又何乐而不为呢？越多越好！</p><p>因此，“次贷”危机中的次级抵押贷款（Sub-prime loan）或次级MBS，就这么诞生了。</p><p><img src="https://i.imgur.com/tTlSITN.jpg" alt=""></p><p>在这整个的证券化链条中，哪个环节是最关键的？毫无疑问，是贷款买房的人的信誉，最关键的地方在于他们能否将房贷如期如数的还给银行，再由银行传递给全世界的投资者们。</p><p>而当我们了解了整个证券化的过程之后，我们会想，不管是银行也好，还是信贷公司也好，都有动力去为信用级别很差的人放贷，而最终这些信用级别很差的人是很有可能违约的。如果事实果真如我们所想的话，那么未来整个证券化链条的崩塌也便不是不可能的事了。</p><p>影片重点描绘了贝尔和 Mark 是如何去调查的。</p><p>贝尔是在电脑前，去阅读那些MBS背后借款人的原始资料。因为他是对冲基金经理，他是买方，所以有权要求卖方（投资银行）提供这些资料。可想而知阅读这些资料是非常乏味的，贝尔仔细阅读了几十份这样的资料，粗略浏览了几百份（每一份都有几百甚至上千人的信息）。在书中，迈克尔·刘易斯这样写到：Dr. Burry 认为自己是这个地球上除了起草这些文件的律师之外，唯一一个阅读它们的人。</p><p>（这就解释了一位朋友在评论中所问的一个问题：难道这些金融机构或投资人不会去看看借款人的原始资料吗？很明显，资料就在那里，不过并没有什么人想要花时间看它们，因为有评级机构 …… 后面会讲到评级机构的作用）</p><p>在阅读这些资料的过程中贝尔惊奇的发现，在他所阅读过的大部分料中，其中 50%的借款人是没有任何资料的！也就是说只有不到 50%的人提供了收入证明、财产证明、信用积分等资料，而剩下的超过 50%的人是完全没有任何资料的！这意味着什么？意味着不是这些人完全不符合贷款的资格，就意味着银行在放贷时根本就没有要求他们提供任何资料！</p><p>那么 Mark 是如何去调查的呢？Mark 的做法是直接走访第一线，去看看银行和信贷公司到底是如何发放贷款的。电影中演到了两个场景：第一，当 Mark 问一家房子的租户 XXX（房屋的主人）是否在家时，租户告诉他那是一条狗的名字，是房主的狗的名字！也就是说，银行贷款给了一条狗！我不知道这是否是真实存在过的事 …… 但2007年4月当新世纪贷款公司破产，次贷危机的第一块骨牌倒下的时候，人们对新世纪贷款公司的形容确实是“它甚至会放贷给一条狗。”不知导演是否从这里得到了灵感。第二个场景便是当 Mark 询问负责给借款人放贷的银行的 Agent “是否曾拒绝过任何人贷款买房的请求”时，得到的答案是：“NO” ~</p><p>(再多说两句，真正厉害的投资人都是干这种事的，都是去第一线找第一手资料的。如果只是每天看着所有人都会看的财务报表；听着每天所有人都听的新闻，又如何能比市场的反应更快呢？要知道巴菲特在买了万事达的股票之后是去超市柜台前数有多少人用万事达信用卡的，一站就是一天；买了石油公司的股票之后是去火车站数油罐车的。)</p><p>还记得之前讲到虽然借款人的原始资料就在那里，但投资人也不会去看的吗？原因在哪里？因为评级公司会看，评级公司看完之后会给这些MBS评一个级，投资人只需根据评级来判断这些证券的风险就好了嘛。自从1902年 John Moody 创立了 Moody 评级公司之后，这种模式在过去将近一个世纪都运转良好，谁会想到这一次会出问题呢？（Moody 的大股东之一就是沃伦·巴菲特同学，Moody 的商业模式被巴菲特誉为是史上最成功的）</p><p>那么一向可靠的评级公司又出了什么问题呢？</p><p>电影里给出的答案是这样的：当 Mark 一行人拿着他们所搜集的，包含了很多没有借款人任何信息的MBS的资料去质问标准普尔（三大评级公司之一），为什么会给这些MBS评级AAA（最高级别）的时候，标准普尔是这么说的：如果我们不给这些MBS评级为AAA，这些公司就会去找 Moody（标准普尔的竞争对手）了。</p><p>这恐怕只能算作电影艺术的一种夸张手法了 …… 且不说标准普尔的人凭什么把“真”话说出来 …… 如果这就是真相的话，那岂不世界上所有的债券都要被评级为AAA了？</p><p>那么事实可能是怎样的呢？迈克尔·刘易斯在《大空头》这本书中给出一些解释：</p><p>一方面，华尔街投资银行的债券交易员们都是一些年收入7位数的人，他们哄骗那些年收入5位数的家伙（评级公司的员工）绰绰有余。事实上，评级公司那些最优秀的员工都纷纷跳槽到了投资银行，帮助自己的新东家去对付自己的老东家。</p><p><img src="https://i.imgur.com/kJy91t4.jpg" alt=""></p><p>举个例子来说，FICO评分是用于测算个人借款的信用值，最高850分，最低300分，美国的中位数是723分。Moody 和标准普尔使用的方法是用一个MBS中所有借款人的平均FICO评分。例如AAA评级所要求的FICO的平均分在615分左右，投行们便寻找一半550分的借款人和一半680分的借款人，然后（有目的的）将他们放在一个MBS里，这样这个MBS就可以被评为AAA级了。而事实上一个评分为550分的借款人，断供的可能性是很大的。典型的上有政策下有对策 ……</p><p>另一方面，迈克尔·刘易斯在书中写到，当有基金经理去质问评级公司为什么会给明显不靠谱的MBS评AAA级时，得到的回答都是：“住房价格在全国范围内同时下跌是不可能的，过去60多年的数据表明，从未出现过美国全国范围内住房价格同时下跌的情况。”</p><p>也就是说，在评级公司看来，由于这些MBS都是抵押贷款证券，即便遭遇了违约，只要把房子收回来再卖掉就可以了嘛（前面分析过）。除非房价下跌了，投资人才会真正的受到损失。然而又由于每个MBS都是由分布在全国各地的房子为抵押的（很正常的一种分散风险的做法），因此除非全国各地的房价同时开始下跌，不然这样的MBS是不会有什么风险的。而自从大萧条之后，美国从未出现过全国范围内房价同时下跌的情况。</p><p>这个理由就靠谱多了。</p><p>可是评级公司没有想到的是，美国的房地产市场在平稳的发展了80年之后，又经历了一次泡沫，而当泡沫破裂之时，正是全国房价同时下跌之日 ……</p><p>让我们再次回到2001年。</p><p> 2001年美国经历了两件大事。第一，从2010年3月开始破灭的互联网泡沫到了2001年开始全面崩溃。第二，美国遭遇了9-11恐怖袭击。袭击之后，金融市场的流动性开始急剧紧缩，一场衰退马上就要到来。</p><p>为了应对危机，时任美联储主席的艾伦·格林斯潘开始下调利率，如图，从2001年的6.5%一路下调至2003年的1%。</p><p>1%的利率对炒房者来说，炒房的代价降低了；但对于企业来说，投资研发新产品的代价也降低了呀。一个社会中不管是钱多了还是钱少了，都有一个资金的流向问题，因为资金不可能平均的覆盖每一个行业。</p><blockquote><p>三、投机和泡沫</p></blockquote><p>我们知道，泡沫往往来源于流动性过剩 —— 低利率政策（虽然两者之间没有必然的因果关系，但后者确实是前者的必要条件）。而泡沫的崩溃，则往往来源于流动性的收紧 —— <strong>高利率政策</strong>。</p><p>我们知道，正是美联储从1999年5月到2000年5月数次提高利率 —— 从4%提高到6.5%，直接导致了互联网泡沫在2000年的崩溃。再往前说，1990年，日本央行为了控制通货膨胀率，将利率从1%提高到3%，直接导致了“平成泡沫”的崩盘以及其一个又一个“失去的十年”。又例如2007年上半年，我国央行连续12次加息以应对通货膨胀，股市和楼市都在2007年下半年崩溃。次贷危机的导火索也不例外，2004年年中，时任美联储主席的格林斯潘开始加息以应对通胀，如图，从1%一路上调至5%。美国的房地产价格也开始在2006年回落。正是房地产价格的回落引爆了次贷危机。</p><p>当货币供应量增长的速度追不上泡沫增长的速度时，泡沫就会破裂。</p><p>在美国的购房政策中，有一条被称为<strong>“Foreclosure（止赎权）”</strong>。也就是说，利用贷款购买了房子的房主，可以在任何时候放弃房子的所有权，将房子退还给银行，同时停止偿付贷款（当然之前已经还的金额也是要不回来的）。</p><p><img src="https://i.imgur.com/KQ9ugdw.jpg" alt=""></p><p>在以前，我误认为在房价下跌的时候，会有很多人主动执行止赎权把房子退还给银行，因为当他们发现房子的市场价值已经低于自己要偿还的贷款金额时，干嘛不行使止赎权然后重新以更低的价格去买一套呢？于是我认为这是美国房地产崩溃的主要原因。</p><p>然而事实并非如此。来到美国之后，我才发现信用积分这个东西对美国人来说有多重要 …… 也就是说，你当然可以行使止赎权把房子退掉，但这种被称为“战略性违约”的行为会让你的信用积分大幅下降，用我美国投行朋友的话说，Foreclosure equals death，<strong>“行使止赎权等于死亡”</strong>。</p><p>如果不是房价下跌导致了借款人违约率的上升，那又是什么呢？</p><p>《大空头》再次给我们提供了答案：1996年时，有65%的贷款是固定利率的，而到2005年时，75%的贷款变成了浮动利率。</p><p>举个例子哈哈</p><p><img src="https://i.imgur.com/39izKkl.jpg" alt=""></p><p>我贷款100万美元买了一套房，利率是1%，为期20年的话我一共要还110万，每个月还4600美元。如果是固定利率贷款的话，那么我只用每个月还4600美元，还20年就行了。</p><p>然而对于银行来说，银行知道利率不可能长期在 1%这么低的位置停留，未来利率一定会升高，因此如果我20年内都只让你付 1%的利息的话，那银行不就亏死了。因此银行在贷款的时候不会和你签固定利率贷款合同，而会跟你签浮动利率贷款合同。这个利率可能是美联储的联邦基金利率 + 1%。假设现在的联邦基金利率是 0%，那么针对你这笔贷款的利率就是 1%，你依然每个月还 4600 美元。然而当美联储开始在2004年加息！联邦基金利率变成了 1%，那么针对你这笔贷款的利率就会变成 2%！此时你就不是每个月还 4600 了，而是变成还 5058 美元。更不用说格林斯潘一路把利率从 1%提高到 5%了！在 6%的利率水平下你将每月还 7176 美元。大家可以想象一下如果你的房租在两年之内从每月 4600 元上涨到每月 7176，你还租的起现在的房子吗？于是有大量的人在2006年开始被迫行使“止赎权”，将房子退还给银行。</p><p>当利率为 1%的时候，贷款100万买房，20年内只需要还110万；而当利率为 6%的时候，贷款100万买房，20年内要还172万。因此在一方面，这会直接导致买房者的数量大幅下降。另一方面，大量的人（尤其是像电影中那位脱衣舞女那样拥有五套房子的人）开始被迫将房子退还给银行。而银行拿到房子之后，则不得不将房子马上低价拍卖。</p><p>（在另一本描述金融危机的著作里，甚至提到了一对英国夫妇曾购买了99套房子。一旦利率开始上升，这样的人是100%要违约/断供的）</p><p>在以上两个因素的相互作用下，美国的房地产业迎来了大萧条之后的第一次全面下跌。</p><p>大量的MBS开始遭遇违约，全世界所有购买了这些MBS的投资者 —— 政府、银行、养老金、对冲基金等等进而都遭遇了严重的亏损。次贷危机就这样，由美国迅速波及了全世界。当全世界都陷入危机时，像中国这样虽然与MBS没有多少交集但严重依赖出口的国家当然也不能幸免。</p><p>这里还有一个问题。</p><p>在这个传导链条中，从表面上看，银行和信贷公司是没有风险的，因为它们将MBS都卖给了投资银行和房地美、房利美，对吧？即便借款人违约了，也是后者受损失。然而投资银行和房地美、房利美也是没有风险的，因为它们又都将MBS卖给了全球的投资者，即便借款人违约了，受损失的也应该是全球的投资者呀。</p><p>那为什么我们看到在次贷危机中，反而是银行、信贷机构、投资银行、房地美和房利美先面临破产呢？</p><p>原因就在于，这些MBS资产都有一个存货期。银行和信贷机构肯定是一边放贷，一边找买主，就像企业一边生产一边卖产品一样，在任何时间，它们手中肯定都会积攒很多贷款/MBS存货。投资银行也一样，它会一边购买MBS，一边打包分散风险（前文中讲过，将不同地区的或不同信用等级的MBS放在一起），一边找买主。同样，它们手中也积攒着很多MBS存货。</p><p>当市场开始转差，它们手中的这些MBS就会大幅跌价，甚至到根本卖不出去的地步，可是购买这些MBS的钱已经付了出去，如果卖不掉，就会给它们带来极大的损失。</p><p>可手中一点点存货的亏损，就能够让一家存在了150年的全球五大投行之一的雷曼兄弟破产吗？</p><p><img src="https://i.imgur.com/p2BylIL.jpg" alt=""></p><p>能的。</p><p>原因在于它的<strong>杠杆率</strong>实在是太高了。</p><p>什么是杠杆率呢？</p><p>杠杆率（Financial Leverage） = 总资产/核心资本</p><p>核心资本就是银行的自有资本，假设我有5元钱，然后借了95元钱去炒股，这时我的总资产就是100元钱，核心资本则是5元。杠杆率就是100/5 = 20倍。</p><p>此时，假设我炒股亏了6% —— 总资产损失了6%，我的总资产就剩下94元了，而我的核心/自有资本只有5元，我的负债却是95元，就会直接导致我的总资产已不足以还债了 —— 94 &lt; 95，因此我破产了！</p><p>也就是说，当我的杠杆率为20倍的时候，我的资产只要缩水超过5%，我就要破产。可以看出，杠杆率越高，银行的风险就越大。</p><p>那么美国五大投行的杠杆率在2007年到底有多高呢？</p><p>2007年年底，它们的总资产达到了4.3万亿美元，而自有资本仅为2003亿美元，也就是说，它们的杠杆率达到了21.3倍！</p><p>在如此高杠杆率的情况下，又怎么可能扛得住全美房地产价格同时下跌，房屋贷款违约率在2007年飙升至20%以上的打击呢？</p><p>相比之下，欧洲的银行们更为危险：</p><p>声名卓著的瑞士信贷银行（Credit Suisse）在2007年的杠杆率为33倍；荷兰国际集团（ING）达到了49倍；德意志银行（Deutsche Bank）高达53倍；英国的巴克莱（Barclay）则高达61倍。</p><p>（这也是欧洲必须拯救希腊最重要的一个原因，因为欧洲银行业的杠杆率太高了，根本无法承受希腊违约所带来的后果）</p><p>难道政府不监管，就任由它们的杠杆率这样飙升吗？</p><p>事实上，在2004年以前，美国的银行业有规定的，这个规定是银行的杠杆率不得超过15倍。然而这一规定在2004年被美国的证监会 SEC 给取消了。多么令人匪夷所思的一个事件。</p><p><img src="https://i.imgur.com/q83dQCA.jpg" alt=""></p><p>提到 SEC —— 美国的证监会（负责监管美国金融业的一家政府机构）在次贷危机中的失职，《大空头》这部电影也提到了一部分原因。其中一个场景便是片中某位角色的妹妹本来在 SEC 就职，却对这位角色说她想去高盛（五大投行之首）工作，原因很简单，高盛的工资是 SEC 的数倍 …… 然后当这位小美女看到泳池边的一位帅哥时，就蹦蹦跳跳的过去了，边走边甩下一句话：他在高盛工作 ……</p><p>确实，很多书籍和纪录片都提到了这个问题，不论是评级机构也好，还是美国证监会也好，它们员工的工资都只有投资银行员工的几分之一甚至十几分之一。美国人也爱钱，尤其是华尔街 …… 因此最有才华的人肯定都去了投资银行。你让一群次有才华或没有才华的人去监管这世界上最有才华的年薪普遍达到七位数（美元）的一群人，确实有点难啊 </p><blockquote><p>四、 CDS 和 CDO</p></blockquote><p><strong> CDS</strong>，Credit Default Swap 信用违约互换！</p><p>我们先来谈谈卖空是什么。卖空就是靠赌资产价格的下跌来赚钱。一般的做法是先问别人借一些资产，比方说问别人借价值100万美元的股票，然后马上以现在的市场价100万把这些股票卖掉。过一段时间之后，当股票价格下跌时，比方说跌到了50万美元，再以50万美元的价格把这些股票买回来，还给当年借你股票的人，就可以净赚50万美元。</p><p>贝尔是如何使用 CDS 去卖空 MBS 的呢？</p><p>CDS 并不是贝尔发明的，而是于1993年由摩根银行发明，一经发明立刻改变了整个金融业，和证券化一起可以位列金融史上最伟大的发明之一。</p><p>CDS 是一种保险合约，假设我想把一个MBS卖给你，但是如果你怕它违约怎么办呢？你可以花一笔钱去向一个第三方（也可以向我）购买一个 CDS 合同。这样假如这个MBS违约了，这个第三方可以给你赔偿，保证你不会遭受任何损失（除了买 CDS 合约的钱，和保险与保费的概念一模一样）。</p><p>贝尔心想，当MBS开始大规模违约的时候，为其保险的CDS的价格一定会大幅上升，就好像飓风袭来之前房屋保险和医疗保险的保费一定会大幅上涨一样。如果在此时去囤积大量CDS合约的话，那么当次贷危机爆发的时候，当MBS违约率大幅上升的时候，这种对MBS保险的CDS的合约价格一定会涨到天上去！到时贝尔就可以大赚一笔了。</p><p>（插曲~2001年当高盛通过财务造假将希腊送进欧元区的时候，高盛早就预料到了希腊会爆发债务危机，因此在同一年向德意志工业银行购买了为期20年，价值10亿欧元的为希腊国债做保的CDS合约。当2009年希腊债务危机爆发时，这些CDS合约的价格暴涨了40倍！）</p><p>再说说 <strong>CDO</strong>，Collateralized debt obligation。</p><p>这一幕主要发生在影片中Mark和一位CDO经理的对话中。CDO就是将一大堆MBS放在一起，形成一个资产池，然后由一位CDO经理来管理，通过买卖其中MBS来赚钱的公司（MBS的价格是会随着市场环境而波动的）。在这里，一份份MBS就像一只只股票，而CDO就像一家股票基金，CEO经理则是这家公司的基金经理。而电影中出现的CDO Square，“CDO平方”就像基金的基金一样，不是为投资者直接挑选股票来买卖，而是通过为投资者挑选不同的股票基金来赚钱。CDO平方就是为投资者挑选CDO的公司 …… CDO对次贷危机和金融系统的影响并没有那么大。真正问题的关键还是在于所有这些资产的基础 —— 借款人的违约。</p><blockquote><p>五、证券化</p></blockquote><p>我们还可以来看看证劵化的过程在实际操作中是如何实现的。它涉及到了两个著名的词汇 —— <strong>“SPV特殊目的工具”</strong>和<strong>“表外融资”</strong>。</p><p>依然假设我是银行A，我的资产负债表上有20亿的 Receivables 应收账款（那些贷款买房的人欠我的钱），如果我不想等20年而是现在就想把它们变现，我就会选择，比方说，以16亿的价格卖给你，金融机构B。但事实上你并不会想要买我的贷款，因为这么一笔巨大的资产，流动性也非常差，如果需要的话，你很难把它转手卖给别人。于是我想了个办法，我把这些贷款变成一份一份的MBS，然后再卖给你。这种东西在市场上的流动性非常高，如果你愿意，你随时可以再把它转卖出去。举个例子，就好像我现在有一家公司，我想卖给你，你不愿买，因为流动性太差，于是我把我公司的资产变成股权，然后卖你股权，你肯定就愿意了，因为你可以随时再把这些股权转卖出去。</p><p>那么这个MBS是个什么东西呢？它只是一种协议，这个协议的内容就是你现在给我1.6亿美元现金，我在未来的20年内分期还你2亿美元的现金（签10份）。而且如果有人违约了，我可以收回他的房子去卖，然后把卖得的现金给你作为补偿。</p><p>当我们签完这样一个协议之后，我，银行A会发现我的资产负债表上资产项目多了16亿美元的现金，但负债项目突然多了20亿美元 Payables 应付账款，这样一下就让我的资产负债表变得很难看，如果这样的事做的多了，还会违反例如金融杠杆限制的监管规定。</p><p>于是我又想了一个好办法！</p><p>我先成立一家独立的公司（注意，不是子公司，而是完全独立于我的公司），然后我把贷款卖给它！然后它再把它们变成MBS再卖给你（你去跟它签那份本该和我签的协议）！</p><p>这样一个过程，对我来说有好处也有坏处。</p><p>坏处在于我成立这样的公司是要花钱的。好处在于我实现了传说中的“表外融资”！此时我的资产负债表就不再是资产多16亿，负债多20亿了，而是变成了资产少了4亿（由20亿变成了16亿），但它们由20年的应收账款变成了16亿的现金（而为了得到这16亿我可能仅花了15亿喔）！我马上又可以用这16亿去干同样的事了！</p><p>（还有一个好处就是我这些MBS的利息会低于我去发债券融资的利息，因为这家SPV是 Bankrupt Remote 破产风险隔离的 ……）</p><p>对你，金融机构B也是既有好处也有坏处。</p><p>好处和坏处都在于这个SPV是“破产风险隔离”的，意思就是说在这20年中，由于所有权已经从我这里转移到了SPV那里，因此如果贷款违约了，那么只能由它来承担了，但是它没有多少资本呀！它只是一个SPV而已，因此恐怕只能您来承担了 …… 但好处在于，如果我，银行A破产了，那么它，SPV，以及你对于这些贷款现金流的索取权是不会受到任何影响的。因为我对它来说，也是破产风险隔离的。</p><blockquote><p>六、一些误解</p></blockquote><p>1、对次贷危机的误解</p><p>只要是批评金融业的作品，就一定会强调政府为了拯救这些金融机构，花了超过8000亿美元纳税人的钱。</p><p>但事实上，这些钱都用来购买这些金融机构的优先股了。</p><p>优先股我们可以把它想象成一种债券，每年有8%~12%的利息。</p><p>在次贷危机最严重的一年过去后，被拯救的金融机构们都纷纷偿还了当年政府援助它们的钱，也就是赎回了优先股。</p><p>在这个过程中，政府不仅没有亏钱，反而为纳税人赚了不少。</p><p>所以别再拿纳税人的钱说事儿了 ……</p><p>2、激励问题</p><p>有人说次贷危机爆发的一个原因是因为激励问题。也就是当市场形式好的时候，这些金融机构的 CEO 们大赚特赚，而万一公司破产倒闭了，他们又不会受到什么影响，因此这是在激励他们去做更为冒险的事情。</p><p>事实上并非如此。在美国的公司治理制度下，CEO 们都会购买大量自己公司的股票。这很容易理解。如果连公司的 CEO 都不买自己公司的股票，那外人谁还敢买？例如吉米·戴蒙在2005年接管摩根大通时，就用自己一半的财富购买了摩根大通的股票。</p><p>因此，当贝尔斯登以每股2美元的价格被出售给摩根大通（一年前还高达170美元），当雷曼兄弟破产，股价变得一文不值，受损失最大的恰恰是这些公司的CEO 们 —— 他们都亏损了数十亿美元。如果以亏损金额占个人资产比例做一个排序的话，那么他们很可能正是这次危机中损失最大的人。</p><p>因此我们不能将次贷危机爆发的原因归咎于所谓的“激励机制”，这是不符合逻辑的。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;一、金融业真的是多余的吗？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;很多电影都在暗示金融业是一个不创造任何财富的行业，好像是整个社会的寄生虫一般，这是错的非常离谱的。&lt;/p&gt;
&lt;p&gt;其实正是因为有了金融的运作 —— 股市的存在，西方国家才得以从19世纪马克思笔下的那种原汁原味的资本主义制度转型成了今天这种半资本主义半社会主义的制度。我们不妨再拿乔布斯举个例子。如果美国现在的经济制度还是延续着19世纪的传统的话，那么乔布斯很可能就是这个星球上有史以来最富有的人。原因很简单，苹果公司已经连续很多年荣膺全球最赚钱公司了，巅峰时期曾达到过一年赚500亿美元的纯利润，去年虽然下降了不少但依然有390亿美元。然而我们发现乔布斯在去世时只留下了86亿美元的财富。为什么会这样？&lt;/p&gt;
&lt;p&gt;因为乔布斯根本就不是一个资本家，苹果公司不属于他，而是属于全体股东 —— 最普通的美国老百姓的。&lt;/p&gt;
&lt;p&gt;这里就出了一个问题，既然这样，那乔布斯创立苹果之后，为什么要让它上市呢？为什么不像当年的约翰·洛克菲勒那样把它据为己有，然后取洛克菲勒而代之成为人类历史上最有钱的人呢？&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/xdNGEkN.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;原因在于他做不到。如果他不这样做（上市），那么这样做了的人的公司就会得到迅速的发展，从而远远的将他和苹果公司甩在后面。这些人中的佼佼者，无疑就是比尔·盖茨先生。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>《算法》--第一章--第一节 Java基础</title>
    <link href="wangsiyuan233.github.io/2018/06/13/52%E3%80%8A%E7%AE%97%E6%B3%95%E3%80%8B-%E7%AC%AC%E4%B8%80%E7%AB%A0/"/>
    <id>wangsiyuan233.github.io/2018/06/13/52《算法》-第一章/</id>
    <published>2018-06-13T23:23:54.000Z</published>
    <updated>2018-06-17T13:32:45.822Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://book.douban.com/subject/10432347/" target="_blank" rel="external">《算法 （第四版）》</a></p><p>对于小的程序来说，用哪种方法解决问题并不重要，但是对于大的项目来说，就可以节约大量的时间了，是的，你可以通过提高硬件的配置来提升速度，但是和优雅的代码相比，这根本不是一个数量级的。</p><blockquote><p>1、Java 的基本结构</p></blockquote><a id="more"></a><p>要定义数据类型和创建函数，要用到下面的语法：</p><p><strong>1.1 原始数据类型</strong>：<br>（包括却不仅限于）整型int、 浮点型double、 布尔型、 字符型char;<br>怎样操作这些类型呢？ —— 用表达式哦<br>表达式的优先级： <code>！&gt; &amp;&amp; &gt; ||</code></p><p><strong>1.2 语句</strong>： 声明、 赋值、 条件、 循环<br>1.2.1 声明： Java 是强类型，声明一定要在使用之前，变量的作用域就是定义它的地方<br>1.2.2 赋值： <code>c=a+b</code> 是一个操作，左边必须是单个变量，语句的目的是改变c的值<br>1.2.3 条件： 通过不同的操作来处理不同的输入<br><figure class="highlight xl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// if 语句 -- 表达差异</span></div><div class="line"><span class="keyword">if</span>(&lt;<span class="keyword">boolean</span> expression&gt;)&#123;&lt;<span class="keyword">block</span> statements&gt;&#125;</div><div class="line"><span class="keyword">else</span>&#123;&lt;<span class="keyword">block</span> statements&gt;&#125;</div></pre></td></tr></table></figure></p><p>1.2.4 循环： while、 break、 continue、 for<br>break 语句： 直接结束循环<br>continue 语句： 结束当前循环，进入下一循环<br><figure class="highlight xl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// while 语句 -- 重复，()内为假时，什么也不做</span></div><div class="line"><span class="keyword">while</span> (&lt;<span class="keyword">boolean</span> expression&gt;) &#123;&lt;<span class="keyword">block</span> statements&gt;&#125;</div></pre></td></tr></table></figure></p><figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">// <span class="keyword">for</span> 语句 -- 更紧凑的将[while 循环的最后一条语句的索引值 +<span class="number">1</span>]</div><div class="line"></div><div class="line"><span class="keyword">for</span>(<span class="variable">&lt;initialize&gt;</span>;<span class="variable">&lt;boolean expression&gt;</span>;<span class="variable">&lt;increment&gt;</span>)&#123;<span class="variable">&lt;block statement&gt;</span>&#125;</div><div class="line"></div><div class="line">// 上面的 <span class="keyword">for</span> 语句，大大的简化了下面的 while 循环</div><div class="line"></div><div class="line"><span class="variable">&lt;initialize&gt;</span>;</div><div class="line">while(<span class="variable">&lt;boolean expression&gt;</span>)&#123;<span class="variable">&lt;block statement&gt;</span>;<span class="variable">&lt;increment&gt;</span>&#125;</div></pre></td></tr></table></figure><p><strong>1.3 数组</strong>：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//声明、创建并初始化一个数组</span></div><div class="line">double[] a = new double[N];</div><div class="line">int[] a = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">8</span>&#125;</div></pre></td></tr></table></figure></p><p>数组名代表的是整个数组，如果我们将一个数组变量赋值给另一个变量，那么这两个变量将会指向同一个数组，这种情况叫做 起别名。 </p><p>如果是打算复制数组，不允许通过起别名这个方法，而要通过下面这个方法进行数组复制：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//复制数组</span></div><div class="line"><span class="keyword">int</span> N = a.length;</div><div class="line"><span class="keyword">double</span>[] b = <span class="keyword">new</span> <span class="keyword">double</span>[N];</div><div class="line"><span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++ ) &#123; b[i] = a[i] &#125;</div></pre></td></tr></table></figure></p><p><strong>1.4 静态方法</strong>：<br>静态方法是在被调用时顺序执行的语句，很多语言中把它叫做 函数</p><p><strong>1.5 字符串</strong>:<br>字符串并不是原始基本类型；</p><p>如果加号（+）的一个参数是字符串，那么 Java 会自动将其他参数都转换为字符串；也就是说，通过与一个空字符串相加，就能完成字符串的转换。 </p><p><strong>1.6 输入输出</strong>：<br>你键入的字符串，显示在屏幕上的过程，就是 I/O</p><p><em>小结：</em><br>第一小节大致的描述了一个完整的编程模型，但是现代编程更进一步，那就是数据抽象（面向对象编程OOP）；</p><p>数据抽象不仅仅是操作预定义的数据类型的静态方法，同时也鼓励程序定义自己的数据类型</p><blockquote><p>2、数据抽象</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://book.douban.com/subject/10432347/&quot;&gt;《算法 （第四版）》&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;对于小的程序来说，用哪种方法解决问题并不重要，但是对于大的项目来说，就可以节约大量的时间了，是的，你可以通过提高硬件的配置来提升速度，但是和优雅的代码相比，这根本不是一个数量级的。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1、Java 的基本结构&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JavaScript 中的几种遍历</title>
    <link href="wangsiyuan233.github.io/2018/06/07/51%E5%87%A0%E7%A7%8D%E9%81%8D%E5%8E%86/"/>
    <id>wangsiyuan233.github.io/2018/06/07/51几种遍历/</id>
    <published>2018-06-07T13:05:44.000Z</published>
    <updated>2018-06-16T13:48:38.836Z</updated>
    
    <content type="html"><![CDATA[<p>有下面的 数组 和 <code>JSON</code>对象：<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">var Arr</span> = [<span class="string">'Javascript'</span>, <span class="string">'Gulp'</span>, <span class="string">'CSS3'</span>, <span class="string">'Grunt'</span>, <span class="string">'jQuery'</span>, <span class="string">'angular'</span>];</div><div class="line"><span class="attribute">var Obj</span> = &#123;</div><div class="line">    aaa: <span class="string">'Javascript'</span>,</div><div class="line">    bbb: <span class="string">'Gulp'</span>,</div><div class="line">    ccc: <span class="string">'CSS3'</span>,</div><div class="line">    ddd: <span class="string">'Grunt'</span>,</div><div class="line">    eee: <span class="string">'jQuery'</span>,</div><div class="line">    fff: <span class="string">'angular'</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure></p><blockquote><p>一、For 循环</p></blockquote><a id="more"></a><figure class="highlight clojure"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">(<span class="name">function</span>() &#123;</div><div class="line">    for(<span class="name"><span class="builtin-name">var</span></span> i=0, len=Arr.length; i&lt;len; i++) &#123;</div><div class="line">        if (<span class="name">i</span> == <span class="number">2</span>) &#123;</div><div class="line">            // return;   // 函数执行被终止</div><div class="line">            // break;    // 循环被终止</div><div class="line">            continue; // 循环被跳过</div><div class="line">        &#125;<span class="comment">;</span></div><div class="line">        console.log(<span class="name">'Arr</span>['+ i +']<span class="symbol">:'</span> + Arr[i])<span class="comment">;</span></div><div class="line">    &#125;</div><div class="line">&#125;)()<span class="comment">;</span></div></pre></td></tr></table></figure><p><strong>需要注意的是：</strong><br>1、<code>for</code>循环中的 <code>i</code> 在循环结束之后任然存在与作用域中，为了避免影响作用域中的其他变量，使用函数自执行的方式将其隔离起来<code>()()</code>;</p><p>2、避免使用 <code>for(var i=0; i&lt;demo1Arr.length; i++){}</code> 的方式，这样的数组长度每次都被计算，效率低于上面的方式。也可以将变量声明放在 <code>for</code> 的前面来执行，提高阅读性;</p><p>3、跳出循环的方式有如下几种：<br><code>return</code> 函数执行被终止<br><code>break</code> 循环被终止<br><code>continue</code> 循环被跳过</p><blockquote><p>二、 For in</p></blockquote><p><code>for(var item in arr|obj){}</code> 可以用于遍历数组和对象</p><ul><li>遍历数组时，<code>item</code> 表示索引值， <code>arr</code> 表示当前索引值对应的元素 <code>arr[item]</code></li><li>遍历对象时，<code>item</code> 表示 <code>key</code> 值，<code>arr</code> 表示 <code>key</code> 值对应的 <code>value</code> 值 <code>obj[item]</code></li></ul><figure class="highlight clojure"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">(<span class="name">function</span>() &#123;</div><div class="line">    for(<span class="name"><span class="builtin-name">var</span></span> i in demoArr) &#123;</div><div class="line">        if (<span class="name">i</span> == <span class="number">2</span>) &#123;</div><div class="line">            return; // 函数执行被终止</div><div class="line">            // break;  // 循环被终止</div><div class="line">            // continue;  // 循环被跳过</div><div class="line">        &#125;<span class="comment">;</span></div><div class="line">        console.log(<span class="name">'demoArr</span>['+ i +']<span class="symbol">:'</span> + demoArr[i])<span class="comment">;</span></div><div class="line">    &#125;</div><div class="line">    console.log(<span class="name">'-------------'</span>)<span class="comment">;</span></div><div class="line">&#125;)()<span class="comment">;</span></div></pre></td></tr></table></figure><p><strong>需要注意的是：</strong><br>1、在 <code>for</code> 循环与 <code>for in</code> 循环中，<code>i</code> 值都会在循环结束之后保留下来。因此使用函数自执行的方式避免;</p><p>2、使用 <code>return</code>，<code>break</code>，<code>continue</code> 跳出循环都与 <code>for</code> 循环一致，不过关于 <code>return</code> 需要注意，在函数体中，<code>return</code> 表示函数执行终止，就算是循环外面的代码，也不再继续往下执行。而 <code>break</code> 仅仅只是终止循环，后面的代码会继续执行。例如 ：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">res</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> Arr = [<span class="string">'Javascript'</span>, <span class="string">'Gulp'</span>, <span class="string">'CSS3'</span>, <span class="string">'Grunt'</span>, <span class="string">'jQuery'</span>, <span class="string">'angular'</span>];</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> item <span class="keyword">in</span> Arr) &#123;</div><div class="line">        <span class="keyword">if</span> (item == <span class="number">2</span>) &#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;;</div><div class="line">        <span class="built_in">console</span>.log(item, Arr[item]);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'desc'</span>, <span class="string">'function res'</span>); <span class="comment">//不会执行</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><blockquote><p>三、 forEach</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Arr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">val, index</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (e == <span class="string">'CSS3'</span>) &#123;</div><div class="line">        <span class="keyword">return</span>;  <span class="comment">// 循环被跳过</span></div><div class="line">        <span class="comment">// break;   // 报错</span></div><div class="line">        <span class="comment">// continue;// 报错</span></div><div class="line">    &#125;;</div><div class="line">    <span class="built_in">console</span>.log(val, index);</div><div class="line">&#125;)</div></pre></td></tr></table></figure><p><strong>需要注意的是：</strong><br>1、回调函数中有2个参数，分别表示值和索引，这一点与jQuery中的$.each相反<br>2、forEach无法遍历对象<br>3、forEach无法在IE中使用，firefox和chrome实现了该方法<br>4、forEach无法使用break，continue跳出循环，使用return时，效果和在for循环中使用continue一致</p><blockquote><p>四、do/while</p></blockquote><p>当使用continue时，如果你将i++放在了后面，那么i++的值将一直不会改变，最后陷入死循环。因此使用do/while一定要小心谨慎一点。</p><p>不建议使用do/while的方式来遍历数组<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 直接使用while</span></div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> i = <span class="number">0</span>,</div><div class="line">        len = Arr.length;</div><div class="line">    <span class="keyword">while</span>(i &lt; len) &#123;</div><div class="line">        <span class="keyword">if</span> (i == <span class="number">2</span>) &#123;</div><div class="line">            <span class="comment">// return; // 函数执行被终止</span></div><div class="line">            <span class="comment">// break;  // 循环被终止</span></div><div class="line">            <span class="comment">// continue;  // 循环将被跳过，因为后边的代码无法执行，i的值没有改变，因此循环会一直卡在这里，慎用！！</span></div><div class="line">        &#125;;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'demoArr['</span>+ i +<span class="string">']:'</span> + Arr[i]);</div><div class="line">        i ++;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'------------------------'</span>);</div><div class="line">&#125;)();</div><div class="line"></div><div class="line"><span class="comment">// do while</span></div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> i = <span class="number">0</span>,</div><div class="line">        len = Arr.length;</div><div class="line">    <span class="keyword">do</span> &#123;</div><div class="line">        <span class="keyword">if</span> (i == <span class="number">2</span>) &#123;</div><div class="line">            <span class="keyword">break</span>; <span class="comment">// 循环被终止</span></div><div class="line">        &#125;;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'demo2Arr['</span>+ i +<span class="string">']:'</span> + Arr[i]);</div><div class="line">        i++;</div><div class="line">    &#125; <span class="keyword">while</span>(i&lt;len);</div><div class="line">&#125;)();</div></pre></td></tr></table></figure></p><blockquote><p>五、$.each</p></blockquote><p>可以用来遍历数组和对象，其中e表示索引值或者key值，ele表示value值<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$.each(Arr, function(e, ele) &#123;</div><div class="line">    console.log(e, ele);</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">// 输出为：</span></div><div class="line"><span class="number">0</span> <span class="string">"Javascript"</span></div><div class="line"><span class="number">1</span> <span class="string">"Gulp"</span></div><div class="line"><span class="number">2</span> <span class="string">"CSS3"</span></div><div class="line"><span class="number">3</span> <span class="string">"Grunt"</span></div><div class="line"><span class="number">4</span> <span class="string">"jQuery"</span></div><div class="line"><span class="number">5</span> <span class="string">"angular"</span></div></pre></td></tr></table></figure></p><p><strong>需要注意的是：</strong><br>1、使用return 或者return true为跳过一次循环，继续执行后面的循环<br>2、使用return false为终止循环的执行，但是并不终止函数执行<br>3、无法使用break与continue来跳过循环<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//循环中this值输出类似如下:</span></div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>);</div><div class="line"><span class="comment">//String &#123;0: "C", 1: "S", 2: "S", 3: "3", length: 4, [[PrimitiveValue]]: "CSS3"&#125;</span></div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span> == ele);</div><div class="line"><span class="comment">// true</span></div><div class="line"></div><div class="line"><span class="comment">//遍历一下 this:</span></div><div class="line">$.each(<span class="keyword">this</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e, ele</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(e, ele);</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">//输出：</span></div><div class="line"><span class="number">0</span> c</div><div class="line"><span class="number">1</span> s</div><div class="line"><span class="number">2</span> s</div><div class="line"><span class="number">4</span> <span class="number">3</span></div></pre></td></tr></table></figure></p><p>javascript的内部属性中，将对象数据属性中的Enumerable设置为了false，所以length 和 [[PrimitiveValue]]没有遍历出来</p><p>$.each 中的 $(this) 与this有所不同，不过遍历结果却是一样</p><blockquote><p>六、$(selecter).each</p></blockquote><p>专门用来遍历DOMList<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'.list li'</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params">e, ele</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(e, ele);</div><div class="line">    <span class="comment">// console.log(this == ele); // true</span></div><div class="line">    $(<span class="keyword">this</span>).html(e);</div><div class="line">    <span class="keyword">if</span> ($(<span class="keyword">this</span>).attr(<span class="string">'data-item'</span>) == <span class="string">'do'</span>) &#123;</div><div class="line">        $(<span class="keyword">this</span>).html(<span class="string">'data-item: do'</span>);</div><div class="line">    &#125;;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p><p>1、this 当前被遍历的DOM元素，不能调用jQuery方法<br>2、$(this) == $(ele) 当前被遍历元素的jquery对象，可以调用jquery的方法进行dom操作</p><blockquote><p>使用for in 遍历DOMList</p></blockquote><p>直接遍历的结果如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> domList = <span class="built_in">document</span>.getElementsByClassName(<span class="string">'its'</span>);</div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> item <span class="keyword">in</span> domList) &#123;</div><div class="line">    <span class="built_in">console</span>.log(item, <span class="string">':'</span> + domList[item]);</div><div class="line">&#125;</div><div class="line"><span class="comment">// 0: &lt;li&gt;&lt;/li&gt;</span></div><div class="line"><span class="comment">// 1: &lt;li&gt;&lt;/li&gt;</span></div><div class="line"><span class="comment">//    ...</span></div><div class="line"><span class="comment">// length: 5</span></div><div class="line"><span class="comment">// item: function item() &#123;&#125;</span></div><div class="line"><span class="comment">// namedItem: function namedItem() &#123;&#125;</span></div></pre></td></tr></table></figure></p><p>因为domList并非数组，而是一个对象，只是因为其key值为0，1，2… 而感觉与数组类似;</p><p>所以我们在使用for in 遍历domList时，需要将domList转换为数组：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> res = [].slice.call(domList);</div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> item <span class="keyword">in</span> res) &#123;&#125;</div></pre></td></tr></table></figure></p><blockquote><p><code>()()</code>, <code>!function() {}()</code>, <code>+function() {}()</code> 三种函数自执行的方式</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有下面的 数组 和 &lt;code&gt;JSON&lt;/code&gt;对象：&lt;br&gt;&lt;figure class=&quot;highlight ebnf&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;var Arr&lt;/span&gt; = [&lt;span class=&quot;string&quot;&gt;&#39;Javascript&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Gulp&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;CSS3&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Grunt&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;jQuery&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;angular&#39;&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;var Obj&lt;/span&gt; = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    aaa: &lt;span class=&quot;string&quot;&gt;&#39;Javascript&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    bbb: &lt;span class=&quot;string&quot;&gt;&#39;Gulp&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ccc: &lt;span class=&quot;string&quot;&gt;&#39;CSS3&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ddd: &lt;span class=&quot;string&quot;&gt;&#39;Grunt&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    eee: &lt;span class=&quot;string&quot;&gt;&#39;jQuery&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    fff: &lt;span class=&quot;string&quot;&gt;&#39;angular&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一、For 循环&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>配置 React</title>
    <link href="wangsiyuan233.github.io/2018/05/29/50%E9%85%8D%E7%BD%AEReact/"/>
    <id>wangsiyuan233.github.io/2018/05/29/50配置React/</id>
    <published>2018-05-30T02:11:41.000Z</published>
    <updated>2018-05-31T15:14:35.607Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>第一步： 安装 React</p></blockquote><p>1、 <a href="https://pan.baidu.com/s/1kU4K9iJ" target="_blank" rel="external">下载</a><code>yarn</code></p><p>2、临时文件夹实验：<br><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="string">mkdir </span>~/<span class="string">temp;</span> <span class="string">cd </span>~/<span class="string">temp</span></div><div class="line"></div><div class="line"><span class="string">npm </span><span class="string">install </span>-g <span class="built_in">create-react-app</span></div><div class="line"></div><div class="line"><span class="built_in">create-react-app</span> <span class="string">hello-world</span></div><div class="line"></div><div class="line"><span class="string">cd </span><span class="string">hello-world</span></div><div class="line"></div><div class="line"><span class="string">npm </span><span class="string">start </span>或者 <span class="string">yarn </span><span class="string">start</span></div></pre></td></tr></table></figure></p><p> <code>create-react-app</code> 内置了 <code>webpack</code> 的所有功能。</p><p>3、初始化 <code>React</code><br>清空 <code>temp</code> 文件夹，同时清空项目文件夹<br>（因为 <code>create-react-app</code> 会自己创建 <code>src</code> 和 <code>index.html</code> ）<br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">cd 到你在上次任务中新建的项目目录！</div><div class="line"></div><div class="line"><span class="comment"># 删除所有非隐藏文件，这一步千万不要手抖，后果自负</span></div><div class="line"></div><div class="line">rm -rf * </div><div class="line">git <span class="keyword">add</span><span class="bash"> .</span></div><div class="line">git commit -m <span class="string">"remove all files"</span></div><div class="line">git push</div></pre></td></tr></table></figure></p><p>正式开始初始化：<br><a id="more"></a><br><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">create-react-app</span> .</div><div class="line"><span class="string">yarn </span><span class="string">start</span></div></pre></td></tr></table></figure></p><p><code>yarn start</code> 就相当于 <code>webpack</code> 的 <code>watch</code> 功能。</p><p>注意：改 <code>JS</code> 会自动刷新页面，改 <code>HTML</code> 要手动刷新页面。</p><blockquote><p>第二步：部署</p></blockquote><p>1、 在 <code>package.json</code> 里添加  <code>&quot;homepage&quot;: &quot;https://wangsiyuan233.github.io/react-todolist /build &quot;,</code></p><p>2、 <code>yarn start</code></p><blockquote><p>第三步： React 的生命周期</p></blockquote><p>组件不能改变得到的 <code>props</code>，可变的东西要放在 <code>state</code></p><p>直接在 <code>render</code> 或 <code>constructor</code> 里面改 <code>state</code> ，都失败了</p><p>必须使用 <code>this.setState()</code> 方法来改变 <code>state</code>，直接对 <code>state</code> 赋值毫无用处。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">     setInterval(<span class="function"><span class="params">()</span>=&gt;</span>&#123; <span class="comment">// 搜索「JS 箭头函数 MDN」</span></div><div class="line">-      <span class="keyword">this</span>.state = &#123;</div><div class="line">+      <span class="keyword">this</span>.setState(&#123;</div><div class="line">         <span class="attr">date</span>: <span class="keyword">new</span> <span class="built_in">Date</span>() <span class="comment">// 更新 date</span></div><div class="line">-      &#125;</div><div class="line">+      &#125;)</div><div class="line">     &#125;)</div></pre></td></tr></table></figure></p><p>OK,那我们把 <code>setState</code> 放在那儿呢？</p><p><code>React</code> 的生命周期包括三个阶段：<code>mount</code>（挂载）、<code>update</code>（更新）和 <code>unmount</code>（移除）</p><h2 id="mount（挂载）"><a href="#mount（挂载）" class="headerlink" title="mount（挂载）"></a><code>mount</code>（挂载）</h2><p><img src="https://i.imgur.com/RMpH2WV.jpg" alt=""></p><h2 id="update（更新）"><a href="#update（更新）" class="headerlink" title="update（更新）"></a><code>update</code>（更新）</h2><p>mount 之后，如果数据有任何变动，就会来到 update 过程，这个过程有 5 个钩子：</p><p>1、<code>componentWillReceiveProps(nextProps)</code> - 我要读取 <code>props</code> 啦！<br>2、<code>shouldComponentUpdate(nextProps, nextState)</code> - 请问要不要更新组件？<code>true / false</code><br>3、<code>componentWillUpdate()</code> - 我要更新组件啦！<br>4、<code>render()</code> - 更新！<br>5、<code>componentDidUpdate()</code> - 更新完毕啦！</p><h2 id="unmount（移除）"><a href="#unmount（移除）" class="headerlink" title="unmount（移除）"></a><code>unmount</code>（移除）</h2><p>当一个组件将要从页面中移除时，会进入 <code>unmount</code> 过程，这个过程就一个钩子：</p><p><code>componentWillUnmount()</code> - 我要死啦！</p><p>你可以在这个组件死之前做一些清理工作。</p><p><strong>废话那么多，所以 <code>setState</code> 到底放哪儿？</strong></p><p>一般，我们只在这几个钩子里 <code>setState</code>：</p><p>1、<code>componentWillMount</code><br>2、<code>componentDidMount</code><br>3、<code>componentWillReceiveProps</code></p><p>反正 <code>this.state</code> 就是不会在 <code>this.setState</code> 调用之后立刻更新</p><p>总结一下，<code>setState</code> 最招骂的就是不会立即修改 <code>this.state</code>。</p><p>原来 <code>this.setState</code> 可以接受一个函数作为参数啊！</p><p>传统式 <code>setState</code> 的存在，会把函数式 <code>setState</code> 拖下水</p><p>只要有一个传统式的 <code>setState</code> 调用，就把其他函数式 <code>setState</code> 调用给害了。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;第一步： 安装 React&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;1、 &lt;a href=&quot;https://pan.baidu.com/s/1kU4K9iJ&quot;&gt;下载&lt;/a&gt;&lt;code&gt;yarn&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;2、临时文件夹实验：&lt;br&gt;&lt;figure class=&quot;highlight dsconfig&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;mkdir &lt;/span&gt;~/&lt;span class=&quot;string&quot;&gt;temp;&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;cd &lt;/span&gt;~/&lt;span class=&quot;string&quot;&gt;temp&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;npm &lt;/span&gt;&lt;span class=&quot;string&quot;&gt;install &lt;/span&gt;-g &lt;span class=&quot;built_in&quot;&gt;create-react-app&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;create-react-app&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;hello-world&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;cd &lt;/span&gt;&lt;span class=&quot;string&quot;&gt;hello-world&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;npm &lt;/span&gt;&lt;span class=&quot;string&quot;&gt;start &lt;/span&gt;或者 &lt;span class=&quot;string&quot;&gt;yarn &lt;/span&gt;&lt;span class=&quot;string&quot;&gt;start&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt; &lt;code&gt;create-react-app&lt;/code&gt; 内置了 &lt;code&gt;webpack&lt;/code&gt; 的所有功能。&lt;/p&gt;
&lt;p&gt;3、初始化 &lt;code&gt;React&lt;/code&gt;&lt;br&gt;清空 &lt;code&gt;temp&lt;/code&gt; 文件夹，同时清空项目文件夹&lt;br&gt;（因为 &lt;code&gt;create-react-app&lt;/code&gt; 会自己创建 &lt;code&gt;src&lt;/code&gt; 和 &lt;code&gt;index.html&lt;/code&gt; ）&lt;br&gt;&lt;figure class=&quot;highlight dockerfile&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;cd 到你在上次任务中新建的项目目录！&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 删除所有非隐藏文件，这一步千万不要手抖，后果自负&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;rm -rf * &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;git &lt;span class=&quot;keyword&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; .&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/span&gt;git commit -m &lt;span class=&quot;string&quot;&gt;&quot;remove all files&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;git push&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;正式开始初始化：&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Webpack配置</title>
    <link href="wangsiyuan233.github.io/2018/05/29/49Webpack%E9%85%8D%E7%BD%AE/"/>
    <id>wangsiyuan233.github.io/2018/05/29/49Webpack配置/</id>
    <published>2018-05-29T08:48:37.000Z</published>
    <updated>2018-05-30T02:08:52.285Z</updated>
    
    <content type="html"><![CDATA[<h3 id="webpack-的作用-使用各种-loader-加载不同的资源-把所有资源打包起来"><a href="#webpack-的作用-使用各种-loader-加载不同的资源-把所有资源打包起来" class="headerlink" title="webpack 的作用:使用各种 loader 加载不同的资源,把所有资源打包起来"></a>webpack 的作用:使用各种 loader 加载不同的资源,把所有资源打包起来</h3><blockquote><p>第一步：设置一个 <code>npm</code>，让 <code>npm</code> 下载得更快一些</p></blockquote><p>1、运行 <code>npm config set loglevel http</code> 让你知道 <code>npm</code> 发的每一个请求<br>2、运行 <code>npm config set progress false</code>，关闭那个无聊的进度条<br>3、运行 <code>npm config set registry https://registry.npm.taobao.org/</code> ， 从淘宝的服务器下载各种包。不过这会让你在运行 <code>npm adduser</code> 的时候出问题，想要恢复成原样，只需要运行 <code>npm config delete registry</code> 即可。<br>4、运行 <code>touch ~/.bashrc; echo &#39;export PHANTOMJS_CDNURL=&quot;http://npm.taobao.org/mirrors/phantomjs&quot;&#39; &gt;&gt; ~/.bashrc</code> 让 <code>npm</code> 从淘宝下载 <code>phantomjs</code><br>5、运行 <code>touch ~/.bashrc; echo &#39;export SASS_BINARY_SITE=&quot;https://npm.taobao.org/mirrors/node-sass&quot;&#39; &gt;&gt; ~/.bashrc</code> 让 npm 从淘宝下载 SASS<br>6、运行 <code>source ~/.bashrc</code></p><blockquote><p>第二步：复制 <code>webpack</code> 的<a href="https://webpack.js.org/guides/getting-started/" target="_blank" rel="external">指引</a></p></blockquote><a id="more"></a><p>1、<code>cd</code> 到你喜欢的一个地方，比如 <code>~/code/</code> 目录  <code>mkdir webpack-demo &amp;&amp; cd webpack-demo</code><br>2、好了，现在我身处 <code>webpack-demo</code> 目录 <code>npm init -y</code><br>3、上面命令创建了一个 <code>package.json</code> 文件 <code>npm install --save-dev webpack</code><br>非 Windows 用户复制这一行：<code>./node_modules/.bin/webpack --help</code> </p><p>看到刷刷刷的英文，就是安装成功，试着运行一下吧</p><blockquote><p>第三步：现在创建一个子目录（<code>app.js</code>)</p></blockquote><p>1、<code>mkdir app &amp;&amp; cd app</code><br>2、<code>touch index.js</code><br>3、编辑 <code>app/index.js</code>：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">component</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> element = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</div><div class="line"></div><div class="line">  <span class="comment">/* lodash is required for the next line to work */</span></div><div class="line">  element.innerHTML = _.join([<span class="string">'Hello'</span>,<span class="string">'webpack'</span>], <span class="string">' '</span>);</div><div class="line"></div><div class="line">  <span class="keyword">return</span> element;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">document</span>.body.appendChild(component());</div></pre></td></tr></table></figure></p><p>4、在 <code>app</code> 文件夹外面创建 <code>touch index.html</code>：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>webpack 2 demo<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/lodash@4.16.6"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"app/index.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p><p>5、引入 <code>lodash</code> : <code>npm install --save lodash</code><br>6、然后在 <code>app/index.js</code> 的第一行添加 ： <code>import _ from &#39;lodash&#39;;</code><br>7、把 <code>app/index.html</code> 改动一下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">title</span>&gt;</span>webpack 2 demo<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">-    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/lodash@4.16.6"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">-    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"app/index.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">+    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"dist/bundle.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"> <span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p><p>浏览器打开 <code>index.html</code>，看到 <code>hello webpack</code>，就证明 <code>webpack</code> 安装成功了~</p><blockquote><p>第四步： 快速启动</p></blockquote><p>1、<code>webpack-demo</code> 目录下新建并编辑 <code>webpack.config.js</code>, (连接<code>app/index.js</code> 、<code>dist</code> 和 <code>bundle.js</code> 这三个关键词)<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  <span class="attr">entry</span>: <span class="string">'./app/index.js'</span>,</div><div class="line">  <span class="attr">output</span>: &#123;</div><div class="line">    <span class="attr">filename</span>: <span class="string">'bundle.js'</span>,</div><div class="line">    <span class="attr">path</span>: path.resolve(__dirname, <span class="string">'dist'</span>)</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p><p>2、修改 <code>package.json</code><br><figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">   <span class="string">"scripts"</span>: &#123;</div><div class="line">-    <span class="string">"test"</span>: <span class="string">"echo \"</span><span class="keyword">Error</span>: <span class="keyword">no</span> <span class="keyword">test</span> specified\<span class="string">" &amp;&amp; exit 1"</span></div><div class="line">+    <span class="string">"test"</span>: <span class="string">"echo \"</span><span class="keyword">Error</span>: <span class="keyword">no</span> <span class="keyword">test</span> specified\<span class="string">" &amp;&amp; exit 1"</span>,</div><div class="line">+    <span class="string">"build"</span>: <span class="string">"webpack"</span></div><div class="line">   &#125;,</div><div class="line">   <span class="string">"keywords"</span>: [],</div></pre></td></tr></table></figure></p><p>3、然后运行 <code>npm run build</code> 那么说明运行 <code>npm run build</code> 就等于运行 <code>node_modules</code> 里的 <code>webpack</code> 可执行文件，这个可执行文件会自己去 <code>webpack.config.js</code> 里找 <code>app/index.js</code>、<code>dist</code> 和 <code>bundle.js</code> 三个关键词。</p><p>所以现在不用运行 <code>./node_modules/.bin/webpack app/index.js dist/bundle.js</code><br>而是运行 <code>npm run build</code> 就可以了</p><p><strong><code>npm run build</code> 特别重要，把 <code>src</code> 里面的代码打包好提交到 <code>build</code> 里面， 就是这么来的啊！</strong></p><blockquote><p>第五步：监听文件变动</p></blockquote><p>我们需要 <code>watch</code> 来 <code>webpack</code> 监听文件变动，一旦我们保存了文件，它就重新 <code>build</code> 代码。</p><p>1、在 <code>package.jason</code> 中添加一个 <code>npm script</code>：<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">   <span class="string">"scripts"</span>: &#123;</div><div class="line">     <span class="string">"test"</span>: <span class="string">"echo \"</span><span class="keyword">Error</span>: <span class="keyword">no</span> <span class="keyword">test</span> specified\<span class="string">" &amp;&amp; exit 1"</span>,</div><div class="line">-    <span class="string">"build"</span>: <span class="string">"webpack -p"</span></div><div class="line">+    <span class="string">"build"</span>: <span class="string">"webpack -p"</span>,</div><div class="line">+    <span class="string">"dev"</span>: <span class="string">"webpack --progress --watch"</span></div><div class="line">   &#125;,</div><div class="line">   <span class="string">"keywords"</span>: [],</div></pre></td></tr></table></figure></p><p>此时打开 <code>index.html</code>， 编辑 <code>app/index.js</code>，<strong>保存</strong>，你会发现 <code>webpack</code> 自动 <code>build</code> 了，这是刷新 <code>index.html</code></p><blockquote><p>第六步： 浏览器自动刷新</p></blockquote><p>如果能边写边改多好啊！（不是保存后再自动刷新）<br>1、 <code>index.html</code> 里 改为 <code>&lt;script src=&quot;/bundle.js&quot;&gt;&lt;/script&gt;</code><br>2、 <code>package.json</code>：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">-    <span class="string">"dev"</span>: <span class="string">"webpack --progress --watch"</span></div><div class="line">+    <span class="string">"dev"</span>: <span class="string">"webpack-dev-server --open"</span></div><div class="line"></div><div class="line"></div><div class="line">-    <span class="string">"webpack"</span>: <span class="string">"^2.3.2"</span></div><div class="line">+    <span class="string">"webpack"</span>: <span class="string">"^2.3.2"</span>,</div><div class="line">+    <span class="string">"webpack-dev-server"</span>: <span class="string">"^2.4.2"</span></div></pre></td></tr></table></figure></p><p>3、运行 <code>npm run dev</code>，然后浏览器就会自动打开 <code>http://localhost:8080/</code> ，你会看到 <code>index.html</code> 页面</p><p>当我们修改 <code>index.js</code> 时：bundle.js 自动打包； <code>http://localhost:8080/</code> 自动刷新</p><p>注意，期间 <code>dist/bundle.js</code> 不会自动变化，你在<strong>部署代码之前</strong>，依然要运行 <code>npm run build</code> 才行。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;webpack-的作用-使用各种-loader-加载不同的资源-把所有资源打包起来&quot;&gt;&lt;a href=&quot;#webpack-的作用-使用各种-loader-加载不同的资源-把所有资源打包起来&quot; class=&quot;headerlink&quot; title=&quot;webpack 的作用:使用各种 loader 加载不同的资源,把所有资源打包起来&quot;&gt;&lt;/a&gt;webpack 的作用:使用各种 loader 加载不同的资源,把所有资源打包起来&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;第一步：设置一个 &lt;code&gt;npm&lt;/code&gt;，让 &lt;code&gt;npm&lt;/code&gt; 下载得更快一些&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;1、运行 &lt;code&gt;npm config set loglevel http&lt;/code&gt; 让你知道 &lt;code&gt;npm&lt;/code&gt; 发的每一个请求&lt;br&gt;2、运行 &lt;code&gt;npm config set progress false&lt;/code&gt;，关闭那个无聊的进度条&lt;br&gt;3、运行 &lt;code&gt;npm config set registry https://registry.npm.taobao.org/&lt;/code&gt; ， 从淘宝的服务器下载各种包。不过这会让你在运行 &lt;code&gt;npm adduser&lt;/code&gt; 的时候出问题，想要恢复成原样，只需要运行 &lt;code&gt;npm config delete registry&lt;/code&gt; 即可。&lt;br&gt;4、运行 &lt;code&gt;touch ~/.bashrc; echo &amp;#39;export PHANTOMJS_CDNURL=&amp;quot;http://npm.taobao.org/mirrors/phantomjs&amp;quot;&amp;#39; &amp;gt;&amp;gt; ~/.bashrc&lt;/code&gt; 让 &lt;code&gt;npm&lt;/code&gt; 从淘宝下载 &lt;code&gt;phantomjs&lt;/code&gt;&lt;br&gt;5、运行 &lt;code&gt;touch ~/.bashrc; echo &amp;#39;export SASS_BINARY_SITE=&amp;quot;https://npm.taobao.org/mirrors/node-sass&amp;quot;&amp;#39; &amp;gt;&amp;gt; ~/.bashrc&lt;/code&gt; 让 npm 从淘宝下载 SASS&lt;br&gt;6、运行 &lt;code&gt;source ~/.bashrc&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;第二步：复制 &lt;code&gt;webpack&lt;/code&gt; 的&lt;a href=&quot;https://webpack.js.org/guides/getting-started/&quot;&gt;指引&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>MVC与模块化</title>
    <link href="wangsiyuan233.github.io/2018/05/14/48MVC%E4%B8%8E%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
    <id>wangsiyuan233.github.io/2018/05/14/48MVC与模块化/</id>
    <published>2018-05-15T02:16:16.000Z</published>
    <updated>2018-05-15T02:42:40.743Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>一、模块化</p></blockquote><p><strong>目的：通过对文件的命名和代码的简化，可以更加方便的辨别代码的功能与作用。</strong></p><p>以js代码为例，我们把admin.js，按照功能拆分成module-1.js等三个文件，形成模块。这样每个文件的代码都会小而清晰，这也就是模块化的一种体现。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--index.html--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    module-1 of html</div><div class="line">    module-2 of html</div><div class="line">    module-3 of html</div><div class="line">    <span class="tag">&lt;<span class="name">scirpt</span> <span class="attr">src</span>=<span class="string">"module-1.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>   </div><div class="line">    <span class="tag">&lt;<span class="name">scirpt</span> <span class="attr">src</span>=<span class="string">"module-2.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>   </div><div class="line">    <span class="tag">&lt;<span class="name">scirpt</span> <span class="attr">src</span>=<span class="string">"module-3.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure></p><a id="more"></a><blockquote><p>二、立即执行函数</p></blockquote><p>1、不同模块代码里，相同的全局变量会造成代码冲突，所以我们需要把全局变量变成局部变量——立即执行函数的使用。<br><figure class="highlight delphi"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">!<span class="function"><span class="keyword">function</span><span class="params">()</span><span class="comment">&#123;</span></span></div><div class="line">    your code</div><div class="line">&#125;.<span class="title">call</span><span class="params">()</span></div></pre></td></tr></table></figure></p><p>2、代码模块隔离之后如何进行通信呢？利用<strong>闭包</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// module-1</span></div><div class="line">!<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;.call()</div><div class="line">!<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="comment">//  code of module-1</span></div><div class="line">    <span class="keyword">var</span> person = &#123;</div><div class="line">        <span class="attr">name</span>: <span class="string">'frank'</span>,</div><div class="line">        <span class="attr">age</span>: <span class="number">18</span></div><div class="line">    &#125;</div><div class="line">    <span class="built_in">window</span>.frankGrowUp = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        person.age += <span class="number">1</span>    <span class="comment">// 函数用了它以外的变量 person，所以fn和person就是闭包 ，闭包用来对数据隐藏细节，还可以进行访问控制</span></div><div class="line">        <span class="keyword">return</span> person.age</div><div class="line">    &#125;</div><div class="line">&#125;.call()</div><div class="line"></div><div class="line"><span class="comment">// module-2</span></div><div class="line">!<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="comment">// code of module-2</span></div><div class="line">    <span class="keyword">var</span> newAge = <span class="built_in">window</span>.frankGrowUp()</div><div class="line">    <span class="built_in">console</span>.log(newAge)  <span class="comment">// 19</span></div><div class="line">&#125;.call()</div></pre></td></tr></table></figure></p><ul><li>立即执行函数使得 <code>person</code> 无法被外部访问</li><li>闭包使得匿名函数可以操作 <code>person</code></li><li><code>window.frankGrowUp</code> 保存了匿名函数的地址</li><li>任何地方都可以使用<code>window.frankGrowUp</code>操作 <code>person</code> =&gt; 任何地方都可以使用 <code>window.frankGrowUp</code>操作 <code>person</code>，但是不能直接访问 <code>person</code></li></ul><blockquote><p>三、Model(模型) View(视图) Controller(控制)</p></blockquote><p><strong>html就放在view部分，js操作就放在controller部分</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--index.html--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"view-1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"view-2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"view-3"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">scirpt</span> <span class="attr">src</span>=<span class="string">"module-1.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>   </div><div class="line">    <span class="tag">&lt;<span class="name">scirpt</span> <span class="attr">src</span>=<span class="string">"module-2.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>   </div><div class="line">    <span class="tag">&lt;<span class="name">scirpt</span> <span class="attr">src</span>=<span class="string">"module-3.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// module-1.js 模块 1</span></div><div class="line">!<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> view = 找到对应的模块<span class="number">1</span>元素 </div><div class="line">    <span class="keyword">var</span> controller = &#123;</div><div class="line">        <span class="attr">view</span>: <span class="literal">null</span>,</div><div class="line">        <span class="attr">init</span>: <span class="function"><span class="keyword">function</span>(<span class="params">view</span>) </span>&#123;</div><div class="line">            <span class="keyword">this</span>.view = view <span class="comment">// 给controller.view 赋值</span></div><div class="line">            <span class="keyword">this</span>.操作<span class="number">1</span>()    <span class="comment">// 这里的 this是通过 controller 对象调用决定的（最下面）</span></div><div class="line">            <span class="keyword">this</span>.操作<span class="number">2</span>()</div><div class="line">        &#125;,</div><div class="line">        操作<span class="number">1</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,</div><div class="line">        操作<span class="number">2</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,</div><div class="line">    &#125;</div><div class="line">    controller.init(view)    <span class="comment">// 执行操作</span></div><div class="line">&#125;.call()</div></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// module-2.js 模块 2</span></div><div class="line">!<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> view = <span class="built_in">document</span>.querySelector(<span class="string">'#view-2'</span>)  </div><div class="line">    <span class="keyword">var</span> controller = &#123;</div><div class="line">        <span class="attr">view</span>: <span class="literal">null</span>,</div><div class="line">        <span class="attr">init</span>: <span class="function"><span class="keyword">function</span>(<span class="params">view</span>) </span>&#123;</div><div class="line">            <span class="keyword">this</span>.view = view </div><div class="line">            <span class="keyword">this</span>.bindEvents()           <span class="comment">// this.bindEvents.call(this)</span></div><div class="line">        &#125;,</div><div class="line">        <span class="attr">bindEvents</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="keyword">var</span> view = <span class="keyword">this</span>.view</div><div class="line">            <span class="built_in">window</span>.addEventListener(<span class="string">'scroll'</span>,(x) =&gt; &#123;</div><div class="line">                <span class="keyword">this</span>           <span class="comment">// 通过箭头函数让函数内外this不变, this相当于一个变量</span></div><div class="line">                                 <span class="comment">// 如果是f()&#123;&#125;则this是用户触发的元素,可通过bind()绑定this</span></div><div class="line">            &#125;</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">active</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="keyword">this</span>.view.classList.add(<span class="string">'xxx'</span>)</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">deactive</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="keyword">this</span>.view.classList.remove(<span class="string">'yyy'</span>)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    controller.init(view)         <span class="comment">// controller.init.call(controller, view)</span></div><div class="line">&#125;.call()</div></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// module-3.js 模块 3</span></div><div class="line">!<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> view = 找到对应的模块<span class="number">3</span>元素 </div><div class="line">    <span class="keyword">var</span> controller = &#123;</div><div class="line">        <span class="attr">view</span>: <span class="literal">null</span>,</div><div class="line">        <span class="attr">swiper</span>: <span class="literal">null</span>,</div><div class="line">        <span class="attr">swiperOptions</span>: &#123;</div><div class="line">            选项<span class="number">1</span>：xxx,</div><div class="line">            选项<span class="number">2</span>： xxx,</div><div class="line">            ……</div><div class="line">        &#125;</div><div class="line">        init: <span class="function"><span class="keyword">function</span>(<span class="params">view</span>) </span>&#123;</div><div class="line">            <span class="keyword">this</span>.view = view </div><div class="line">            <span class="keyword">this</span>.initSwiper()</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">initSwiper</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="keyword">this</span>.swiper = <span class="keyword">new</span> Swiper(</div><div class="line">                <span class="keyword">this</span>.view.querySelector(<span class="string">'选择器'</span>),</div><div class="line">                <span class="keyword">this</span>.swiperOptions</div><div class="line">            )</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    controller.init(view)    </div><div class="line">&#125;.call()</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;一、模块化&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;目的：通过对文件的命名和代码的简化，可以更加方便的辨别代码的功能与作用。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;以js代码为例，我们把admin.js，按照功能拆分成module-1.js等三个文件，形成模块。这样每个文件的代码都会小而清晰，这也就是模块化的一种体现。&lt;br&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!--index.html--&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    module-1 of html&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    module-2 of html&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    module-3 of html&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;scirpt&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;module-1.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;   &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;scirpt&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;module-2.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;   &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;scirpt&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;module-3.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="wangsiyuan233.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>窗口高度与obj的高度</title>
    <link href="wangsiyuan233.github.io/2018/05/07/47%E5%90%84%E7%A7%8D%E9%AB%98%E5%BA%A6/"/>
    <id>wangsiyuan233.github.io/2018/05/07/47各种高度/</id>
    <published>2018-05-08T02:55:28.000Z</published>
    <updated>2018-05-08T02:56:04.084Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/nVbZzPn.gif" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://i.imgur.com/nVbZzPn.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="javascript" scheme="wangsiyuan233.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>捕获/阻止捕获、冒泡/阻止冒泡</title>
    <link href="wangsiyuan233.github.io/2018/05/06/46%E5%86%92%E6%B3%A1%E4%B8%8E%E6%8D%95%E8%8E%B7/"/>
    <id>wangsiyuan233.github.io/2018/05/06/46冒泡与捕获/</id>
    <published>2018-05-06T11:31:26.000Z</published>
    <updated>2018-05-06T11:56:30.074Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><blockquote><p>一、冒泡事件</p></blockquote><p>1、虽然我们只点击了button元素，但是，button外的事件<strong>由内向外</strong>以此被触发，触发的顺序是由DOM树的下层到DOM树的最上面，故称为冒泡。<br>2、如果我们不希望事件冒泡呢？那么如何阻止事件冒泡？<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">"button"</span>).addEventListener(<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</div><div class="line">        alert(<span class="string">"button"</span>);</div><div class="line">        event.stopPropagation();    </div><div class="line">&#125;,<span class="literal">false</span>);</div></pre></td></tr></table></figure></p><p>这样，点击button后，只会弹出一个弹窗，显示button。<br>3、冒泡的终点是 window</p><blockquote><p>二、捕获事件</p></blockquote><p>1、把<code>addEventListener()</code>方法的第三个参数由前面例子的<code>false</code>修改为了<code>true</code>,也就是使用捕获方式获得<code>button</code>，<br>2、最外层的事件先被触发，最后才是我们点击的button事件被触发，这便是事件捕获；<br>3、<code>stopPropagation()</code> 和 <code>stopImmediatePropagation()</code> 都可以阻止事件冒泡和事件捕获；<br>4、<code>stopImmediatePropagation()</code> 不仅阻止捕获和冒泡，还阻止该元素的其他事件发生。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;blockquote&gt;
&lt;p&gt;一、冒泡事件&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;1、虽然我们只点击了button元素，但是，button外的事件&lt;strong&gt;由内向外&lt;/strong&gt;以此被触发，触发的顺序是由DOM树的下层到DOM树
      
    
    </summary>
    
    
      <category term="javascript" scheme="wangsiyuan233.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>EventUtil--js事件封装</title>
    <link href="wangsiyuan233.github.io/2018/05/05/45EventUtil/"/>
    <id>wangsiyuan233.github.io/2018/05/05/45EventUtil/</id>
    <published>2018-05-05T12:13:36.000Z</published>
    <updated>2018-05-05T12:21:55.975Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>跨浏览器的事件对象EventUtil</p></blockquote><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> EventUtil = &#123;</div><div class="line"></div><div class="line"><span class="comment">//事件监听</span></div><div class="line">    addHandler: <span class="function"><span class="keyword">function</span>(<span class="params">element,type,handler</span>) </span>&#123; </div><div class="line">        <span class="keyword">if</span>(element.addEventListener) &#123;</div><div class="line">            element.addEventListener(type,handler,<span class="literal">false</span>);</div><div class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(element.attachEvent) &#123;</div><div class="line">            element.attachEvent(<span class="string">"on"</span>+type,handler);</div><div class="line">        &#125;<span class="keyword">else</span> &#123;</div><div class="line">            element[<span class="string">"on"</span> +type] = handler;</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line"></div><div class="line"><span class="comment">//移除事件监听</span></div><div class="line">    removeHandler: <span class="function"><span class="keyword">function</span>(<span class="params">element,type,handler</span>)</span>&#123; </div><div class="line">        <span class="keyword">if</span>(element.removeEventListener) &#123;</div><div class="line">            element.removeEventListener(type,handler,<span class="literal">false</span>);</div><div class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(element.detachEvent) &#123;</div><div class="line">            element.detachEvent(<span class="string">"on"</span>+type,handler);</div><div class="line">        &#125;<span class="keyword">else</span> &#123;</div><div class="line">            element[<span class="string">"on"</span> +type] = <span class="literal">null</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line"></div><div class="line"><span class="comment">//获取event对象，返回event对象的引用</span></div><div class="line">    getEvent: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> event ? event : <span class="built_in">window</span>.event;</div><div class="line">    &#125;,</div><div class="line"></div><div class="line"><span class="comment">//返回事件目标。</span></div><div class="line">    getTarget: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> event.target || event.srcElement;</div><div class="line">    &#125;,</div><div class="line"></div><div class="line"><span class="comment">//取消或者阻止事件默认行为</span></div><div class="line">    preventDefault: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</div><div class="line">        <span class="keyword">if</span>(event.preventDefault) &#123;</div><div class="line">            event.preventDefault();</div><div class="line">        &#125;<span class="keyword">else</span> &#123;</div><div class="line">            event.returnValue = <span class="literal">false</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line"></div><div class="line"><span class="comment">//阻止事件流，阻止事件冒泡</span></div><div class="line">    stopPropagation: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span>(event.stopPropagation) &#123;</div><div class="line">            event.stopPropagation();</div><div class="line">        &#125;<span class="keyword">else</span> &#123;</div><div class="line">            event.cancelBubble = <span class="literal">true</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line"></div><div class="line"><span class="comment">//返回相关元素信息（仅对于mouseover和mouseout事件）</span></div><div class="line">    getRelatedTarget: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</div><div class="line">        <span class="keyword">if</span> (event.relatedTarget)&#123;</div><div class="line">            <span class="keyword">return</span> event.relatedTarget;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (event.toElement)&#123;</div><div class="line">            <span class="keyword">return</span> event.toElement;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (event.fromElement)&#123;</div><div class="line">            <span class="keyword">return</span> event.fromElement;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line"></div><div class="line"><span class="comment">//获取鼠标滚轮增量值，检测是否包含WheelDelta</span></div><div class="line">    getWheelDelta: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span>(event.wheelDelta) &#123;</div><div class="line">            <span class="keyword">return</span> event.wheelDelta;</div><div class="line">        &#125;<span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> -event.detail * <span class="number">40</span></div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line"></div><div class="line"><span class="comment">//获取键盘按键键码。</span></div><div class="line">    getCharCode: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span>(<span class="keyword">typeof</span> event.charCode == <span class="string">'number'</span>) &#123;</div><div class="line">            <span class="keyword">return</span> event.charCode;</div><div class="line">        &#125;<span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> event.keyCode;</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line"></div><div class="line"><span class="comment">//在mouseup或者mousedown的时候，event存在一个button属性，用于判断是按了鼠标左键，右键，还是中键，0鼠标主键按钮，1是中间，2是次键（右键）</span></div><div class="line">    getButton:<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</div><div class="line">        <span class="keyword">if</span>(<span class="built_in">document</span>.implementation.hasFeature(<span class="string">"MouseEvents"</span>,<span class="string">"2.0"</span>))&#123;</div><div class="line">            <span class="keyword">return</span> event.button;</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">switch</span>(event.button)&#123;</div><div class="line">                <span class="keyword">case</span> <span class="number">0</span>:</div><div class="line">                <span class="keyword">case</span> <span class="number">1</span>:</div><div class="line">                <span class="keyword">case</span> <span class="number">3</span>:</div><div class="line">                <span class="keyword">case</span> <span class="number">5</span>:</div><div class="line">                <span class="keyword">case</span> <span class="number">7</span>:</div><div class="line">                  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">                <span class="keyword">case</span> <span class="number">2</span>:</div><div class="line">                <span class="keyword">case</span> <span class="number">6</span>:</div><div class="line">                   <span class="keyword">return</span> <span class="number">2</span>;</div><div class="line">                <span class="keyword">case</span> <span class="number">4</span>:</div><div class="line">                  <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><p>上面就是我们封装的事件对象。</p><p>用法超级简单，例如click事件:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> btn1 = <span class="built_in">document</span>.getElementById(<span class="string">"myBtn1"</span>);</div><div class="line"><span class="keyword">var</span> handler = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">alert(<span class="string">"hello haorooms"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">EventUtil.addHandler(btn1, <span class="string">"click"</span>, handler);</div><div class="line"><span class="comment">//EventUtil.removeHandler(btn1, "click", handler);</span></div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;跨浏览器的事件对象EventUtil&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="wangsiyuan233.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Flex布局</title>
    <link href="wangsiyuan233.github.io/2018/04/21/44Flex%E5%B8%83%E5%B1%80/"/>
    <id>wangsiyuan233.github.io/2018/04/21/44Flex布局/</id>
    <published>2018-04-21T10:47:26.000Z</published>
    <updated>2018-04-21T11:05:39.525Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Flex出现前</p></blockquote><p>我们是这样布局的：<br>1、正常文档流<br>2、<code>float</code> + <code>clear</code> 清除浮动<br>3、<code>relative</code> + <code>absolute</code><br>4、负<code>margin</code><br><a id="more"></a></p><blockquote><p>拥有Flex时</p></blockquote><p>上面的问题<br>迎刃而解！！<br>咯咯哒</p><p><strong>–&gt; flex-content</strong><br>1、<code>flex-direction</code>: 默认是 横向<code>row</code>;<br>2、<code>flex-wrap</code>: 默认是 换行<code>wrap</code>;<br>3、<code>flex-flow</code>: 默认是 <code>row</code> + <code>wrap</code>;<br>4、<code>justify-content</code>: 主轴对齐方式；<br>    <code>space-between</code>: 空余位置在中间；<br>    <code>space-around</code>： 空余位置均匀分布；<br>    <code>flex-start</code>: 向起点靠；<br>5、<code>align-items</code>: 侧轴对齐；</p><p><strong>–&gt; flex-items</strong><br>1、<code>flex</code>: 默认是 <code>flex-grow</code> + <code>flex-shrink</code><br>2、<code>order</code>: 改变元素的顺序</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Flex出现前&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们是这样布局的：&lt;br&gt;1、正常文档流&lt;br&gt;2、&lt;code&gt;float&lt;/code&gt; + &lt;code&gt;clear&lt;/code&gt; 清除浮动&lt;br&gt;3、&lt;code&gt;relative&lt;/code&gt; + &lt;code&gt;absolute&lt;/code&gt;&lt;br&gt;4、负&lt;code&gt;margin&lt;/code&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="CSS" scheme="wangsiyuan233.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>&lt;Algorithms&gt;-1.2数据抽象</title>
    <link href="wangsiyuan233.github.io/2018/04/15/43Algorithms1-2/"/>
    <id>wangsiyuan233.github.io/2018/04/15/43Algorithms1-2/</id>
    <published>2018-04-15T13:08:59.793Z</published>
    <updated>2018-04-22T13:39:27.090Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://book.douban.com/subject/10432347/" target="_blank" rel="external">《算法 （第四版）》</a>梳理框架</p><p>不建议阅读，反正你也读不下去<br><a id="more"></a></p><blockquote><p>1.2 数据抽象</p></blockquote><p>从这一个小节开始，我们讨论一种更加抽象的表达类型<br>/<em> 2018/4/21 p63-p72 </em>/<br>在使用抽象数据时，我们的注意力在API的操作</p><p><strong>1.2.1使用抽象数据类型</strong><br>Counter的值是一个名称和非负整数，初始化0 + 当前值加一 +获取当前值<br>1.2.1.1 抽象数据类型的API<br>抽象数据类型和静态方法库有很多相同之处：<br>1、均为Java类<br>2、可以有0 或 多个参数<br>3、可以返回一个指定数据类型，也有可能不会<br>抽象数据类型和静态方法库的不同之处：<br>1、构造函数会出现若干个名称和类名相同且没有返回值的函数<br>2、实例方法不需要 static 关键字<br>3、继承方法<br>1.2.1.2 继承方法<br>任意数据类型都可以通过API获得<br>1.2.1.3 用例代码<br>API可以让我们写出用例代码而不用知道它是怎样具体实现的<br>1.2.1.4 对象<br>对象是能够承载数据类型的值的实体<br>1.2.1.5 创建对象<br>每一个数据类型的值都存在对象里<br>当我们new一个函数的时候<br>1、分配一个内存空间<br>2、初始化一个值<br>3、返回引用对象<br>1.2.1.6 调用实例方法<br>实例方法和静态方法的调用方式完全相同<br>静态方法的主要作用是实现函数<br>实例方法的主要作用是实现数据类型的操作<br>1.2.1.7 使用对象<br>声明变量，使用new触发函数，调用实例方法<br>1.2.1.8 赋值语句<br>使用引用类型的赋值语句会创建该引用类型的一个副本<br>赋值语句不会创建新的对象<br>两个变量同时指向同一个对象<br>1.2.1.9 将对象作为参数<br>将对象作为参数传给方法，一般能简化用例代码<br>1.2.1.10 将对象作为返回值<br>Java中的方法只有一个返回值，而有了对象我们就能返回多个值了<br>1.2.1.11 数组也是对象<br>Java中，非原始数据类型的值都是对象<br>当我们将数组传递给一个方法或是将一个数组变量放在赋值语句的右侧时<br>我们是在创建该数组引用的一个副本，而不是这个数组的副本<br>1.2.1.12 对象的数组<br>/<em> 2018/4/22 p72-p84 </em>/<br>当我们创建了一个数组对象，意味着我们：<br>1、用括号语法创建了一个数组构造器<br>2、运用一个标准的构造器创建了数组里的每一个对象</p><p><strong>1.2.2 抽象数据类型举例</strong><br>这一小节会介绍一些ADT，你不用知道它的原理就可以用它<br>1.2.2.1 几何对象<br>面向对象编程的一个典型例子是为几何对象设计数据类型<br>1.2.2.2 信息处理<br>为了简化用例的代码，我们为每个类型都提供了两个构造函数<br>一个接受数据，一个解析数据<br>用例还是不需要知道数据的表示方法<br>1.2.2.3 字符串<br>string值和字符数组是不同的<br>数组可以访问每个字符<br>string为操作准备了实例方法<br>1.2.2.4 再谈输入和输出<br>面向对象编程要求我们同时输入和输出</p><p>1.2.3 抽象数据类型的实现<br>第一部分 定义数据类型的值的实例变量<br>第二部分 构造函数和实例方法</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://book.douban.com/subject/10432347/&quot;&gt;《算法 （第四版）》&lt;/a&gt;梳理框架&lt;/p&gt;
&lt;p&gt;不建议阅读，反正你也读不下去&lt;br&gt;
    
    </summary>
    
    
      <category term="算法" scheme="wangsiyuan233.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>初探ES6(5)--Class的继承</title>
    <link href="wangsiyuan233.github.io/2018/04/12/42%E5%88%9D%E6%8E%A2ES6-5/"/>
    <id>wangsiyuan233.github.io/2018/04/12/42初探ES6-5/</id>
    <published>2018-04-13T01:22:09.000Z</published>
    <updated>2018-04-14T00:59:19.198Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><p><strong>1、</strong>Class 可以通过<code>extends</code>关键字实现继承，这比 ES5 的通过修改原型链实现继承，要清晰和方便很多。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ColorPoint</span> <span class="keyword">extends</span> <span class="title">Point</span> </span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>（上面代码定义了一个<code>ColorPoint</code>类，该类通过<code>extends</code>关键字，继承了<code>Point</code>类的所有属性和方法。但是由于没有部署任何代码，所以这两个类完全一样，等于复制了一个<code>Point</code>类。下面，我们在<code>ColorPoint</code>内部加上代码。）<br><a id="more"></a><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ColorPoint</span> <span class="keyword">extends</span> <span class="title">Point</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(x, y, color) &#123;</div><div class="line">    <span class="keyword">super</span>(x, y); <span class="comment">// 调用父类的constructor(x, y)</span></div><div class="line">    <span class="keyword">this</span>.color = color;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  toString() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.color + <span class="string">' '</span> + <span class="keyword">super</span>.toString(); <span class="comment">// 调用父类的toString()</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>（上面代码中，<code>constructor</code>方法和<code>toString</code>方法之中，都出现了<code>super</code>关键字，它在这里表示<strong>父类</strong>的构造函数，用来<strong>新建父类的<code>this</code>对象</strong>。）</p><p><strong>子类必须在<code>constructor</code>方法中调用<code>super</code>方法，否则新建实例时会报错。</strong>这是因为子类没有自己的<code>this</code>对象，而是继承父类的<code>this</code>对象，然后对其进行加工。如果不调用super方法，子类就得不到<code>this</code>对象。</p><p>ES5 的继承，实质是<strong>先创造子类</strong>的实例对象<code>this</code>，然后再将父类的方法添加到<code>this</code>上面（<code>Parent.apply(this)</code>）。<br>ES6 的继承机制完全不同，实质是<strong>先创造父类</strong>的实例对象<code>this</code>（所以必须先调用<code>super</code>方法），然后再用子类的构造函数修改<code>this</code>。</p><p><strong>2、</strong>在子类的构造函数中，只有调用<code>super</code>之后，才可以使用<code>this</code>关键字，否则会报错。这是因为子类实例的构建，是基于对父类实例加工，只有<code>super</code>方法才能返回父类实例。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(x, y) &#123;</div><div class="line">    <span class="keyword">this</span>.x = x;</div><div class="line">    <span class="keyword">this</span>.y = y;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ColorPoint</span> <span class="keyword">extends</span> <span class="title">Point</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(x, y, color) &#123;</div><div class="line">    <span class="keyword">this</span>.color = color; <span class="comment">// ReferenceError</span></div><div class="line">    <span class="keyword">super</span>(x, y);</div><div class="line">    <span class="keyword">this</span>.color = color; <span class="comment">// 正确</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>（上面代码中，子类的<code>constructor</code>方法没有调用<code>super</code>之前，就使用<code>this</code>关键字，结果报错，而放在<code>super</code>方法之后就是正确的。）</p><p><strong>3、</strong>可以使用<code>Object.getPrototypeOf</code>方法判断，一个类是否继承了另一个类。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Object</span>.getPrototypeOf(ColorPoint) === Point  <span class="comment">// true</span></div></pre></td></tr></table></figure></p><h2 id="二、extends-的继承目标"><a href="#二、extends-的继承目标" class="headerlink" title="二、extends 的继承目标"></a>二、<code>extends</code> 的继承目标</h2><p><code>extends</code>后面可以跟多种类型的值。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//第一种，子类继承Object类。</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">extends</span> <span class="title">Object</span> </span>&#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line">A.__proto__ === <span class="built_in">Object</span> <span class="comment">// true</span></div><div class="line">A.prototype.__proto__ === <span class="built_in">Object</span>.prototype <span class="comment">// true</span></div></pre></td></tr></table></figure></p><p>（第1种情况下，A其实就是构造函数<code>Object</code>的复制，A的实例就是<code>Object</code>的实例。）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//第二种，不存在任何继承。</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line">A.__proto__ === <span class="built_in">Function</span>.prototype <span class="comment">// true</span></div><div class="line">A.prototype.__proto__ === <span class="built_in">Object</span>.prototype <span class="comment">// true</span></div></pre></td></tr></table></figure><p>（第2种情况下，A作为一个基类（即不存在任何继承），就是一个普通函数，所以直接继承<code>Function.prototype</code>。但是，A调用后返回一个空对象（即<code>Object</code>实例），所以<code>A.prototype.__proto__</code>指向构造函数（Object）的<code>prototype</code>属性。）<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//第三种，子类继承null。</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">extends</span> <span class="title">null</span> </span>&#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line">A.__proto__ === <span class="built_in">Function</span>.prototype <span class="comment">// true</span></div><div class="line">A.prototype.__proto__ === <span class="literal">undefined</span> <span class="comment">// true</span></div></pre></td></tr></table></figure></p><p>（第3情况与第2种情况非常像。A也是一个普通函数，所以直接继承<code>Function.prototype</code>。但是，A调用后返回的对象不继承任何方法，所以它的<code>__proto__</code>指向<code>Function.prototype</code>，即实质上执行了下面的代码。）</p><h2 id="三、super"><a href="#三、super" class="headerlink" title="三、super"></a>三、<code>super</code></h2><p><code>super</code>关键字，既可以当作函数使用，也可以当作对象使用。在这两种情况下，它的用法完全不同。<br><strong>1、当作函数使用</strong><br><code>super</code>作为函数调用时，代表父类的构造函数。ES6 要求，子类的构造函数必须执行一次<code>super</code>函数。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>() &#123;</div><div class="line">    <span class="keyword">super</span>();</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>（上面代码中，子类B的构造函数之中的<code>super()</code>，代表调用父类的构造函数。这是必须的，否则 JavaScript 引擎会报错。）</p><p>注意，<code>super</code>虽然代表了父类A的构造函数，但是返回的是子类B的实例，<strong>即<code>super</code>内部的this指的是B</strong>，因此<code>super()</code>在这里相当于<code>A.prototype.constructor.call(this)</code>。</p><p>作为函数时，super()只能用在<strong>子类的构造函数</strong>之中，用在其他地方就会报错。</p><p><strong>2、当作对象使用</strong></p><p><strong>在普通方法中，指向父类的原型对象；在静态方法中，指向父类。</strong></p><p>2.1普通方法，指向父类的原型对象<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</div><div class="line">  p() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="number">2</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>() &#123;</div><div class="line">    <span class="keyword">super</span>();</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">super</span>.p()); <span class="comment">// 2</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> b = <span class="keyword">new</span> B();</div></pre></td></tr></table></figure></p><p>（上面代码中，子类B当中的<code>super.p()</code>，就是将<code>super</code>当作一个对象使用。这时，<code>super</code>在普通方法之中，指向<code>A.prototype</code>，所以<code>super.p()</code>就相当于<code>A.prototype.p()</code>。）</p><p>ES6 规定，在子类普通方法中通过<code>super</code>调用父类的方法时，方法内部的<code>this</code><strong>指向当前的子类实例</strong>。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>() &#123;</div><div class="line">    <span class="keyword">this</span>.x = <span class="number">1</span>;</div><div class="line">  &#125;</div><div class="line">  print() &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.x);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>() &#123;</div><div class="line">    <span class="keyword">super</span>();</div><div class="line">    <span class="keyword">this</span>.x = <span class="number">2</span>;</div><div class="line">  &#125;</div><div class="line">  m() &#123;</div><div class="line">    <span class="keyword">super</span>.print();</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> b = <span class="keyword">new</span> B();</div><div class="line">b.m() <span class="comment">// 2</span></div></pre></td></tr></table></figure></p><p>（上面代码中，<code>super.print()</code>虽然调用的是<code>A.prototype.print()</code>，但是<code>A.prototype.print()</code>内部的<code>this</code>指向子类B的实例，导致输出的是2，而不是1。也就是说，实际上执行的是<code>super.print.call(this)</code>。）</p><p>由于<code>this</code>指向子类实例，所以如果通过<code>super</code>对某个属性赋值，这时<code>super</code>就是<code>this</code>，赋值的属性会变成子类实例的属性。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>() &#123;</div><div class="line">    <span class="keyword">this</span>.x = <span class="number">1</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>() &#123;</div><div class="line">    <span class="keyword">super</span>();</div><div class="line">    <span class="keyword">this</span>.x = <span class="number">2</span>;</div><div class="line">    <span class="keyword">super</span>.x = <span class="number">3</span>;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">super</span>.x); <span class="comment">// undefined</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.x); <span class="comment">// 3</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> b = <span class="keyword">new</span> B();</div></pre></td></tr></table></figure></p><p>（上面代码中，<code>super.x</code>赋值为3，这时等同于对<code>this.x</code>赋值为3。而当读取<code>super.x</code>的时候，读的是<code>A.prototype.x</code>，所以返回<code>undefined</code>。）</p><p>2.2静态方法中，指向父类<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span> </span>&#123;</div><div class="line">  <span class="keyword">static</span> myMethod(msg) &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'static'</span>, msg);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  myMethod(msg) &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'instance'</span>, msg);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Parent</span> </span>&#123;</div><div class="line">  <span class="keyword">static</span> myMethod(msg) &#123;</div><div class="line">    <span class="keyword">super</span>.myMethod(msg);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  myMethod(msg) &#123;</div><div class="line">    <span class="keyword">super</span>.myMethod(msg);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Child.myMethod(<span class="number">1</span>); <span class="comment">// static 1</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> child = <span class="keyword">new</span> Child();</div><div class="line">child.myMethod(<span class="number">2</span>); <span class="comment">// instance 2</span></div></pre></td></tr></table></figure></p><p>（上面代码中，<code>super</code>在静态方法之中指向父类，在普通方法之中指向父类的原型对象。）</p><p>在子类的静态方法中通过<code>super</code>调用父类的方法时，方法内部的<code>this</code>指向当前的子类，而不是子类的实例。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>() &#123;</div><div class="line">    <span class="keyword">this</span>.x = <span class="number">1</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">static</span> print() &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.x);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>() &#123;</div><div class="line">    <span class="keyword">super</span>();</div><div class="line">    <span class="keyword">this</span>.x = <span class="number">2</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">static</span> m() &#123;</div><div class="line">    <span class="keyword">super</span>.print();</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">B.x = <span class="number">3</span>;</div><div class="line">B.m() <span class="comment">// 3</span></div></pre></td></tr></table></figure></p><p>（上面代码中，静态方法<code>B.m</code>里面，<code>super.print</code>指向父类的静态方法。这个方法里面的<code>this</code>指向的是B，而不是B的实例）</p><h2 id="四、类的-prototype属性和-proto-属性"><a href="#四、类的-prototype属性和-proto-属性" class="headerlink" title="四、类的 prototype属性和__proto__属性"></a>四、类的 <code>prototype</code>属性和<code>__proto__</code>属性</h2><p>ES5 中，每一个对象都有<code>__proto__</code>属性，指向对应的构造函数的<code>prototype</code>属性。<br>Class 作为构造函数的语法糖，同时有<code>prototype</code>属性和<code>__proto__</code>属性，因此同时存在两条继承链。<br><strong>1、</strong>子类的<code>__proto__</code>属性，表示构造函数的继承，总是指向父类。<br><strong>2、</strong>子类<code>prototype</code>属性的<code>__proto__</code>属性，<strong>表示方法的继承</strong>，总是指向父类的<code>prototype</code>属性。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line">B.__proto__ === A <span class="comment">// true</span></div><div class="line">B.prototype.__proto__ === A.prototype <span class="comment">// true</span></div></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Object</span>.setPrototypeOf(B.prototype, A.prototype);</div><div class="line"><span class="comment">// 等同于</span></div><div class="line">B.prototype.__proto__ = A.prototype;</div><div class="line"></div><div class="line"><span class="built_in">Object</span>.setPrototypeOf(B, A);</div><div class="line"><span class="comment">// 等同于</span></div><div class="line">B.__proto__ = A;</div></pre></td></tr></table></figure><p>上面这两条继承链，可以这样理解：<br><strong>作为一个对象，子类（B）的原型（<code>__proto__</code>属性）是父类（A）；</strong><br><strong>作为一个构造函数，子类（B）的原型对象（<code>prototype</code>属性）是父类的原型对象（<code>prototype</code>属性）的实例。</strong></p><h2 id="五、实例的-proto-属性"><a href="#五、实例的-proto-属性" class="headerlink" title="五、实例的 __proto__属性"></a>五、实例的 <code>__proto__</code>属性</h2><p>子类实例的<code>__proto__</code>属性的<code>__proto__</code>属性，指向父类实例的<code>__proto__</code>属性。也就是说，子类的原型的原型，是父类的原型。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Point(<span class="number">2</span>, <span class="number">3</span>);</div><div class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> ColorPoint(<span class="number">2</span>, <span class="number">3</span>, <span class="string">'red'</span>);</div><div class="line"></div><div class="line">p2.__proto__ === p1.__proto__ <span class="comment">// false</span></div><div class="line">p2.__proto__.__proto__ === p1.__proto__ <span class="comment">// true</span></div></pre></td></tr></table></figure></p><p>（上面代码中，<code>ColorPoint</code>继承了<code>Point</code>，导致前者原型的原型是后者的原型。）</p><h2 id="六、原生构造函数的继承"><a href="#六、原生构造函数的继承" class="headerlink" title="六、原生构造函数的继承"></a>六、原生构造函数的继承</h2><p>ES5 中原生构造函数是无法继承的。<br><code>Boolean()</code>、<code>Number()</code>、<code>String()</code>、<code>Array()</code>、<code>Date()</code>、<code>Function()</code>、<code>RegExp()</code>、<code>Error()</code>、<code>Object()</code><br>ES6 允许继承原生构造函数定义子类，因为 ES6 是先新建父类的实例对象<code>this</code>，然后再用子类的构造函数修饰<code>this</code>，使得父类的所有行为都可以继承。下面是一个继承<code>Array</code>的例子。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyArray</span> <span class="keyword">extends</span> <span class="title">Array</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(...args) &#123;</div><div class="line">    <span class="keyword">super</span>(...args);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> MyArray();</div><div class="line">arr[<span class="number">0</span>] = <span class="number">12</span>;</div><div class="line">arr.length <span class="comment">// 1</span></div><div class="line"></div><div class="line">arr.length = <span class="number">0</span>;</div><div class="line">arr[<span class="number">0</span>] <span class="comment">// undefined</span></div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、简介&quot;&gt;&lt;a href=&quot;#一、简介&quot; class=&quot;headerlink&quot; title=&quot;一、简介&quot;&gt;&lt;/a&gt;一、简介&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;1、&lt;/strong&gt;Class 可以通过&lt;code&gt;extends&lt;/code&gt;关键字实现继承，这比 ES5 的通过修改原型链实现继承，要清晰和方便很多。&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Point&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ColorPoint&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Point&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;（上面代码定义了一个&lt;code&gt;ColorPoint&lt;/code&gt;类，该类通过&lt;code&gt;extends&lt;/code&gt;关键字，继承了&lt;code&gt;Point&lt;/code&gt;类的所有属性和方法。但是由于没有部署任何代码，所以这两个类完全一样，等于复制了一个&lt;code&gt;Point&lt;/code&gt;类。下面，我们在&lt;code&gt;ColorPoint&lt;/code&gt;内部加上代码。）&lt;br&gt;
    
    </summary>
    
    
      <category term="ES6" scheme="wangsiyuan233.github.io/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>初探ES6(4)--Class的基本语法</title>
    <link href="wangsiyuan233.github.io/2018/04/09/41%E5%88%9D%E6%8E%A2ES6-4/"/>
    <id>wangsiyuan233.github.io/2018/04/09/41初探ES6-4/</id>
    <published>2018-04-10T01:22:09.000Z</published>
    <updated>2018-04-14T00:59:09.540Z</updated>
    
    <content type="html"><![CDATA[<p>类和模块的内部，默认就是<strong>严格模式</strong>，所以不需要使用<code>use strict</code>指定运行模式。只要你的代码写在类或模块之中，就只有严格模式可用。<br>考虑到未来所有的代码，其实都是运行在模块之中，所以 ES6 实际上把整个语言升级到了严格模式。</p><h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><p>JavaScript 中：<strong>生成一个对象的传统方法就是new一个函数</strong><br><a id="more"></a><br><strong>1、</strong>ES6 的类，完全可以看作<strong>构造函数</strong>的另一种写法。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">typeof</span> Point <span class="comment">// "function"</span></div><div class="line">Point === Point.prototype.constructor <span class="comment">// true</span></div></pre></td></tr></table></figure></p><p>类的数据类型就是函数，类本身就指向构造函数。</p><p>注意，定义“类”的方法的时候，前面不需要加上<code>function</code>这个关键字，直接把函数定义放进去了就可以了。另外，方法之间不需要逗号分隔，加了会报错。</p><p><strong>2、</strong>事实上，类的所有方法都定义在类的<code>prototype</code>属性上面。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>() &#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  toString() &#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  toValue() &#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 等同于 等同于 等同于</span></div><div class="line"></div><div class="line">Point.prototype = &#123;</div><div class="line">  <span class="keyword">constructor</span>() &#123;&#125;,</div><div class="line">  toString() &#123;&#125;,</div><div class="line">  toValue() &#123;&#125;,</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p><h2 id="二、constructor方法"><a href="#二、constructor方法" class="headerlink" title="二、constructor方法"></a>二、constructor方法</h2><p><strong>1、</strong>constructor方法是类的默认方法，通过new命令生成对象实例时，自动调用该方法。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 等同于 等同于 等同于</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>() &#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><strong>2、</strong>constructor方法默认返回实例对象（即<code>this</code>），完全可以指定返回另外一个对象。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.create(<span class="literal">null</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">new</span> Foo() <span class="keyword">instanceof</span> Foo<span class="comment">// false</span></div></pre></td></tr></table></figure></p><p>（上面代码中，constructor函数返回一个全新的对象，结果导致实例对象不是Foo类的实例。）</p><p><strong>3、</strong>类必须使用<code>new</code>调用，否则会报错。这是它跟普通构造函数的一个主要区别，后者不用<code>new</code>也可以执行。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.create(<span class="literal">null</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Foo()</div><div class="line"><span class="comment">// TypeError: Class constructor Foo cannot be invoked without 'new'</span></div></pre></td></tr></table></figure></p><h2 id="三、类的实例对象"><a href="#三、类的实例对象" class="headerlink" title="三、类的实例对象"></a>三、类的实例对象</h2><p><strong>1、</strong>与 ES5 一样，实例的属性除非显式定义在其本身（即定义在<code>this</code>对象上），否则都是定义在原型上（即定义在<code>class</code>上）。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//定义类</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="keyword">constructor</span>(x, y) &#123;</div><div class="line">    <span class="keyword">this</span>.x = x;</div><div class="line">    <span class="keyword">this</span>.y = y;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  toString() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">'('</span> + <span class="keyword">this</span>.x + <span class="string">', '</span> + <span class="keyword">this</span>.y + <span class="string">')'</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> point = <span class="keyword">new</span> Point(<span class="number">2</span>, <span class="number">3</span>);</div><div class="line"></div><div class="line">point.toString() <span class="comment">// (2, 3)</span></div><div class="line"></div><div class="line">point.hasOwnProperty(<span class="string">'x'</span>) <span class="comment">// true</span></div><div class="line">point.hasOwnProperty(<span class="string">'y'</span>) <span class="comment">// true</span></div><div class="line">point.hasOwnProperty(<span class="string">'toString'</span>) <span class="comment">// false</span></div><div class="line">point.__proto__.hasOwnProperty(<span class="string">'toString'</span>) <span class="comment">// true</span></div></pre></td></tr></table></figure></p><p>（上面代码中，<code>x</code>和<code>y</code>都是实例对象<code>point</code>自身的属性（因为定义在<code>this</code>变量上），所以<code>hasOwnProperty</code>方法返回<code>true</code>，而<code>toString</code>是原型对象的属性（因为定义在<code>Point</code>类上），所以<code>hasOwnProperty</code>方法返回<code>false</code>。这些都与 ES5 的行为保持一致。）<br><strong>2、类的所有实例共享一个原型对象。</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Point(<span class="number">2</span>,<span class="number">3</span>);</div><div class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> Point(<span class="number">3</span>,<span class="number">2</span>);</div><div class="line"></div><div class="line">p1.__proto__ === p2.__proto__  <span class="comment">//true</span></div></pre></td></tr></table></figure></p><p>（<code>p1</code>和<code>p2</code>都是<code>Point</code>的实例，它们的原型都是<code>Point.prototype</code>，所以<code>__proto__</code>属性是相等的。）</p><p>这也意味着，可以通过实例的<code>__proto__</code>属性为“类”添加方法。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Point(<span class="number">2</span>,<span class="number">3</span>);</div><div class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> Point(<span class="number">3</span>,<span class="number">2</span>);</div><div class="line"></div><div class="line">p1.__proto__.printName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="string">'Oops'</span> &#125;;</div><div class="line"></div><div class="line">p1.printName() <span class="comment">// "Oops"</span></div><div class="line">p2.printName() <span class="comment">// "Oops"</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> p3 = <span class="keyword">new</span> Point(<span class="number">4</span>,<span class="number">2</span>);</div><div class="line">p3.printName() <span class="comment">// "Oops"</span></div></pre></td></tr></table></figure></p><p>（上面代码在<code>p1</code>的原型上添加了一个<code>printName</code>方法，由于<code>p1</code>的原型就是<code>p2</code>的原型，因此<code>p2</code>也可以调用这个方法。而且，此后新建的实例<code>p3</code>也可以调用这个方法。这意味着，使用实例的<code>__proto__</code>属性改写原型，必须相当谨慎，不推荐使用，因为这会改变“类”的原始定义，影响到所有实例。）</p><h2 id="四、this-的指向"><a href="#四、this-的指向" class="headerlink" title="四、this 的指向"></a>四、this 的指向</h2><p><strong>类的方法内部如果含有<code>this</code>，它默认指向类的实例。</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Logger</span> </span>&#123;</div><div class="line">  printName(name = <span class="string">'there'</span>) &#123;</div><div class="line">    <span class="keyword">this</span>.print(<span class="string">`Hello <span class="subst">$&#123;name&#125;</span>`</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  print(text) &#123;</div><div class="line">    <span class="built_in">console</span>.log(text);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> logger = <span class="keyword">new</span> Logger();</div><div class="line"><span class="keyword">const</span> &#123; printName &#125; = logger;</div><div class="line">printName(); <span class="comment">// TypeError: Cannot read property 'print' of undefined</span></div></pre></td></tr></table></figure></p><p>（为啥会报错呢？ 因为<code>printName</code>方法中的<code>this</code>，默认指向<code>Logger</code>类的实例。但是，如果将这个方法提取出来单独使用，<code>this</code>会指向该方法运行时所在的环境，因为找不到<code>print</code>方法而导致报错。）<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 解决方法一：用bind绑定</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Logger</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>() &#123;</div><div class="line">    <span class="keyword">this</span>.printName = <span class="keyword">this</span>.printName.bind(<span class="keyword">this</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// ...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 解决方法二：用箭头函数</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Logger</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>() &#123;</div><div class="line">    <span class="keyword">this</span>.printName = <span class="function">(<span class="params">name = <span class="string">'there'</span></span>) =&gt;</span> &#123;</div><div class="line">      <span class="keyword">this</span>.print(<span class="string">`Hello <span class="subst">$&#123;name&#125;</span>`</span>);</div><div class="line">    &#125;;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// ...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;类和模块的内部，默认就是&lt;strong&gt;严格模式&lt;/strong&gt;，所以不需要使用&lt;code&gt;use strict&lt;/code&gt;指定运行模式。只要你的代码写在类或模块之中，就只有严格模式可用。&lt;br&gt;考虑到未来所有的代码，其实都是运行在模块之中，所以 ES6 实际上把整个语言升级到了严格模式。&lt;/p&gt;
&lt;h2 id=&quot;一、简介&quot;&gt;&lt;a href=&quot;#一、简介&quot; class=&quot;headerlink&quot; title=&quot;一、简介&quot;&gt;&lt;/a&gt;一、简介&lt;/h2&gt;&lt;p&gt;JavaScript 中：&lt;strong&gt;生成一个对象的传统方法就是new一个函数&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="ES6" scheme="wangsiyuan233.github.io/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>初探ES6(3)--箭头函数</title>
    <link href="wangsiyuan233.github.io/2018/04/06/40%E5%88%9D%E6%8E%A2ES6-3/"/>
    <id>wangsiyuan233.github.io/2018/04/06/40初探ES6-3/</id>
    <published>2018-04-07T01:22:09.000Z</published>
    <updated>2018-04-14T00:58:50.547Z</updated>
    
    <content type="html"><![CDATA[<p>这可能是我第三次尝试写箭头函数了吧哈哈<br>(<em>^▽^</em>)  特写此文预祝比特币大跌  ٩(๑&gt;◡&lt;๑)۶<br><a id="more"></a></p><blockquote><p>用处一：简化回调函数</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 正常函数写法</span></div><div class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].map(<span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> x * x;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 箭头函数写法</span></div><div class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].map(<span class="function"><span class="params">x</span> =&gt;</span> x * x);</div><div class="line"></div><div class="line"><span class="comment">// 正常函数写法</span></div><div class="line"><span class="keyword">var</span> result = values.sort(<span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> a - b;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 箭头函数写法</span></div><div class="line"><span class="keyword">var</span> result = values.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b);</div></pre></td></tr></table></figure><blockquote><p>用处二：简化this的指向</p></blockquote><p>箭头函数有几个使用注意点。</p><p>（1）函数体内的<code>this</code>对象，就是<strong>【定-义-时】</strong>所在的对象，而不是<strong>【使-用-时】</strong>所在的对象。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Timer</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.s1 = <span class="number">0</span>;</div><div class="line">  <span class="keyword">this</span>.s2 = <span class="number">0</span>;</div><div class="line">  <span class="comment">// 箭头函数</span></div><div class="line">  setInterval(<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">this</span>.s1++, <span class="number">1000</span>);</div><div class="line">  <span class="comment">// 普通函数</span></div><div class="line">  setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.s2++;</div><div class="line">  &#125;, <span class="number">1000</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> timer = <span class="keyword">new</span> Timer();</div><div class="line"></div><div class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'s1: '</span>, timer.s1), <span class="number">3100</span>);</div><div class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'s2: '</span>, timer.s2), <span class="number">3100</span>);</div><div class="line"><span class="comment">// s1: 3</span></div><div class="line"><span class="comment">// s2: 0</span></div></pre></td></tr></table></figure></p><p>上面代码中，<code>Timer</code>函数内部设置了两个定时器，分别使用了箭头函数和普通函数。前者的<code>this</code>绑定定义时所在的作用域（即<code>Timer</code>函数），后者的<code>this</code>指向运行时所在的作用域（即全局对象）。所以，3100 毫秒之后，<code>timer.s1</code>被更新了 3 次，而<code>timer.s2</code>一次都没更新。</p><p>（2）箭头函数不可以当作构造函数，也就是说，不可以使用<code>new</code>命令，否则会抛出一个错误。<br><code>this</code>指向的固定化，并不是因为箭头函数内部有绑定<code>this</code>的机制，<strong>实际原因是箭头函数根本没有自己的<code>this</code></strong>，导致内部的<code>this</code>就是外层代码块的<code>this</code>。正是因为它没有<code>this</code>，所以也就不能用作构造函数。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">      <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'id:'</span>, <span class="keyword">this</span>.id);</div><div class="line">      &#125;;</div><div class="line">    &#125;;</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> f = foo.call(&#123;<span class="attr">id</span>: <span class="number">1</span>&#125;);</div><div class="line"></div><div class="line"><span class="keyword">var</span> t1 = f.call(&#123;<span class="attr">id</span>: <span class="number">2</span>&#125;)()(); <span class="comment">// id: 1</span></div><div class="line"><span class="keyword">var</span> t2 = f().call(&#123;<span class="attr">id</span>: <span class="number">3</span>&#125;)(); <span class="comment">// id: 1</span></div><div class="line"><span class="keyword">var</span> t3 = f()().call(&#123;<span class="attr">id</span>: <span class="number">4</span>&#125;); <span class="comment">// id: 1</span></div></pre></td></tr></table></figure></p><p>上面代码之中，只有一个<code>this</code>，就是函数<code>foo</code>的<code>this</code>，所以t1、t2、t3都输出同样的结果。因为所有的内层函数都是箭头函数，都没有自己的<code>this</code>，它们的this其实都是最外层<code>foo</code>函数的<code>this</code>。</p><p>（3）指向外层函数的对应的三个变量：<code>arguments</code>、<code>super</code>、<code>new.target</code>在箭头函数之中也是不存在的。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'args:'</span>, <span class="built_in">arguments</span>);</div><div class="line">  &#125;, <span class="number">100</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">foo(<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>)</div><div class="line"><span class="comment">// args: [2, 4, 6, 8]</span></div></pre></td></tr></table></figure></p><p>上面代码中，箭头函数内部的变量arguments，其实是函数foo的arguments变量。</p><p>（4）不可以使用<code>yield</code>命令，因此箭头函数不能用作 <code>Generator</code>函数。<br>（5）箭头函数没有自己的this，所以当然也就不能用<code>call()</code>、<code>apply()</code>、<code>bind()</code>这些方法去改变this的指向。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> [</div><div class="line">    <span class="function">(<span class="params">(</span>) =&gt;</span> <span class="keyword">this</span>.x).bind(&#123; <span class="attr">x</span>: <span class="string">'inner'</span> &#125;)()</div><div class="line">  ];</div><div class="line">&#125;).call(&#123; <span class="attr">x</span>: <span class="string">'outer'</span> &#125;);</div><div class="line"><span class="comment">// ['outer']</span></div></pre></td></tr></table></figure></p><p>ES6的箭头函数极大的解决了ES5中this‘指向不明’的错误 （面试当然不考ES6的this啦）</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这可能是我第三次尝试写箭头函数了吧哈哈&lt;br&gt;(&lt;em&gt;^▽^&lt;/em&gt;)  特写此文预祝比特币大跌  ٩(๑&amp;gt;◡&amp;lt;๑)۶&lt;br&gt;
    
    </summary>
    
    
      <category term="ES6" scheme="wangsiyuan233.github.io/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>初探ES6(2)--变量的解构赋值</title>
    <link href="wangsiyuan233.github.io/2018/04/04/39%E5%88%9D%E6%8E%A2ES6-2/"/>
    <id>wangsiyuan233.github.io/2018/04/04/39初探ES6-2/</id>
    <published>2018-04-05T01:22:09.000Z</published>
    <updated>2018-04-14T00:58:40.240Z</updated>
    
    <content type="html"><![CDATA[<p><strong>从数组和对象中提取值，对变量进行赋值，这被称为解构。</strong></p><h2 id="一、数组的解构赋值"><a href="#一、数组的解构赋值" class="headerlink" title="一、数组的解构赋值"></a>一、数组的解构赋值</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//以前ES5</span></div><div class="line"><span class="keyword">let</span> a = <span class="number">1</span>;</div><div class="line"><span class="keyword">let</span> b = <span class="number">2</span>;</div><div class="line"><span class="keyword">let</span> c = <span class="number">3</span>;</div><div class="line"></div><div class="line"><span class="comment">//现在ES6</span></div><div class="line"><span class="keyword">let</span> [a, b, c] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</div><div class="line"></div><div class="line"><span class="keyword">let</span> [foo, [[bar], baz]] = [<span class="number">1</span>, [[<span class="number">2</span>], <span class="number">3</span>]];</div><div class="line">foo <span class="comment">// 1</span></div><div class="line">bar <span class="comment">// 2</span></div><div class="line">baz <span class="comment">// 3</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> [ , , third] = [<span class="string">"foo"</span>, <span class="string">"bar"</span>, <span class="string">"baz"</span>];</div><div class="line">third <span class="comment">// "baz"</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> [x, , y] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</div><div class="line">x <span class="comment">// 1</span></div><div class="line">y <span class="comment">// 3</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> [head, ...tail] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</div><div class="line">head <span class="comment">// 1</span></div><div class="line">tail <span class="comment">// [2, 3, 4]</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> [x, y, ...z] = [<span class="string">'a'</span>];</div><div class="line">x <span class="comment">// "a"</span></div><div class="line">y <span class="comment">// undefined 解构不成功，变量的值就等于undefined。</span></div><div class="line">z <span class="comment">// []</span></div><div class="line"></div><div class="line"><span class="comment">//下面两个例子属于不完全结构，也可以成功</span></div><div class="line"><span class="keyword">let</span> [x, y] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</div><div class="line">x <span class="comment">// 1</span></div><div class="line">y <span class="comment">// 2</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> [a, [b], d] = [<span class="number">1</span>, [<span class="number">2</span>, <span class="number">3</span>], <span class="number">4</span>];</div><div class="line">a <span class="comment">// 1</span></div><div class="line">b <span class="comment">// 2 是个谜</span></div><div class="line">d <span class="comment">// 4</span></div></pre></td></tr></table></figure><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 下面的语句都会报错，因为等号右边的值，要么转为对象以后不具备 Iterator 接口（前五个表达式），要么本身就不具备 Iterator 接口（最后一个表达式）。</span></div><div class="line"><span class="keyword">let</span> [foo] = <span class="number">1</span>;</div><div class="line"><span class="keyword">let</span> [foo] = <span class="literal">false</span>;</div><div class="line"><span class="keyword">let</span> [foo] = <span class="literal">NaN</span>;</div><div class="line"><span class="keyword">let</span> [foo] = <span class="literal">undefined</span>;</div><div class="line"><span class="keyword">let</span> [foo] = <span class="literal">null</span>;</div><div class="line"><span class="keyword">let</span> [foo] = &#123;&#125;;</div><div class="line"><span class="comment">//定眼一瞧这不是基本类型吗哈哈</span></div></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//默认值</span></div><div class="line"><span class="keyword">let</span> [foo = <span class="literal">true</span>] = [];</div><div class="line">foo <span class="comment">// true</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> [x, y = <span class="string">'b'</span>] = [<span class="string">'a'</span>]; <span class="comment">// x='a', y='b'</span></div><div class="line"><span class="keyword">let</span> [x, y = <span class="string">'b'</span>] = [<span class="string">'a'</span>, <span class="literal">undefined</span>]; <span class="comment">// x='a', y='b'</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> [x = <span class="number">1</span>, y = x] = [];     <span class="comment">// x=1; y=1</span></div><div class="line"><span class="keyword">let</span> [x = <span class="number">1</span>, y = x] = [<span class="number">2</span>];    <span class="comment">// x=2; y=2</span></div><div class="line"><span class="keyword">let</span> [x = <span class="number">1</span>, y = x] = [<span class="number">1</span>, <span class="number">2</span>]; <span class="comment">// x=1; y=2</span></div><div class="line"><span class="keyword">let</span> [x = y, y = <span class="number">1</span>] = [];     <span class="comment">// ReferenceError: y is not defined x用y做默认值时，y还没有声明</span></div></pre></td></tr></table></figure><h2 id="二、对象的解构赋值"><a href="#二、对象的解构赋值" class="headerlink" title="二、对象的解构赋值"></a>二、对象的解构赋值</h2><p><strong>对象</strong>的解构赋值的内部机制，是先找到同名属性，然后再赋给对应的变量。真正被赋值的是后者，而不是前者。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//下面代码中，foo是匹配的模式，baz才是变量。真正被赋值的是变量baz，而不是模式foo。</span></div><div class="line"><span class="keyword">let</span> &#123; <span class="attr">foo</span>: baz &#125; = &#123; <span class="attr">foo</span>: <span class="string">"aaa"</span>, <span class="attr">bar</span>: <span class="string">"bbb"</span> &#125;;</div><div class="line">baz <span class="comment">// "aaa"</span></div><div class="line">foo <span class="comment">// error: foo is not defined</span></div></pre></td></tr></table></figure></p><h2 id="三、字符串的解构赋值"><a href="#三、字符串的解构赋值" class="headerlink" title="三、字符串的解构赋值"></a>三、字符串的解构赋值</h2><p>解构赋值的规则是，只要等号右边的值<strong>不是对象或数组</strong>，就先将其转为对象。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> [a, b, c, d, e] = <span class="string">'hello'</span>;</div><div class="line">a <span class="comment">// "h"</span></div><div class="line">b <span class="comment">// "e"</span></div><div class="line">c <span class="comment">// "l"</span></div><div class="line">d <span class="comment">// "l"</span></div><div class="line">e <span class="comment">// "o"</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> &#123;<span class="attr">length</span> : len&#125; = <span class="string">'hello'</span>;</div><div class="line">len <span class="comment">// 5</span></div></pre></td></tr></table></figure></p><h2 id="四、数值和布尔值的解构赋值"><a href="#四、数值和布尔值的解构赋值" class="headerlink" title="四、数值和布尔值的解构赋值"></a>四、数值和布尔值的解构赋值</h2><p>解构赋值的规则是，只要等号右边的值<strong>不是对象或数组</strong>，就先将其转为对象。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> &#123;<span class="attr">toString</span>: s&#125; = <span class="number">123</span>;</div><div class="line">s === <span class="built_in">Number</span>.prototype.toString <span class="comment">// true</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> &#123;<span class="attr">toString</span>: s&#125; = <span class="literal">true</span>;</div><div class="line">s === <span class="built_in">Boolean</span>.prototype.toString <span class="comment">// true</span></div></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//由于undefined和null无法转为对象，所以对它们进行解构赋值，都会报错。</span></div><div class="line"><span class="keyword">let</span> &#123; <span class="attr">prop</span>: x &#125; = <span class="literal">undefined</span>; <span class="comment">// TypeError</span></div><div class="line"><span class="keyword">let</span> &#123; <span class="attr">prop</span>: y &#125; = <span class="literal">null</span>; <span class="comment">// TypeError</span></div></pre></td></tr></table></figure><h2 id="五、函数参数的解构赋值"><a href="#五、函数参数的解构赋值" class="headerlink" title="五、函数参数的解构赋值"></a>五、函数参数的解构赋值</h2><p>解构赋值的规则是，只要等号右边的值<strong>不是对象或数组</strong>，就先将其转为对象。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//第一个move函数：下面代码中，函数move的参数是一个对象，通过对这个对象进行解构，得到变量x和y的值。如果解构失败，x和y等于默认值。</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">move</span>(<span class="params">&#123;x = <span class="number">0</span>, y = <span class="number">0</span>&#125; = &#123;&#125;</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> [x, y];</div><div class="line">&#125;</div><div class="line"></div><div class="line">move(&#123;<span class="attr">x</span>: <span class="number">3</span>, <span class="attr">y</span>: <span class="number">8</span>&#125;); <span class="comment">// [3, 8]</span></div><div class="line">move(&#123;<span class="attr">x</span>: <span class="number">3</span>&#125;); <span class="comment">// [3, 0]</span></div><div class="line">move(&#123;&#125;); <span class="comment">// [0, 0]</span></div><div class="line">move(); <span class="comment">// [0, 0]</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//第二个move函数：下面代码是为函数move的参数指定默认值，而不是为变量x和y指定默认值，所以会得到与前一种写法不同的结果。</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">move</span>(<span class="params">&#123;x, y&#125; = &#123; x: <span class="number">0</span>, y: <span class="number">0</span> &#125;</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> [x, y];</div><div class="line">&#125;</div><div class="line"></div><div class="line">move(&#123;<span class="attr">x</span>: <span class="number">3</span>, <span class="attr">y</span>: <span class="number">8</span>&#125;); <span class="comment">// [3, 8]</span></div><div class="line">move(&#123;<span class="attr">x</span>: <span class="number">3</span>&#125;); <span class="comment">// [3, undefined]</span></div><div class="line">move(&#123;&#125;); <span class="comment">// [undefined, undefined]</span></div><div class="line">move(); <span class="comment">// [0, 0]</span></div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;从数组和对象中提取值，对变量进行赋值，这被称为解构。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;一、数组的解构赋值&quot;&gt;&lt;a href=&quot;#一、数组的解构赋值&quot; class=&quot;headerlink&quot; title=&quot;一、数组的解构赋值&quot;&gt;&lt;/a&gt;一、数组的解构赋值&lt;/h2&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//以前ES5&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; a = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; b = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; c = &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//现在ES6&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; [a, b, c] = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; [foo, [[bar], baz]] = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, [[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;], &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;]];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;foo &lt;span class=&quot;comment&quot;&gt;// 1&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;bar &lt;span class=&quot;comment&quot;&gt;// 2&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;baz &lt;span class=&quot;comment&quot;&gt;// 3&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; [ , , third] = [&lt;span class=&quot;string&quot;&gt;&quot;foo&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;bar&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;baz&quot;&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;third &lt;span class=&quot;comment&quot;&gt;// &quot;baz&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; [x, , y] = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;x &lt;span class=&quot;comment&quot;&gt;// 1&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;y &lt;span class=&quot;comment&quot;&gt;// 3&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; [head, ...tail] = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;head &lt;span class=&quot;comment&quot;&gt;// 1&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;tail &lt;span class=&quot;comment&quot;&gt;// [2, 3, 4]&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; [x, y, ...z] = [&lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;x &lt;span class=&quot;comment&quot;&gt;// &quot;a&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;y &lt;span class=&quot;comment&quot;&gt;// undefined 解构不成功，变量的值就等于undefined。&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;z &lt;span class=&quot;comment&quot;&gt;// []&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//下面两个例子属于不完全结构，也可以成功&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; [x, y] = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;x &lt;span class=&quot;comment&quot;&gt;// 1&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;y &lt;span class=&quot;comment&quot;&gt;// 2&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; [a, [b], d] = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, [&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;], &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;a &lt;span class=&quot;comment&quot;&gt;// 1&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;b &lt;span class=&quot;comment&quot;&gt;// 2 是个谜&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;d &lt;span class=&quot;comment&quot;&gt;// 4&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="ES6" scheme="wangsiyuan233.github.io/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>聊聊系列(3)-- HTTP</title>
    <link href="wangsiyuan233.github.io/2018/04/02/38%E8%81%8A%E8%81%8A%E7%B3%BB%E5%88%97-3/"/>
    <id>wangsiyuan233.github.io/2018/04/02/38聊聊系列-3/</id>
    <published>2018-04-03T06:53:17.000Z</published>
    <updated>2018-04-14T00:58:29.683Z</updated>
    
    <content type="html"><![CDATA[<p>本文是<a href="https://book.douban.com/subject/25863515/" target="_blank" rel="external">《图解HTTP》</a>的“摘要”版本，笔者更多关注得是和自身知识所融洽的部分，如果对更详细的内容感兴趣，可以移步实体书。</p><h2 id="一、TCP-IP通信传输流"><a href="#一、TCP-IP通信传输流" class="headerlink" title="一、TCP/IP通信传输流"></a>一、TCP/IP通信传输流</h2><p><img src="https://i.imgur.com/wj6Zhcp.png" alt=""><br><a id="more"></a></p><h2 id="二、TCP协议三次握手策略"><a href="#二、TCP协议三次握手策略" class="headerlink" title="二、TCP协议三次握手策略"></a>二、TCP协议三次握手策略</h2><p>第一次：客户端 ——&gt;&gt;&gt; 服务端 SYN数据打包给你啦！<br>第二次：服务端 ——&gt;&gt;&gt; 客户端 我收到啦！（SYN/ACK）<br>第三次：客户端 ——&gt;&gt;&gt; 服务端 我知道你知道啦！</p><h2 id="三、概念的厘清"><a href="#三、概念的厘清" class="headerlink" title="三、概念的厘清"></a>三、概念的厘清</h2><p>1、DNS协议提供域名查找IP，或知道IP反查域名；<br>2、IP是一组纯地址，而我们访问的<code>baidu.com</code>是域名或主机名<br>3、URL是需要输入的资源地址（网址）；URI是用字符串标识的某一互联网资源；<br>   URL是URI的子集；<br>4、POST的目的是传输（发信息）<br>   GET的目的是请求资源；<br>5、cookie通过在请求和响应报文中写入cookie信息，来控制客户端的状态<br>   翻译成人话就是：刷新以后我在这个网站还是登陆的状态。</p><h2 id="四、HTTP状态码"><a href="#四、HTTP状态码" class="headerlink" title="四、HTTP状态码"></a>四、HTTP状态码</h2><p><img src="https://i.imgur.com/HFcsVlO.png" alt=""></p><blockquote><p>200 OK 服务端正常处理了客户端发来的请求<br>204 no content 服务端正常处理了客户端发来的请求,但返回的报文中不含主体部分；</p><h2 id="206-partial-content-服务端成功的执行了范围请求"><a href="#206-partial-content-服务端成功的执行了范围请求" class="headerlink" title="206 partial content 服务端成功的执行了范围请求"></a>206 partial content 服务端成功的执行了范围请求</h2><p>301 moved permanently 永久性重定向 请求的资源被分配了新的URI，以后也要用这个新的URI<br>302 Found 临时性重定向 请求的资源被分配了新的URI，现在就要用这个新的URI （已移动的资源可能会变回了，这次先用着吧）<br>303 see other 和302不同之处在于 要求GET方法定向获取资源<br>【当301/302/303返回时，几乎所有的浏览器都会删除请求主体+把POST改成GET，之后请求会再次自动发送】<br>304 Not Modified (虽然是3系，但是和重定向没有关系) 客户端发送了附带条件的请求，服务端虽然找到了资源，但是不符合[附带的条件]</p><h2 id="307-Temporary-Redirect-临时重定向-和302很像-也是禁止POST变成GET"><a href="#307-Temporary-Redirect-临时重定向-和302很像-也是禁止POST变成GET" class="headerlink" title="307 Temporary Redirect 临时重定向 和302很像 也是禁止POST变成GET"></a>307 Temporary Redirect 临时重定向 和302很像 也是禁止POST变成GET</h2><p>400 Bad Request 请求中有语法错误<br>401 Unauthorized 表示请求中需要HTTP认证哦！浏览器第1次就收401里面会带一个认证对话窗口，第2次再接到401代表用户认证失败<br>403 Forbidden 服务器拒绝了这次请求的资源</p><h2 id="404-Not-Found-服务器上无法找到请求的资源"><a href="#404-Not-Found-服务器上无法找到请求的资源" class="headerlink" title="404 Not Found 服务器上无法找到请求的资源"></a>404 Not Found 服务器上无法找到请求的资源</h2><p>5系代表服务器本身的错误<br>500 Internal Server Error 服务器在执行请求时发生了错误<br>503 Service Unavailable 服务器暂时处于超负荷运转或者停机维护阶段</p></blockquote><h2 id="五、GET请求"><a href="#五、GET请求" class="headerlink" title="五、GET请求"></a>五、GET请求</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">//GET 请求 </div><div class="line">GET /?w=1 HTTP/1.1</div><div class="line">Host: baidu.com</div><div class="line">Accept: text/html</div><div class="line"></div><div class="line"></div><div class="line">//响应</div><div class="line">HTTP/1.1 200 OK</div><div class="line">Content-Type: text/html; charset=utf-8</div><div class="line">Content-Length: 10000</div><div class="line"></div><div class="line"><span class="meta">&lt;!DOCTYPE&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span>......<span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><h2 id="六、POST请求"><a href="#六、POST请求" class="headerlink" title="六、POST请求"></a>六、POST请求</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">//POST 请求</div><div class="line">POST /login?w=1 HTTP/1.1</div><div class="line">Host: baidu.com</div><div class="line">Accept: application/ms-word</div><div class="line">Content-Type: application/x-www-form-urlencoded</div><div class="line">Content-Length: 10</div><div class="line"></div><div class="line">username=fangfang&amp;password=mima</div><div class="line"></div><div class="line">//响应</div><div class="line">HTTP/1.1 403 Forbidden</div><div class="line">Content-Type: application/md-word</div><div class="line">Content-Length: 200</div><div class="line"></div><div class="line">word格式</div></pre></td></tr></table></figure><h2 id="七、Web安全"><a href="#七、Web安全" class="headerlink" title="七、Web安全"></a>七、Web安全</h2><p>HTTP的不足之处：<br>1、通信使用明文，内容可能被窃听<br>2、通信放的什么可能被伪装<br>3、报文的完整性被篡改<br>—-&gt;&gt;&gt;&gt; 改进<br><strong>HTTP + 加密 + 认证 + 完整性保护 = HTTPS</strong><br>（HTTPS的不足：证书贵+速度很慢）</p><p>怎样给数据加密呢？<br>目前有以下几种加密方式：<br>1、对称加密 ： 加密和解密数据使用同一个密钥。这种加密方式的优点是速度很快，常见对称加密的算法有 AES；<br>2、非对称加密： 加密和解密使用不同的密钥，叫公钥和私钥。数据用公钥加密后必须用私钥解密，数据用私钥加密后必须用公钥解密。一般来说私钥自己保留好，把公钥公开给别人，让别人拿自己的公钥加密数据后发给自己，这样只有自己才能解密。 这种加密方式的特点是速度慢，CPU 开销大，常见非对称加密算法有 RSA；<br>3、Hash： hash 是把任意长度数据经过处理变成一个长度固定唯一的字符串，但任何人拿到这个字符串无法反向解密成原始数据（解开你就是密码学专家了），Hash 常用来验证数据的完整性。常见 Hash 算法有 MD5（已经不安全了）、SHA1、SHA256<br>这些加密其实都是各式各样的<strong>算法</strong>。</p><p><strong>讲个小故事</strong></p><p>班里来了个新同学小美，长的特别漂亮，小谷暗恋小美很久，终于有一天小谷鼓起勇气向小美表白。小谷写了个纸条：“我是小谷，我喜欢你，你喜欢我吗？” ，让小王转交给小美。<br>正常情况下，小王会把纸条转给小美，小美看到后很开心，回复了纸条：“我是小美，我也喜欢你”，让小王再转递给小谷。<br>可是小王也暗恋小美，当然不愿甘做嫁衣。这个时候小王可以有几方法来捣乱：<br>收到小谷的纸条后扔掉纸条。但这样做小谷收不到回应下课会去单独问小美，事情就败露了<br>偷窥纸条的内容，然后举报给老师<br>收到小谷的纸条后，小王立即给小谷发一个回复纸条：“我不喜欢你，我喜欢小王”。同时小王给小美发一个纸条：“我是小谷，你长的真丑，嘿嘿”<br>正常帮小谷和小美投递纸条，成就美事。但复印一份小谷的纸条，过两天小王把这个纸条发给了班里的其他女生小花，这样小美知道后必然会闹分手</p><p>小谷很聪明，早就看出来小王心怀不轨，可是没办法，要传信必然要经过小王，要怪就怪自己太腼腆不敢下课直接亲手送上。怎么办呢？<br>有一种办法是把纸条的信息加密(AES 加密)，小王就不知道纸条内容了。可是问题来了，小美也不知道密钥，她收到信后也无法解密啊。倒是可以把密钥放到纸条里，可这样小王也得到了密钥等于白忙活一场。<br>再说说小美，小美很漂亮，在以前的学校被称为数学女神，转学到这里后立即被小谷吸引了，她看出来小谷有点喜欢自己但又不十分确定，她不想主动。她猜到小谷会在上课的时候可能用写纸条的方式表白，也猜到猥琐的小王会在中间捣乱。如何让小谷能顺利向自己表白呢？小美在疯狂的思考：<br>方案一： 我可以生成一对公钥和私钥，把公钥公开给班里所有的同学。这样小谷就能得到公钥，把要发的信息用公钥加密，只有我自己能用私钥解密。可是我如何把我的回复发出去呢？如果用我的私钥加密，小谷倒是能用公钥解密，但班里任何同学都能解密，被其他同学看到就糗大了。而且如果小谷纸条的内容太多，他用公钥加密需要花一整节课的时间，不能耽误他学习<br>方案二：我可以生成一对公钥和私钥，把公钥公开给班里所有的同学，这样小谷就能得到公钥。如果小谷够聪明的话，他得到公钥后会生成一个对称加密AES的密钥，然后用我的公钥把 AES 密钥加密(AES 密钥长度很短加密几乎不需要时间)，然后把加密后的密钥发给我。我收到后用我的私钥解密，得到小谷和我约定的对对称加密密钥，然后我们用这个只有我们俩知道的对称密钥加密数据进行交流。 </p><p>下课休息的时候，小美给班里的同学说：“快数学考试了，我的数学很好，考场上需要要我帮忙的同学可以找我，我公布一下我的公钥，为了安全起见大家用我的公钥加密消息。”</p><p>一切貌似天衣无缝，可是小美在班里公布自己公钥的时候小谷正好拉肚子去了厕所，回来之后才知道这事，小谷于是问旁边的同学小花小美公钥是多少。小花以前是班里受欢迎的女生被很多男生仰慕，在小美来之后立即被夺了风头，一直怀恨在心。于是小花告诉了小谷一个假公钥，其实是自己生成的公钥。这样万一小谷找小美要小抄，自己可以冒充小美给一个错答案。</p><p>一切被小美看到眼里，这样不行啊， 别到时候自己和小谷的好事没成，反而同学考试被陷害栽赃到自己头上。怎么办呢？对了，班长是班里人品很正的人，可以用班长给自己做信用背书，正好前两天班长在班里通知了自己的公钥。 于是小美找到班长，做了一个证书，证书上有自己的名字、学号、公钥、公证人班长的名字，同时把这些信息通过 Hash (sha256)处理后请求班长用自己的私钥进行加密（为什么用 Hash 处理？因为东西太多非对称加密很费时），也放到证书上。于是小美再次把证书通报给班里所有的同学。</p><p>小谷这次得到了证书，发现上面的公证人是班长，于是先用班长的公钥对证书上被班长私钥加密后的字段进行解密，得到元素数据的 Hash。   再对元素数据进行 Hash和刚刚解密的 Hash 进行比对。如果比对成功表示证书上的信息无误，且是由班长担保的。这时候小谷确信证书上的公钥就是小美的。任何人因为没有班长的私钥都无法伪造证书。</p><p>你以为故事就这么圆满结束了吗？其实没有，班长前两天在公布自己的证书的时候小谷正好生病请假了。 他根本不知道班长的公钥是不是他本人的。<br>这个时候他发现班长的证书上有班主任的担保（班主任的公钥做了签名），班主任的证书上有校长的担保，而小谷是有校长的的公钥的，就印在学生证上。</p><p>终于，小谷收获了女神的芳心。</p><p>故事完了。故事中 小谷是浏览器，小美是服务器，小花和小王是坏蛋，班长是 CA 机构，班主任是上级 CA，校长是根 CA 服务器。当一个网站要使用 https 时先需在一些国际认证的 CA 机构填写网站信息申请证书，而这些 CA机构往往还有上层 CA，最终有一个根 CA。一般来说浏览器都会内置根 CA 和一些顶级 CA 的证书，但需要验证的时候会通过 CA 链逐级验证。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文是&lt;a href=&quot;https://book.douban.com/subject/25863515/&quot;&gt;《图解HTTP》&lt;/a&gt;的“摘要”版本，笔者更多关注得是和自身知识所融洽的部分，如果对更详细的内容感兴趣，可以移步实体书。&lt;/p&gt;
&lt;h2 id=&quot;一、TCP-IP通信传输流&quot;&gt;&lt;a href=&quot;#一、TCP-IP通信传输流&quot; class=&quot;headerlink&quot; title=&quot;一、TCP/IP通信传输流&quot;&gt;&lt;/a&gt;一、TCP/IP通信传输流&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/wj6Zhcp.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="聊聊系列" scheme="wangsiyuan233.github.io/tags/%E8%81%8A%E8%81%8A%E7%B3%BB%E5%88%97/"/>
    
      <category term="HTTP" scheme="wangsiyuan233.github.io/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>&lt;Algorithms&gt;-1.1基础编程模型</title>
    <link href="wangsiyuan233.github.io/2018/04/01/37Algorithms1-1/"/>
    <id>wangsiyuan233.github.io/2018/04/01/37Algorithms1-1/</id>
    <published>2018-04-02T06:33:49.000Z</published>
    <updated>2018-04-19T11:57:59.393Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://book.douban.com/subject/10432347/" target="_blank" rel="external">《算法 （第四版）》</a>梳理框架</p><p>不建议阅读，反正你也读不下去<br><a id="more"></a></p><blockquote><p>1.1编程基础模型</p></blockquote><p>本书是基于Java编程语言来实现的算法，我们这么做的原因是：</p><ul><li>我们的程序时精确的、优雅的、且完整的描述了算法；</li><li>你运行程序时可以学习到准确的算法（知识）；</li><li>你可以让你的算法马上投入到应用中。<br>这些优点对于用英语来描述算法的工作来说，非常重要。<br>我们现在有一种趋势：那就是不得不使用特殊的编程语言，使得将算法从执行细节中剥离出来变得困难。我们利用现代语言和对算法的丰富的解释使得执行的难度降低。<br>我们只用了Java的一小部分子集，同时我们停止使用我们自定义的子集，你将几乎看不到Java的结构。我们提供的代码是完整的，我们希望你可以下载并运行它，用我们的或者你自己的测试数据都可以。<br>我们涉及到的编程的构建、软件库和操作系统常常是在我们的编程模型上执行的，在这一小节和1.2小节，我们将完整的介绍这个系统模型，我们配套齐全就是为了让你明白这个书里的任一代码。我们的模型提供了一种慢步调去介绍这些材料。<br>在参考书目中，我们完整的通过阐明程序模型的基本特征，来详尽的描绘了Java程序。当讨论语言特征时，我们通过这些代码进行举例。当涉及到P46那样的细节时，我们假设你是有现代变成的经验的，所以你是可以认出这些代码的许多特性的，页码注释将会帮助你解决一些问题。自从我们的代码有点程式化，我们致力于使用符合Java语句和结构的代码，这同样适用于经验丰富的Java码农阅读这些代码。（这不是废话吗）<br>【【【【图1.1.1】】】】<br><strong>1.1.1Java的基础结构</strong><br>Java的类既是静态的方法库，也是数据类型定义，为了创造这两者，我们用了一下5个部分，它们是以Java和其他编程语言为基础的：</li><li><em>原始数据类型</em> 精确的定义了整数、浮点数和布尔值这些计算机编程概念。它们的定义包括取值范围和能够对相应的值进行的操作，它们能被组合为类似数学公式的表达式。</li><li><em>语句</em> 通过创建变量和控制执行流来赋值，或者引发副作用来进行计算。我们会使用6种语句：声明、赋值、条件、循环、调用和返回。</li><li><em>数组</em> 同种类型的数值。</li><li><em>静态方法</em> 概括代码，使程序成为独立的模块</li><li><em>字符串</em> 是一系列characters，Java中的一些操作是基于它们的。</li><li><em>标准输入/输出</em> 是程序和外界的桥梁。</li><li><em>数据抽象</em> 让我们定义了非原始数据类型，支持面向对象编程。<br>在这一小节，我们依次介绍前五个，数据抽象是下一节的内容。<br>跑一个Java程序意味着和操作系统或编程环境的交互，为了清晰和简介，我们把这样的活动叫做 虚拟终端，虚拟终端就是我们键入命令行编程的地方，快试试那些好的程序吧！<br>例如，BinarySearch有两种静态方法<code>rank()</code>和<code>main()</code>,<code>rank()</code>有四种语句，两个声明，一个循环和一个返回；<code>main()</code>有三个语句，一个声明，一个调用和一个循环。<br>为了调用Java程序，我们首先要编译Java命令行，接着运行这些Java命令行。例如运行BinarySearch，我们首先要输入命令行 Javac BinarySearch.java，接着我们输入 java BinarySearch把控制权移交给这段字节码程序。为了理解这段程序，我们接下来考虑的是详细介绍Java的原始数据类型、数组、静态方法、字符串和标准IO。</li></ul><p><strong>1.1.2原始数据类型与表达式</strong><br>数据类型就是一组数据+对其的操作的集合。我们首先考虑下面4种基础的Java语言：</p><ul><li><em>整型</em> 及其运算符</li><li><em>浮点型</em> 及其运算符</li><li><em>布尔值</em> 的{true 和 false}及其逻辑运算</li><li><em>字符型</em> 它的值是你能输入的英文字母数字字符和符合<br>接下来我们看看怎么指定这些类型的值或者怎样对这些类型进行操作。<br>表达式：优先级很重要，运算里面乘除大于加减，逻辑里面 ! &gt; &amp;&amp; &gt; ||,圆括号可以改变优先级；<br>类型转换：int3.7就是3；double3是3.0；<br>比较：在条件和循环语句中非常重要；<br>其他原始类型：64字节long、16字节short、16字节char、8字节byte、32字节单精float；</li></ul><p><strong>1.1.3语句</strong><br>Java 的程序是由 声明、赋值来控制操作的执行流<br>声明：给变量命名标识符；<br>赋值：给变量一种数据类型，当然Java也有隐式赋值法<br>条件：根据条件不同，执行不同的语句<br>循环：在块里可以反复执行下去，除非你有一个“暂停键”；<br>返回：是一种改变执行方向的静态方法<br>一个程序是由一系列的语句组成的，当然程序也有嵌套结构，一个条件语句中也可以包含条件语句<br>1.1.3.1<br>声明语句：变量名+类型，声明要在变量使用之前出现，变量的作用域就是定义它的地方<br>1.1.3.2<br>赋值语句：变量+数据类型，等号左边单一变量，右边相应的表达式<br>1.1.3.3<br>条件语句：用不同的操作处理不同的输入，如果是true语句就会执行<br>1.1.3.4<br>循环语句：与if语句不同的是，while语句会不断的check布尔值是否为true，然后不停的执行<br>1.1.3.5<br>break 和 continue: while循环时使用；<br>break：是跳出当前的循环块或者程序块。<br>continues：停止运行剩余的循环主体，回到循环的开始处继续运行。</p><p><strong>1.1.4 简便记法 程序有很多写法</strong><br>1.1.4.1<br>声明并初始化<br>1.1.4.2<br>隐式赋值：i++<br>1.1.4.3<br>单语句代码段<br>1.1.4.4<br>for语句</p><p><strong>1.1.5 数组</strong><br>数组储存着一系列相同type的值，我们同样希望能取到这些值<br>1.1.5.1<br>创造并初始化一个数组<br>三个步骤：声明name和type;创建arry;初始化<br>name + datatype + length<br>1.1.5.2<br>简化写法<br>如果是从0开始，for loop 可以省略<br>1.1.5.3<br>使用数组<br>数组在创建时的大小时确定的<br>1.1.5.4<br>起外号<br>数组名表示的是整个数组，如果我们要把数组a赋予数组b，此时，a和b都会指向同一个数组<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//正确赋值数组</span></div><div class="line"><span class="keyword">double</span>[]b = <span class="keyword">new</span> <span class="keyword">double</span>[N]</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, i &lt; N, i++)</div><div class="line">b[i] = a[i]</div></pre></td></tr></table></figure></p><p>1.1.5.5<br>二维数组<br>二维数组就是一维数组的数组。<br>我们规定：M为行，N为列<br>数组型初始化为0，布尔型初始化为false<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//正确赋值数组</span></div><div class="line"><span class="keyword">double</span>[]a = <span class="keyword">new</span> <span class="keyword">double</span>[M][N];</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, i &lt; N, i++)</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>, j &lt; N, j++)</div><div class="line">a[i][j] = <span class="number">0.0</span>;</div></pre></td></tr></table></figure></p><p><strong>1.1.6 静态方法</strong><br>在别的语言中，总是把静态方法叫做函数，它们都是按照语句的顺序执行的<br>1.1.6.1<br>一个方法中需要参数，返回的数值也有参数决定<br>Java中每一个静态方法都是由 signature 和 body 组成的<br>1.1.6.2<br>调用静态方法<br>调用静态方法的方法，是写出方法名，并在后面的括号中列出参数值，用逗号分隔。<br>当调用是表达式的一部分时，方法的返回值将会，替代表达式中的方法调用。<br>1.1.6.3<br>方法的性质<br>-参数按值来传递 ：参数的值是由调用方提供的；改变参数的值对函数没有啥影响；值传递意味着数组参数是原数组的别名<br>-方法名可以被重载：一个函数需要参数，另一个函数可以提供参数<br>-方法只能有一个返回值，但可以包含多个语句<br>-方法可能产生副作用：void方法没有返回值，void函数有 side effct</p><p>1.1.6.4 递归<br>一个方法可以调用它自己，就是递归。<br>-递归有一个基本的方法就是第一行就是返回语句<br>-递归总是试图address更小的问题<br>-递归要解决的父类问题和它的子类之间不能有交集<br>遵循了以上三条法则，代码就会变得简洁高效</p><p>1.1.6.5 基础编程模型<br>一个静态方法库是由 public clss + name + 括号 组成的。<br>Java通过创造静态方法库去解决一些特殊的项目需求<br>Java + class name + 字符串 就能调用 mian()<br>字符串组成的数组作为参数执行到最后一句时，程序结束</p><p>1.1.6.6 模块化编程<br>最重要的是，静态方法库能使编程模块化<br>一个库中的静态方法可以调用另一个库中的静态方法<br>这样做的好处有：<br>-代码体积合理<br>-方便再次使用<br>-升级执行了也方便被取代<br>-缩小调试范围</p><p>1.1.6.7 单元测试<br>适当的单元测试对程序时重要的<br>简单来说，每个模块的main()方法都要保证代码运行正常<br>随着模块的成熟，我们精化main（）方法成为 开发用例 以告诉我们更多细节<br>或成为测试用例 以便更广阔的测试<br>用例太复杂时，我们就需要一个独立的模块</p><p>1.1.6.8 外部库<br>以下四种静态方法，来自不同的库，一些是由数据类型决定的。<br>-标准系统库 java.lang：Math常用于数学计算<br>-导入的系统库 java.util.Array: java中有很多类似的库<br>-其他库比如 rank()<br>-标准库 Std<br>如果要在一个方法中声明一个库，我们需要在方法前知道库的名字</p><p><strong>1.1.7 API</strong><br>模块化编程的一个重要组成部分就是记录方法的用法并提供文档给其他人参考<br>1.1.7.1 举例<br>这些方法将它们的参数 运用数学方法 转换为一个特殊的类型<br>这种拓展的性质恰巧是现代编程的特点之一<br>API的每一行都描述了一种方法，并且提供了使用该方法所需要使用的所有信息</p><p>1.1.7.2 Java库<br>网上有许多Java版本的库，我们节选了一小部分，足够说明问题了</p><p>1.1.7.3 标准库<br>我们开发了一些库用来实现一些实用的功能<br>这些库大多用与处理输入和输出<br>有些方法非常简单，为啥我们还要把它们写进一个库呢？<br>-让我们把重心放在测试和算法上，而不是随机数的计算上<br>-方法库需要大量的测试，其中就包含了极端和罕见的情况，如果我们自己手写就很麻烦<br>这些都是模块化编程的基石，当然有些夸大其词了<br>哈哈其实这些方法执行起来并不困难，它们中有些还代表了有趣的算法~</p><p>1.1.7.4 自己的库<br>有没有想过自己写一个库呢？以后想要调用的时候就随时调用哦<br>-编写用例，将计算分解为可控的部分<br>-明确方法库和与其对应的API<br>-实现API和一个能够对方法进行独立测试的mian()函数<br>。。。。结果很诱人。。。。这三条我看都看不懂<br>自己的库不仅方便调用，而且能让你更好的着手复杂的工作</p><p><strong>1.1.8 字符串</strong><br>字符串竟然不是Java的原始数据类型！<br>1.1.8.1 字符串拼接<br>字符串的拼接结果是：两个字符串变成一个 ———— “hi,” + “Bob” —&gt; “hi,Bob”<br>1.1.8.2 类型转换<br>字符串的两个主要用途：<br>1、用户输入的值转换为相应的数据类型<br>2、将数据类型转换为屏幕能显示的值<br>？？？？？？？？？？？？  这是啥 ？？？？？？<br>1.1.8.3 自动转换<br>我们几乎不使用 toString()方法，是因为Java提供了拼接的方法<br>使用 + 就可以把其他数据类型转换为 String 类型<br>或者 +’’ 拼接一个空字符串，也可以转换<br>1.1.8.4 命令行参数<br>Java中字符串的一个用处是接受命令行传递信息<br>当你输入 java + 库名 + 字符串<br>java会调用 main()方法，将【由字符串变成的数组】<br>作为参数，传递给main()函数</p><p><strong>1.1.9 输入和输出</strong><br>Java的输入、输出和绘图库是为了与外界交流<br>1、Java的输入值来源于命令行参数 或 标准输入流，输出值 在 标准输出流中<br>2、我们必然要思考Java和操作系统之间的连接<br>3、我们把应用程序提供的输入和显示的窗口叫 终端<br>1.1.9.1 命令与参数<br>在终端，我们可以看到提示符，通过提示符我们可以输入命令或参数<br>/<em> 2018/4/14 p37-p41 </em>/<br>1.1.9.2 标准输出<br>StOut()库用来处理输出，一般来说，输出都会在终端窗口显示<br>1.1.9.3 格式化输出<br>printf()有两个参数，第一个参数是转换为字符串的方法，第二个参数是被转换的字符串<br>最简单的方式是 % 后面跟一个转换码：d是Java十进制整数、f是小数、s是字符串<br>% 和 转换码 中间还要加上一个表示转换出来字符串的 长度 的数字<br>1.1.9.4 标准输入<br>StIn()库的标准是空的或包含一些空格<br>标准输入的一个重要特点是，一旦你读完值，你的代码就会消失<br>也就是说，你退回去再读一遍<br>1.1.9.5 重定向和管道<br>重定向就是把标准输出保存到一个文件<br>将一个程序的输出通过【管道】作为另一个程序的输入<br>1.1.9.6 基于文件的输入和输出<br>我们的In 和 Out 库提供一些静态方法，来实现向文件中写入或从文件中读取一个原始数据类型的数组（的抽象 （？？？））<br>/<em> 2018/4/15 p42-p63 </em>/<br>1.1.9.7 标准绘图库（基本方法）<br>我们以前着眼于字符串的输入和输出，现在着眼于图像的输出<br>1.1.9.8 标准绘图 （控制方法）<br>不仅可以调整画笔的粗细，还能设置画画的时间，更能以一定的格式保存于一个文件当中，这个文件可以直接上传于网络</p><p><strong>1.1.10 二分查找</strong><br>我们挑选的例子是可以精确表达这个二分查找法，且是完全由Java表示的<br>1.1.10.1 二分查找<br>第3章第2节会详细介绍二分查找，现在见到介绍一下<br>用要查找的字母不断的和mid对比大小，直到该数字就是mid。<br>1.1.10.2 开发用例<br>可以直接比较两个文件中的 数字 的大小<br>比如A文件中的第1歌数字和B文件中的第1个数字进行比较<br>1.1.10.3 白名单过滤<br>我们的测试用例会通过模拟实际情况来展示当前算法的必要性，这就是 白名单过滤<br>1.1.10.4 性能<br>rank()这个函数甚至不需要输入时有序的，就能遍历它<br>那我们为啥还需要二分查找啥的？ 因为rank()非常慢啊！</p><p><strong>1.1.11 展望</strong><br>这一章节，我们学到了许多精又美的程序<br>往后，我们就要追求 抽象数据 和面向对象编程 了<br>抽象数据：程序可以自己定义数据类型，而不仅仅是静态方法里的预设类型了<br>1、不管是排序算法还是二分查找，我们都用相同的代码来处理不同的数据类型<br>2、比数组灵活，是高效算法的基础<br>3、可以让我们准确知道自己面对的是什么算法</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://book.douban.com/subject/10432347/&quot;&gt;《算法 （第四版）》&lt;/a&gt;梳理框架&lt;/p&gt;
&lt;p&gt;不建议阅读，反正你也读不下去&lt;br&gt;
    
    </summary>
    
    
      <category term="算法" scheme="wangsiyuan233.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>深入理解JavaScript--异步系列(2)</title>
    <link href="wangsiyuan233.github.io/2018/04/01/36%E5%BC%82%E6%AD%A5%E7%B3%BB%E5%88%97-2/"/>
    <id>wangsiyuan233.github.io/2018/04/01/36异步系列-2/</id>
    <published>2018-04-02T01:22:09.000Z</published>
    <updated>2018-04-14T00:57:47.827Z</updated>
    
    <content type="html"><![CDATA[<p>这一小节主讲ajax，可以看我之前的<a href="http://wangsiyuan233.cn/2018/02/28/AJAX%EF%BC%88一%EF%BC%89/" target="_blank" rel="external">封装一个ajax</a><br><a id="more"></a><br>实在是不想写Promise。。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这一小节主讲ajax，可以看我之前的&lt;a href=&quot;http://wangsiyuan233.cn/2018/02/28/AJAX%EF%BC%88一%EF%BC%89/&quot;&gt;封装一个ajax&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="异步" scheme="wangsiyuan233.github.io/tags/%E5%BC%82%E6%AD%A5/"/>
    
  </entry>
  
  <entry>
    <title>初探ES6(1)--let</title>
    <link href="wangsiyuan233.github.io/2018/03/31/35%E5%88%9D%E6%8E%A2ES6-1/"/>
    <id>wangsiyuan233.github.io/2018/03/31/35初探ES6-1/</id>
    <published>2018-04-01T01:22:09.000Z</published>
    <updated>2018-04-14T00:57:30.809Z</updated>
    
    <content type="html"><![CDATA[<p>先从一块代码讲起<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> liList = <span class="built_in">document</span>.querySelectorAll(<span class="string">'li'</span>) <span class="comment">// 共5个li</span></div><div class="line"><span class="keyword">for</span>( <span class="keyword">var</span> i=<span class="number">0</span>; i&lt;liList.length; i++)&#123;</div><div class="line">  liList[i].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(i)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>我们知道会依次打印出5个5.<br>只是将 var 改成 let 之后<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> liList = <span class="built_in">document</span>.querySelectorAll(<span class="string">'li'</span>) <span class="comment">// 共5个li</span></div><div class="line"><span class="keyword">for</span>( <span class="keyword">let</span> i=<span class="number">0</span>; i&lt;liList.length; i++)&#123;</div><div class="line">  liList[i].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(i)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>我们知道会依次打印出 1 2 3 4 5.<br><strong>var 和 let 竟然还有不同？</strong><br><a id="more"></a><br>一个大胆的猜测：<br>1、for( let i = 0; i&lt; 5; i++) 这句话的圆括号之间，有一个隐藏的作用域<br>2、for( let i = 0; i&lt; 5; i++) { 循环体 } 在每次执行循环体之前，JS 引擎会把 i 在循环体的上下文中重新声明及初始化一次。<br>第二块代码近似近似近似于：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> liList = <span class="built_in">document</span>.querySelectorAll(<span class="string">'li'</span>) <span class="comment">// 共5个li</span></div><div class="line"><span class="keyword">for</span>( <span class="keyword">let</span> i=<span class="number">0</span>; i&lt;liList.length; i++)&#123;</div><div class="line">  <span class="keyword">let</span> i = 隐藏作用域中的i <span class="comment">// 看这里看这里看这里</span></div><div class="line">  liList[i].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(i)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><strong>一、var 声明的「创建、初始化和赋值」过程</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> x = <span class="number">1</span></div><div class="line">  <span class="keyword">var</span> y = <span class="number">2</span></div><div class="line">&#125;</div><div class="line">fn()</div></pre></td></tr></table></figure></p><p><strong>二、let 声明的「创建、初始化和赋值」过程</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="keyword">let</span> x = <span class="number">1</span></div><div class="line">  x = <span class="number">2</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><strong>三、function 声明的「创建、初始化和赋值」过程</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">fn2()</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn2</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="number">2</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><strong>四、const 声明的「创建、初始化和赋值」过程</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> x = <span class="number">1</span></div><div class="line">  <span class="keyword">var</span> y = <span class="number">2</span></div><div class="line">&#125;</div><div class="line">fn()</div></pre></td></tr></table></figure></p><blockquote><p>结论:</p></blockquote><p>var 的「创建」和「初始化」都被提升了。<br>let 的「创建」过程被提升了，但是「初始化」没有提升。<br>const 只有「创建」和「初始化」，没有「赋值」过程。<br>function 的「创建」「初始化」和「赋值」都被提升了。</p><p>所谓<strong>暂时死区</strong>（temp dead zone），就是不能在初始化之前，使用变量。</p><p>如果 let x 的<strong>初始化过程失败</strong>了，那么<br>1、x 变量就将永远处于 created 状态。<br>2、你无法再次对 x 进行初始化（初始化只有一次机会，而那次机会你失败了）。<br>3、由于 x 无法被初始化，所以 x 永远处在暂时死区（也就是盗梦空间里的 limbo）！<br>4、有人会觉得 JS 坑，怎么能出现这种情况；其实问题不大，因为此时代码已经报错了，后面的代码想执行也没机会。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;先从一块代码讲起&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; liList = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.querySelectorAll(&lt;span class=&quot;string&quot;&gt;&#39;li&#39;&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// 共5个li&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;( &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i&amp;lt;liList.length; i++)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  liList[i].onclick = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(i)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;我们知道会依次打印出5个5.&lt;br&gt;只是将 var 改成 let 之后&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; liList = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.querySelectorAll(&lt;span class=&quot;string&quot;&gt;&#39;li&#39;&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// 共5个li&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;( &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i&amp;lt;liList.length; i++)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  liList[i].onclick = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(i)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;我们知道会依次打印出 1 2 3 4 5.&lt;br&gt;&lt;strong&gt;var 和 let 竟然还有不同？&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="ES6" scheme="wangsiyuan233.github.io/tags/ES6/"/>
    
  </entry>
  
</feed>
